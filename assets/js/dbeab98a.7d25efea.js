"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[41],{1904:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var s=t(4848),a=t(8453);const r={},o=void 0,i={id:"workflows",title:"workflows",description:"",source:"@site/docs/workflows.md",sourceDirName:".",slug:"/workflows",permalink:"/docs/workflows",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/workflows.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"json",permalink:"/docs/json"},next:{title:"yaml",permalink:"/docs/yaml"}},c={},u=[];function l(n){const e={code:"code",pre:"pre",...(0,a.R)(),...n.components};return(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'name: musl-cross-make - build and release\n\non:\n  workflow_dispatch:\n    inputs:\n      docker_only:\n        description: "Docker job only"\n        required: true\n        default: false\n        type: boolean\n\njobs:\n  bootstrap-matrix:\n    runs-on: ubuntu-latest\n    outputs:\n      matrix_includes: ${{ steps.triples.outputs.matrix_includes }}\n    steps:\n      - uses: actions/checkout@v4\n      - name: bootstrap the matrix\n        id: triples\n        run: echo "matrix_includes=$(jq -c . triples.json)" >> $GITHUB_OUTPUT\n\n  build:\n    if: inputs.docker_only == \'0\'\n    needs: bootstrap-matrix\n    runs-on: ubuntu-latest\n    container:\n      image: alpine:edge\n    permissions:\n      contents: write\n    strategy:\n      fail-fast: false\n      matrix: ${{ fromJSON(needs.bootstrap-matrix.outputs.matrix_includes) }}\n\n    name: build ${{ matrix.arch_type }}\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: apk install build deps\n        run: >\n          apk add --no-cache\n          autoconf automake\n          bash bison build-base\n          curl\n          findutils flex\n          git\n          libarchive-tools libtool linux-headers\n          patch perl pkgconf\n          rsync\n          tar texinfo\n          xz\n          zip\n\n      - name: Set ${{ matrix.arch_type }} musl to ${{ matrix.arch_config }}\n        run: sed "s|GCC_CONFIG_FOR_TARGET +=|GCC_CONFIG_FOR_TARGET += ${{ matrix.arch_config }}|" -i config.mak\n\n      - name: Show updated config.mak\n        run: cat config.mak\n\n      - name: install ${{ matrix.arch_type }} toolchain\n        run: make -j"$(nproc)" install TARGET="${{ matrix.arch_type }}" OUTPUT="$(pwd)/build/${{ matrix.arch_type }}"\n\n      - name: archive ${{ matrix.arch_type }} toolchain\n        run: |\n          cd "$(pwd)/build"\n          XZ_OPT=-9T0 tar -cvJf ${{ matrix.arch_type }}.tar.xz ${{ matrix.arch_type }}/\n\n      - name: Docker - upload artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: "musl-cross-make-${{ matrix.arch_type }}"\n          path: "build/${{ matrix.arch_type }}.tar.xz"\n\n  release:\n    name: Upload artifacts to release\n    runs-on: ubuntu-latest\n    needs: [bootstrap-matrix, build]\n    permissions:\n      contents: write\n    if: always() && contains(needs.*.result, \'success\') && !contains(needs.*.result, \'failure\') && !contains(needs.*.result, \'cancelled\') && inputs.docker_only == \'0\'\n    env:\n      GH_TOKEN: "${{ github.TOKEN }}"\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Host - Download artifacts\n        uses: actions/download-artifact@v4\n        with:\n          path: musl-cross-make\n          pattern: musl-cross-make-*\n          merge-multiple: true\n\n      - name: set release info from versions.mak\n        run: |\n          cp -f versions.mak release_body.md\n          jq -R \'split(" = ") | {(.[0]):.[1]}\' versions.mak | jq -s \'add\' > versions.json\n\n      - name: set tag via date\n        run: echo "github_tag=$(date +"%y%V")" >> $GITHUB_ENV\n\n      - name: Create release - tag - assets\n        uses: ncipollo/release-action@v1\n        with:\n          prerelease: false\n          artifacts: "musl-cross-make/*.tar.xz,versions.json"\n          replacesArtifacts: true\n          tag: "${{ env.github_tag }}"\n          name: "musl-cross-make toolchains"\n          bodyFile: release_body.md\n          allowUpdates: true\n\n  docker-publish:\n    if: always() && contains(needs.*.result, \'success\') && !contains(needs.*.result, \'failure\') && !contains(needs.*.result, \'cancelled\')\n    needs: [bootstrap-matrix, build, release]\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      packages: write\n    strategy:\n      fail-fast: false\n      matrix: ${{ fromJSON(needs.bootstrap-matrix.outputs.matrix_includes) }}\n\n    name: docker ${{ matrix.arch_type }}\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Extract metadata (tags, labels) for Docker\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY }}/${{ github.repository }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@v3\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ github.token }}\n\n      - name: Build and push\n        uses: docker/build-push-action@v5\n        with:\n          platforms: linux/amd64\n          context: .\n          file: Dockerfile\n          push: true\n          no-cache: true\n          tags: ghcr.io/${{ github.repository }}:${{ matrix.arch_type }}\n          labels: ${{ steps.meta.outputs.labels }}\n          build-args: |\n            TARGET=${{ matrix.arch_type }}\n            BASE_URL=https://github.com/userdocs/musl-cross-make/releases/latest/download\n            NINJA_URL=https://github.com/userdocs/qbt-ninja-build/releases/latest/download/ninja-x86_64\n'})})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>i});var s=t(6540);const a={},r=s.createContext(a);function o(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);