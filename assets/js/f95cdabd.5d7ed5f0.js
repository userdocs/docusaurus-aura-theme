"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[31],{8994:(t,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>_,toc:()=>a});var e=n(4848),o=n(8453);const i={},l=void 0,_={id:"bash",title:"bash",description:"Install using a terminal",source:"@site/docs/bash.md",sourceDirName:".",slug:"/bash",permalink:"/docusaurus-aura-theme/docs/bash",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/bash.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",next:{title:"ini",permalink:"/docusaurus-aura-theme/docs/ini"}},s={},a=[{value:"Install using a terminal",id:"install-using-a-terminal",level:3}];function c(t){const r={code:"code",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...t.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:"language-bash",children:"apk add bash\n"})}),"\n",(0,e.jsx)(r.h3,{id:"install-using-a-terminal",children:"Install using a terminal"}),"\n",(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:"language-bash",children:"wget -qO ~/qbt.sh git.io/qbstatic\n"})}),"\n",(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:"language-bash",children:"curl -sLo ~/qbt.sh git.io/qbstatic\n"})}),"\n",(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:"language-bash",children:"docker run -it -w /root -e \"LANG=en_GB.UTF-8\" -v ~/qbt:/root debian:latest /bin/bash -c 'apt update && apt install -y curl && curl -sLo ~/qbt.sh git.io/qbstatic && bash'\n"})}),"\n",(0,e.jsxs)(r.p,{children:["Alternatively, to bootstrap a container named ",(0,e.jsx)(r.code,{children:"qbtstatic"})," and it and leave it running in the background for reuse using ",(0,e.jsx)(r.code,{children:"-d"})," :"]}),"\n",(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:"language-bash",children:"docker run --name qbtstatic -it -d -w /root -e \"LANG=en_GB.UTF-8\" -v ~/qbt:/root debian:latest /bin/bash -c 'apt update && apt install -y curl && curl -sLo ~/qbt.sh git.io/qbstatic'\n"})}),"\n",(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:"language-bash",children:'#!/bin/sh\r\n#\r\n# cowpatch.sh, by Rich Felker\r\n#\r\n# Permission to use, copy, modify, and/or distribute this software for\r\n# any purpose with or without fee is hereby granted.\r\n#\r\n# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL\r\n# WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\r\n# WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\r\n# AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL\r\n# DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA\r\n# OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\r\n# TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n# PERFORMANCE OF THIS SOFTWARE.\r\n#\r\n# Take the above disclaimer seriously! This is an experimental tool\r\n# still and does not yet take precautions against malformed/malicious\r\n# patch files like patch(1) does. It may act out-of-tree and clobber\r\n# stuff you didn\'t intend for it to clobber.\r\n#\r\n\r\nset -e\r\n\r\necho() { printf "%s\\n" "$*"; }\r\n\r\ncow() {\r\n\ttest -h "$1" || return 0\r\n\tif test -d "$1"; then\r\n\t\tcase "$1" in\r\n\t\t\t*/*) set -- "${1%/*}/" "${1##*/}" ;;\r\n\t\t\t*) set -- "" "$1" ;;\r\n\t\tesac\r\n\t\tmkdir "$1$2.tmp.$$"\r\n\t\tmv "$1$2" "$1.$2.orig"\r\n\t\tmv "$1$2.tmp.$$" "$1$2"\r\n\t\t(cd "$1$2" && ln -s ../".$2.orig"/* .)\r\n\telse\r\n\t\tcp "$1" "$1.tmp.$$"\r\n\t\tmv "$1.tmp.$$" "$1"\r\n\tfi\r\n}\r\n\r\ncowp() {\r\n\twhile test "$1"; do\r\n\t\tcase "$1" in\r\n\t\t\t*/*) set -- "${1#*/}" "$2${2:+/}${1%%/*}" ;;\r\n\t\t\t*) set -- "" "$2${2:+/}$1" ;;\r\n\t\tesac\r\n\t\tcow "$2"\r\n\tdone\r\n}\r\n\r\ncowpatch() {\r\n\r\n\tplev=0\r\n\tOPTIND=1\r\n\twhile getopts ":p:i:RNE" opt; do\r\n\t\ttest "$opt" = p && plev="$OPTARG"\r\n\tdone\r\n\r\n\twhile IFS= read -r l; do\r\n\t\tcase "$l" in\r\n\t\t\t+++*)\r\n\t\t\t\tIFS=" \t" read -r _ pfile _ <<- "EOF"\r\n\t\t\t\t\t$l\r\n\t\t\t\tEOF\r\n\t\t\t\ti=0\r\n\t\t\t\twhile test "$i" -lt "$plev"; do\r\n\t\t\t\t\tpfile=${pfile#*/}\r\n\t\t\t\t\ti=$((i + 1))\r\n\t\t\t\tdone\r\n\t\t\t\tcowp "$pfile"\r\n\t\t\t\techo "$l"\r\n\t\t\t\t;;\r\n\t\t\t@@*)\r\n\t\t\t\techo "$l"\r\n\t\t\t\tIFS=" " read -r _ i j _ <<- EOF\r\n\t\t\t\t\t$l\r\n\t\t\t\tEOF\r\n\r\n\t\t\t\tcase "$i" in *,*) i=${i#*,} ;; *) i=1 ;; esac\r\n\t\t\t\tcase "$j" in *,*) j=${j#*,} ;; *) j=1 ;; esac\r\n\t\t\t\twhile test "$i" -gt 0 || test "$j" -gt 0; do\r\n\t\t\t\t\tIFS= read -r l\r\n\t\t\t\t\techo "$l"\r\n\t\t\t\t\tcase "$l" in\r\n\t\t\t\t\t\t+*) j=$((j - 1)) ;;\r\n\t\t\t\t\t\t-*) i=$((i - 1)) ;;\r\n\t\t\t\t\t\t*)\r\n\t\t\t\t\t\t\ti=$((i - 1))\r\n\t\t\t\t\t\t\tj=$((j - 1))\r\n\t\t\t\t\t\t\t;;\r\n\t\t\t\t\tesac\r\n\t\t\t\tdone\r\n\t\t\t\t;;\r\n\t\t\t*) echo "$l" ;;\r\n\t\tesac\r\n\tdone\r\n\r\n}\r\n\r\ngotcmd=0\r\nwhile getopts ":p:i:RNEI:S:" opt; do\r\n\tcase "$opt" in\r\n\t\tI)\r\n\t\t\tfind "$OPTARG" -path "$OPTARG/*" -prune -exec sh -c \'ln -sf "$@" .\' sh {} +\r\n\t\t\tgotcmd=1\r\n\t\t\t;;\r\n\t\tS)\r\n\t\t\tcowp "$OPTARG"\r\n\t\t\tgotcmd=1\r\n\t\t\t;;\r\n\t\t*)\r\n\t\t\texit 1\r\n\t\t\t;;\r\n\tesac\r\ndone\r\ntest "$gotcmd" -eq 0 || exit 0\r\n\r\ncowpatch "$@" | patch "$@"\n'})}),"\n",(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:"language-bash",children:'#!/usr/bin/env bash\r\n#\r\n# cSpell:includeRegExp #.*\r\n#\r\n# Copyright 2020 by userdocs and contributors\r\n#\r\n# SPDX-License-Identifier: Apache-2.0\r\n#\r\n# @author - userdocs\r\n#\r\n# @contributors IceCodeNew Stanislas boredazfcuk AdvenT. guillaumedsde inochisa\r\n#\r\n# @credits - https://gist.github.com/notsure2 https://github.com/c0re100/qBittorrent-Enhanced-Edition\r\n#\r\n# Script Formatting - https://marketplace.visualstudio.com/items?itemName=foxundermoon.shell-format\r\n#\r\n#################################################################################################################################################\r\n# Script version = Major minor patch\r\n#################################################################################################################################################\r\nscript_version="2.0.7"\r\n#################################################################################################################################################\r\n# Set some script features - https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html\r\n#################################################################################################################################################\r\nset -a\r\n#################################################################################################################################################\r\n# Unset some variables to set defaults.\r\n#################################################################################################################################################\r\nunset qbt_skip_delete qbt_git_proxy qbt_curl_proxy qbt_install_dir qbt_build_dir qbt_working_dir qbt_modules_test qbt_python_version\r\n#################################################################################################################################################\r\n# Color me up Scotty - define some color values to use as variables in the scripts.\r\n#################################################################################################################################################\r\ncolor_red="\\e[31m" color_red_light="\\e[91m"\r\ncolor_green="\\e[32m" color_green_light="\\e[92m"\r\ncolor_yellow="\\e[33m" color_yellow_light="\\e[93m"\r\ncolor_blue="\\e[34m" color_blue_light="\\e[94m"\r\ncolor_magenta="\\e[35m" color_magenta_light="\\e[95m"\r\ncolor_cyan="\\e[36m" color_cyan_light="\\e[96m"\r\n\r\ntext_bold="\\e[1m" text_dim="\\e[2m" text_underlined="\\e[4m" text_blink="\\e[5m" text_newline="\\n"\r\n\r\nunicode_red_circle="\\e[31m\\U2B24\\e[0m" unicode_red_light_circle="\\e[91m\\U2B24\\e[0m"\r\nunicode_green_circle="\\e[32m\\U2B24\\e[0m" unicode_green_light_circle="\\e[92m\\U2B24\\e[0m"\r\nunicode_yellow_circle="\\e[33m\\U2B24\\e[0m" unicode_yellow_light_circle="\\e[93m\\U2B24\\e[0m"\r\nunicode_blue_circle="\\e[34m\\U2B24\\e[0m" unicode_blue_light_circle="\\e[94m\\U2B24\\e[0m"\r\nunicode_magenta_circle="\\e[35m\\U2B24\\e[0m" unicode_magenta_light_circle="\\e[95m\\U2B24\\e[0m"\r\nunicode_cyan_circle="\\e[36m\\U2B24\\e[0m" unicode_cyan_light_circle="\\e[96m\\U2B24\\e[0m"\r\nunicode_grey_circle="\\e[37m\\U2B24\\e[0m" unicode_grey_light_circle="\\e[97m\\U2B24\\e[0m"\r\n\r\ncolor_end="\\e[0m"\r\n\r\n# Function to test color and show outputs in the terminal\r\n_color_test() {\r\n\t# Check if the terminal supports color output\r\n\tif [[ -t 1 ]]; then\r\n\t\tcolour_array=("${color_red}red" "${color_red_light}light red" "${color_green}green" "${color_green_light}light green" "${color_yellow}yellow" "${color_yellow_light}light yellow" "${color_blue}blue" "${color_blue_light}ligh blue" "${color_magenta}magenta" "${color_magenta_light}light magenta" "${color_cyan}cyan" "${color_cyan_light}light cyan")\r\n\t\tformatting_array=("${text_bold}Text Bold" "${text_dim}Text Dim" "${text_underlined}Text Underline" "${text_newline}New line" "${text_blink}Text Blink")\r\n\t\tunicode_array=("${unicode_red_circle}" "${unicode_red_light_circle}" "${unicode_green_circle}" "${unicode_green_light_circle}" "${unicode_yellow_circle}" "${unicode_yellow_light_circle}" "${unicode_blue_circle}" "${unicode_blue_light_circle}" "${unicode_magenta_circle}" "${unicode_magenta_light_circle}" "${unicode_cyan_circle}" "${unicode_cyan_light_circle}" "${unicode_grey_circle}" "${unicode_grey_light_circle}")\r\n\t\tprintf \'\\n\'\r\n\t\tfor colours in "${colour_array[@]}" "${formatting_array[@]}" "${unicode_array[@]}"; do\r\n\t\t\tprintf \'%b\\n\' "${colours}${color_end}"\r\n\t\tdone\r\n\t\tprintf \'\\n\'\r\n\t\texit\r\n\telse\r\n\t\techo "The terminal does not support color output."\r\n\t\texit 1\r\n\tfi\r\n}\r\n[[ "${1}" == "ctest" ]] && _color_test # ./scriptname.sh ctest\r\n#######################################################################################################################################################\r\n# Check we are on a supported OS and release.\r\n#######################################################################################################################################################\r\nget_os_info() { # Function to source /etc/os-release and get info from it on demand.\r\n\t# shellcheck source=/dev/null\r\n\tif source /etc/os-release &> /dev/null; then\r\n\t\tprintf "%s" "${!1%_*}" # the exansion part is specific to the Alpine VERSION_ID format 1.2.3_alpha but won\'t break anything in Debian based format. 12/24.04\r\n\telse\r\n\t\tprintf "%s" "unknown" # This will make the script exit on the version check and provide useful reason.\r\n\tfi\r\n}\r\n\r\nos_id="$(get_os_info ID)"                                                         # Get the ID for this this OS.\r\nos_version_codename="$(get_os_info VERSION_CODENAME)"                             # Get the codename for this this OS. Note, Alpine does not have a unique codename.\r\nos_version_id="$(get_os_info VERSION_ID)"                                         # Get the version number for this codename, for example: 10, 20.04, 3.12.4\r\n[[ "$(wc -w <<< "${os_version_id//\\./ }")" -eq "2" ]] && alpine_min_version="310" # Account for variation in the versioning 3.1 or 3.1.0 to make sure the check works correctly\r\n[[ "${os_id}" =~ ^(alpine)$ ]] && os_version_codename="alpine"                    # If alpine, set the codename to alpine. We check for min v3.10 later with codenames.\r\n\r\n# Check against allowed codenames or if the codename is alpine version greater than 3.10\r\nif [[ ! "${os_version_codename}" =~ ^(alpine|bullseye|bookworm|focal|jammy|noble)$ ]] || [[ "${os_version_codename}" =~ ^(alpine)$ && "${os_version_id//\\./}" -lt "${alpine_min_version:-3100}" ]]; then\r\n\tprintf \'\\n%b\\n\\n\' " ${unicode_red_circle} ${color_yellow} This is not a supported OS. There is no reason to continue.${color_end}"\r\n\tprintf \'%b\\n\\n\' " id: ${text_dim}${color_yellow_light}${os_id}${color_end} codename: ${text_dim}${color_yellow_light}${os_version_codename}${color_end} version: ${text_dim}${color_red_light}${os_version_id}${color_end}"\r\n\tprintf \'%b\\n\\n\' " ${unicode_yellow_circle} ${text_dim}These are the supported platforms${color_end}"\r\n\tprintf \'%b\\n\' " ${color_magenta_light}Debian${color_end} - ${color_blue_light}bullseye${color_end} - ${color_blue_light}bookworm${color_end}"\r\n\tprintf \'%b\\n\' " ${color_magenta_light}Ubuntu${color_end} - ${color_blue_light}focal${color_end} - ${color_blue_light}jammy${color_end} - ${color_blue_light}noble${color_end}"\r\n\tprintf \'%b\\n\\n\' " ${color_magenta_light}Alpine${color_end} - ${color_blue_light}3.10.0${color_end} ${text_dim}or greater${color_end}"\r\n\texit 1\r\nfi\r\n#######################################################################################################################################################\r\n# Source env vars from a file if it exists but it will be overridden by switches and flags passed to the script\r\n#######################################################################################################################################################\r\nif [[ -f "${PWD}/.qbt_env" ]]; then\r\n\tprintf \'\\n%b\\n\' " ${unicode_magenta_circle} Sourcing .qbt_env file"\r\n\t# shellcheck source=/dev/null\r\n\tsource "${PWD}/.qbt_env"\r\nfi\r\n#######################################################################################################################################################\r\n# Multi arch stuff\r\n#######################################################################################################################################################\r\n# Define all available multi arches we use from here https://github.com/userdocs/qbt-musl-cross-make#readme\r\ndeclare -gA multi_arch_options\r\nmulti_arch_options[default]="skip"\r\nmulti_arch_options[armel]="armel"\r\nmulti_arch_options[armhf]="armhf"\r\nmulti_arch_options[armv7]="armv7"\r\nmulti_arch_options[aarch64]="aarch64"\r\nmulti_arch_options[x86_64]="x86_64"\r\nmulti_arch_options[x86]="x86"\r\nmulti_arch_options[s390x]="s390x"\r\nmulti_arch_options[powerpc]="powerpc"\r\nmulti_arch_options[ppc64el]="ppc64el"\r\nmulti_arch_options[mips]="mips"\r\nmulti_arch_options[mipsel]="mipsel"\r\nmulti_arch_options[mips64]="mips64"\r\nmulti_arch_options[mips64el]="mips64el"\r\nmulti_arch_options[riscv64]="riscv64"\r\n#######################################################################################################################################################\r\n# This function sets some default values we use but whose values can be overridden by certain flags or exported as variables before running the script\r\n#######################################################################################################################################################\r\n_set_default_values() {\r\n\t# For docker deploys to not get prompted to set the timezone.\r\n\texport DEBIAN_FRONTEND="noninteractive" && TZ="Europe/London"\r\n\r\n\t# The default build configuration is qmake + qt5, qbt_build_tool=cmake or -c will make qt6 and cmake default\r\n\tqbt_build_tool="${qbt_build_tool:-qmake}"\r\n\r\n\t# Default to empty to use host native build tools. This way we can build on native arch on a supported OS and skip cross build toolchains\r\n\tqbt_cross_name="${qbt_cross_name:-default}"\r\n\r\n\t# Default to host - we are not really using this for anything other than what it defaults to so no need to set it.\r\n\tqbt_cross_target="${qbt_cross_target:-${os_id}}"\r\n\r\n\t# yes to create debug build to use with gdb - disables stripping - for some reason libtorrent b2 builds are 200MB or larger. qbt_build_debug=yes or -d\r\n\tqbt_build_debug="${qbt_build_debug:-no}"\r\n\r\n\t# github actions workflows - use https://github.com/userdocs/qbt-workflow-files/releases/latest instead of direct downloads from various source locations.\r\n\t# Provides an alternative source and does not spam download hosts when building matrix builds.\r\n\tqbt_workflow_files="${qbt_workflow_files:-no}"\r\n\r\n\t# github actions workflows - use the workflow files saved as artifacts instead of downloading from workflow files or host per matrix\r\n\tqbt_workflow_artifacts="${qbt_workflow_artifacts:-no}"\r\n\r\n\t# Provide a git username and repo in this format - username/repo\r\n\t# In this repo the structure needs to be like this /patches/libtorrent/1.2.11/patch and/or /patches/qbittorrent/4.3.1/patch\r\n\t# your patch file will be automatically fetched and loaded for those matching tags.\r\n\tqbt_patches_url="${qbt_patches_url:-userdocs/qbittorrent-nox-static}"\r\n\r\n\t# Default to this version of libtorrent is no tag or branch is specified. qbt_libtorrent_version=1.2 or -lt v1.2.18\r\n\tqbt_libtorrent_version="${qbt_libtorrent_version:-2.0}"\r\n\r\n\t# Use release Jamfile unless we need a specific fix from the relevant RC branch.\r\n\t# Using this can also break builds when non backported changes are present which will require a custom jamfile\r\n\tqbt_libtorrent_master_jamfile="${qbt_libtorrent_master_jamfile:-no}"\r\n\r\n\t# Strip symbols by default as we need full debug builds to be useful gdb to backtrace so stripping is a sensible default optimisation.\r\n\tqbt_optimise_strip="${qbt_optimise_strip:-yes}"\r\n\r\n\t# Github actions specific - Build revisions - The workflow will set this dynamically so that the urls are not hardcoded to a single repo\r\n\tqbt_revision_url="${qbt_revision_url:-userdocs/qbittorrent-nox-static}"\r\n\r\n\t# Provide a path to check for cached local git repos and use those instead. Priority over workflow files.\r\n\tqbt_cache_dir="${qbt_cache_dir%/}"\r\n\r\n\t# Env setting for the icu tag\r\n\tqbt_skip_icu="${qbt_skip_icu:-yes}"\r\n\r\n\t# Env setting for the boost tag\r\n\tqbt_boost_tag="${qbt_boost_tag:-}"\r\n\r\n\t# Env setting for the libtorrent tag\r\n\tqbt_libtorrent_tag="${qbt_libtorrent_tag:-}"\r\n\r\n\t# Env setting for the Qt tag\r\n\tqbt_qt_tag="${qbt_qt_tag:-}"\r\n\r\n\t# Env setting for the qbittorrent tag\r\n\tqbt_qbittorrent_tag="${qbt_qbittorrent_tag:-}"\r\n\r\n\t# We are only using python3 but it\'s easier to just change this if we need to for some reason.\r\n\tqbt_python_version="3"\r\n\r\n\t# The Alpine repository we use for package sources\r\n\tCDN_URL="http://dl-cdn.alpinelinux.org/alpine/edge/main" # for alpine\r\n\r\n\t# Define our list of available modules in an array.\r\n\tqbt_modules=("all" "install" "glibc" "zlib" "iconv" "icu" "openssl" "boost" "libtorrent" "double_conversion" "qtbase" "qttools" "qbittorrent")\r\n\r\n\t# Create this array empty. Modules listed in or added to this array will be removed from the default list of modules, changing the behaviour of all or install\r\n\tdelete=()\r\n\r\n\t# Create this array empty. Packages listed in or added to this array will be removed from the default list of packages, changing the list of installed dependencies\r\n\tdelete_pkgs=()\r\n\t# Dynamic tests to change settings based on the use of qmake,cmake,strip and debug\r\n\tif [[ "${qbt_build_debug}" = "yes" ]]; then\r\n\t\tqbt_optimise_strip="no"\r\n\t\tqbt_cmake_debug=\'ON\'\r\n\t\tqbt_libtorrent_debug=\'debug-symbols=on\'\r\n\t\tqbt_qbittorrent_debug=\'--enable-debug\'\r\n\telse\r\n\t\tqbt_cmake_debug=\'OFF\'\r\n\tfi\r\n\r\n\t# staticish builds\r\n\tif [[ ${qbt_static_ish:=no} == "yes" ]]; then\r\n\t\tqbt_ldflags_static=""\r\n\r\n\t\tif [[ "${os_id}" =~ ^(debian|ubuntu)$ ]]; then delete+=("glibc"); fi\r\n\r\n\t\tif [[ ${qbt_cross_name} != "default" ]]; then\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_light_circle} You cannot use the ${color_blue_light}-si${color_end} flag with cross compilation${color_end}"\r\n\t\t\texit 1\r\n\t\tfi\r\n\telse\r\n\t\tqbt_ldflags_static="-static"\r\n\tfi\r\n\r\n\t# Dynamic tests to change settings based on the use of qmake,cmake,strip and debug\r\n\tif [[ "${qbt_optimise_strip}" = "yes" && "${qbt_build_debug}" = "no" ]]; then\r\n\t\tqbt_strip_qmake=\'strip\'\r\n\t\tqbt_strip_flags=\'-s\'\r\n\telse\r\n\t\tqbt_strip_qmake=\'-nostrip\'\r\n\t\tqbt_strip_flags=\'\'\r\n\tfi\r\n\r\n\t# Dynamic tests to change settings based on the use of qmake,cmake,strip and debug\r\n\tcase "${qbt_qt_version}" in\r\n\t\t5)\r\n\t\t\tif [[ "${qbt_build_tool}" != \'cmake\' ]]; then\r\n\t\t\t\tqbt_build_tool="qmake"\r\n\t\t\t\tqbt_use_qt6="OFF"\r\n\t\t\tfi\r\n\t\t\t;;&\r\n\t\t6)\r\n\t\t\tqbt_build_tool="cmake"\r\n\t\t\tqbt_use_qt6="ON"\r\n\t\t\t;;&\r\n\t\t"")\r\n\t\t\t[[ "${qbt_build_tool}" == \'cmake\' ]] && qbt_qt_version="6" || qbt_qt_version="5"\r\n\t\t\t;;&\r\n\t\t*)\r\n\t\t\t[[ ! "${qbt_qt_version}" =~ ^(5|6)$ ]] && qbt_workflow_files="no"\r\n\t\t\t[[ "${qbt_build_tool}" == \'qmake\' && "${qbt_qt_version}" =~ ^6 ]] && qbt_build_tool="cmake"\r\n\t\t\t[[ "${qbt_build_tool}" == \'cmake\' && "${qbt_qt_version}" =~ ^5 ]] && qbt_build_tool="cmake" qbt_qt_version="6"\r\n\t\t\t[[ "${qbt_build_tool}" == \'cmake\' && "${qbt_qt_version}" =~ ^6 ]] && qbt_use_qt6="ON"\r\n\t\t\t;;\r\n\tesac\r\n\r\n\t# If we are cross building then bootstrap the cross build tools we ned for the target arch else set native arch and remove the debian cross build tools\r\n\tif [[ "${multi_arch_options[${qbt_cross_name}]}" == "${qbt_cross_name}" ]]; then\r\n\t\t_multi_arch info_bootstrap\r\n\telse\r\n\t\tcross_arch="$(uname -m)"\r\n\t\tdelete_pkgs+=("crossbuild-essential-${cross_arch}")\r\n\tfi\r\n\r\n\t# if Alpine then delete modules we don\'t use and set the required packages array\r\n\tif [[ "${os_id}" =~ ^(alpine)$ ]]; then\r\n\t\tdelete+=("glibc")\r\n\t\t[[ -z "${qbt_cache_dir}" ]] && delete_pkgs+=("coreutils" "gpg")\r\n\t\tqbt_required_pkgs=("autoconf" "automake" "bash" "bash-completion" "build-base" "coreutils" "curl" "git" "gpg" "pkgconf" "libtool" "perl" "python${qbt_python_version}" "python${qbt_python_version}-dev" "py${qbt_python_version}-numpy" "py${qbt_python_version}-numpy-dev" "linux-headers" "ttf-freefont" "graphviz" "cmake" "re2c")\r\n\tfi\r\n\r\n\t# if debian based then set the required packages array\r\n\tif [[ "${os_id}" =~ ^(debian|ubuntu)$ ]]; then\r\n\t\t[[ -z "${qbt_cache_dir}" ]] && delete_pkgs+=("autopoint" "gperf")\r\n\t\tqbt_required_pkgs=("autopoint" "gperf" "gettext" "texinfo" "gawk" "bison" "build-essential" "crossbuild-essential-${cross_arch}" "curl" "pkg-config" "automake" "libtool" "git" "openssl" "perl" "python${qbt_python_version}" "python${qbt_python_version}-dev" "python${qbt_python_version}-numpy" "unzip" "graphviz" "re2c")\r\n\tfi\r\n\r\n\t# remove this module by default unless provided as a first argument to the script.\r\n\tif [[ "${1}" != \'install\' ]]; then\r\n\t\tdelete+=("install")\r\n\tfi\r\n\r\n\t# Don\'t remove the icu module if it was provided as a positional parameter.\r\n\t# else skip icu by default unless the -i flag is provided.\r\n\tif [[ "${qbt_skip_icu}" != \'yes\' && "${*}" =~ ([[:space:]]|^)"icu"([[:space:]]|$) ]]; then\r\n\t\tqbt_skip_icu="no"\r\n\telif [[ "${qbt_skip_icu}" != "no" ]]; then\r\n\t\tdelete+=("icu")\r\n\tfi\r\n\r\n\t# Configure default dependencies and modules if cmake is not specified\r\n\tif [[ "${qbt_build_tool}" != \'cmake\' ]]; then\r\n\t\tdelete+=("double_conversion")\r\n\t\tdelete_pkgs+=("unzip" "ttf-freefont" "graphviz" "cmake" "re2c")\r\n\telse\r\n\t\t[[ "${qbt_skip_icu}" != "no" ]] && delete+=("icu")\r\n\tfi\r\n\r\n\t# The default is 17 but can be manually defined via the env qbt_standard - this will be overridden by the _set_cxx_standard function in specific cases\r\n\tqbt_standard="${qbt_standard:-17}" qbt_cxx_standard="c++${qbt_standard}"\r\n\r\n\t# Set the working dir to our current location and all things well be relative to this location.\r\n\tqbt_working_dir="$(pwd)"\r\n\r\n\t# Used with printf. Use the qbt_working_dir variable but the ${HOME} path is replaced with a literal ~\r\n\tqbt_working_dir_short="${qbt_working_dir/${HOME}/\\~}"\r\n\r\n\t# Install relative to the script location.\r\n\tqbt_install_dir="${qbt_working_dir}/qbt-build"\r\n\r\n\t# Used with printf. Use the qbt_install_dir variable but the ${HOME} path is replaced with a literal ~\r\n\tqbt_install_dir_short="${qbt_install_dir/${HOME}/\\~}"\r\n\r\n\t# Get the local users $PATH before we isolate the script by setting HOME to the install dir in the _set_build_directory function.\r\n\tqbt_local_paths="$PATH"\r\n}\r\n#######################################################################################################################################################\r\n# This function will check for a list of defined dependencies from the qbt_required_pkgs array. Apps like python3-dev are dynamically set\r\n#######################################################################################################################################################\r\n_check_dependencies() {\r\n\tprintf \'\\n%b\\n\\n\' " ${unicode_blue_light_circle} ${text_bold}Checking if required core dependencies are installed${color_end}"\r\n\r\n\t# remove packages in the delete_pkgs from the qbt_required_pkgs array\r\n\tfor target in "${delete_pkgs[@]}"; do\r\n\t\tfor i in "${!qbt_required_pkgs[@]}"; do\r\n\t\t\tif [[ "${qbt_required_pkgs[i]}" == "${target}" ]]; then\r\n\t\t\t\tunset \'qbt_required_pkgs[i]\'\r\n\t\t\tfi\r\n\t\tdone\r\n\tdone\r\n\r\n\t# Rebuild array to sort index from 0\r\n\tqbt_required_pkgs=("${qbt_required_pkgs[@]}")\r\n\r\n\t# This checks over the qbt_required_pkgs array for the OS specified dependencies to see if they are installed\r\n\tfor pkg in "${qbt_required_pkgs[@]}"; do\r\n\r\n\t\tif [[ "${os_id}" =~ ^(alpine)$ ]]; then\r\n\t\t\tpkgman() { apk info -e "${pkg}"; }\r\n\t\tfi\r\n\r\n\t\tif [[ "${os_id}" =~ ^(debian|ubuntu)$ ]]; then\r\n\t\t\tpkgman() { dpkg -s "${pkg}"; }\r\n\t\tfi\r\n\r\n\t\tif pkgman > /dev/null 2>&1; then\r\n\t\t\tprintf \'%b\\n\' " ${unicode_green_circle} ${pkg}"\r\n\t\telse\r\n\t\t\tif [[ -n "${pkg}" ]]; then\r\n\t\t\t\tdeps_installed="no"\r\n\t\t\t\tprintf \'%b\\n\' " ${unicode_red_circle} ${pkg}"\r\n\t\t\t\tqbt_checked_required_pkgs+=("$pkg")\r\n\t\t\tfi\r\n\t\tfi\r\n\tdone\r\n\r\n\t# Check if user is able to install the dependencies, if yes then do so, if no then exit.\r\n\tif [[ "${deps_installed}" == "no" ]]; then\r\n\t\tif [[ "$(id -un)" == \'root\' ]]; then\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_blue_light_circle} ${color_green}Updating${color_end}"\r\n\r\n\t\t\tif [[ "${os_id}" =~ ^(alpine)$ ]]; then\r\n\t\t\t\tapk update --repository="${CDN_URL}"\r\n\t\t\t\tapk upgrade --repository="${CDN_URL}"\r\n\t\t\t\tapk fix\r\n\t\t\tfi\r\n\r\n\t\t\tif [[ "${os_id}" =~ ^(debian|ubuntu)$ ]]; then\r\n\t\t\t\tapt-get update -y\r\n\t\t\t\tapt-get upgrade -y\r\n\t\t\t\tapt-get autoremove -y\r\n\t\t\tfi\r\n\r\n\t\t\t[[ -f /var/run/reboot-required ]] && {\r\n\t\t\t\tprintf \'\\n%b\\n\\n\' " ${color_red}This machine requires a reboot to continue installation. Please reboot now.${color_end}"\r\n\t\t\t\texit\r\n\t\t\t}\r\n\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_blue_light_circle}${color_green} Installing required dependencies${color_end}"\r\n\r\n\t\t\tif [[ "${os_id}" =~ ^(alpine)$ ]]; then\r\n\t\t\t\tif ! apk add "${qbt_checked_required_pkgs[@]}" --repository="${CDN_URL}"; then\r\n\t\t\t\t\tprintf \'\\n\'\r\n\t\t\t\t\texit 1\r\n\t\t\t\tfi\r\n\t\t\tfi\r\n\r\n\t\t\tif [[ "${os_id}" =~ ^(debian|ubuntu)$ ]]; then\r\n\t\t\t\tif ! apt-get install -y "${qbt_checked_required_pkgs[@]}"; then\r\n\t\t\t\t\tprintf \'\\n\'\r\n\t\t\t\t\texit 1\r\n\t\t\t\tfi\r\n\t\t\tfi\r\n\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_green_circle}${color_green} Dependencies installed!${color_end}"\r\n\r\n\t\t\tdeps_installed="yes"\r\n\t\telse\r\n\t\t\tprintf \'\\n%b\\n\' " ${text_bold}Please request or install the missing core dependencies before using this script${color_end}"\r\n\r\n\t\t\tif [[ "${os_id}" =~ ^(alpine)$ ]]; then\r\n\t\t\t\tprintf \'\\n%b\\n\\n\' " ${color_red_light}apk add${color_end} ${qbt_checked_required_pkgs[*]}"\r\n\t\t\tfi\r\n\r\n\t\t\tif [[ "${os_id}" =~ ^(debian|ubuntu)$ ]]; then\r\n\t\t\t\tprintf \'\\n%b\\n\\n\' " ${color_red_light}apt-get install -y${color_end} ${qbt_checked_required_pkgs[*]}"\r\n\t\t\tfi\r\n\r\n\t\t\texit\r\n\t\tfi\r\n\tfi\r\n\r\n\t# All dependency checks passed print\r\n\tif [[ "${deps_installed}" != "no" ]]; then\r\n\t\tprintf \'\\n%b\\n\' " ${unicode_green_circle}${text_bold} Dependencies: All checks passed, continuing to build${color_end}"\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# This function converts a version string to a number for comparison purposes.\r\n#######################################################################################################################################################\r\n_semantic_version() {\r\n\tlocal test_array\r\n\tread -ra test_array < <(printf "%s" "${@//./ }")\r\n\tprintf "%d%03d%03d%03d" "${test_array[@]}"\r\n}\r\n#######################################################################################################################################################\r\n# _print_env\r\n#######################################################################################################################################################\r\n_print_env() {\r\n\tprintf \'\\n%b\\n\\n\' " ${unicode_yellow_circle} Default env settings${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_libtorrent_version=\\"${color_green_light}${qbt_libtorrent_version}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_qt_version=\\"${color_green_light}${qbt_qt_version}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_build_tool=\\"${color_green_light}${qbt_build_tool}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_cross_name=\\"${color_green_light}${qbt_cross_name}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_patches_url=\\"${color_green_light}${qbt_patches_url}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_skip_icu=\\"${color_green_light}${qbt_skip_icu}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_boost_tag=\\"${color_green_light}${github_tag[boost]}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_libtorrent_tag=\\"${color_green_light}${github_tag[libtorrent]}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_qt_tag=\\"${color_green_light}${github_tag[qtbase]}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_qbittorrent_tag=\\"${color_green_light}${github_tag[qbittorrent]}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_libtorrent_master_jamfile=\\"${color_green_light}${qbt_libtorrent_master_jamfile}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_workflow_files=\\"${color_green_light}${qbt_workflow_files}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_workflow_artifacts=\\"${color_green_light}${qbt_workflow_artifacts}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_cache_dir=\\"${color_green_light}${qbt_cache_dir}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_optimise_strip=\\"${color_green_light}${qbt_optimise_strip}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_build_debug=\\"${color_green_light}${qbt_build_debug}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\' " ${color_yellow_light}  qbt_standard=\\"${color_green_light}${qbt_standard}${color_yellow_light}\\"${color_end}"\r\n\tprintf \'%b\\n\\n\' " ${color_yellow_light}  qbt_static_ish=\\"${color_green_light}${qbt_static_ish}${color_yellow_light}\\"${color_end}"\r\n}\r\n#######################################################################################################################################################\r\n# These functions set the cxx standard dynmically based on the libtorrent versions, qt version and qbittorrent combinations\r\n#######################################################################################################################################################\r\n_qt_std_cons() {\r\n\t[[ "${qbt_qt_version}" == "6" ]] && cxx_check="yes"\r\n\tprintf \'%s\' "${cxx_check:-no}"\r\n}\r\n\r\n_libtorrent_std_cons() {\r\n\t[[ "${github_tag[libtorrent]}" =~ ^(RC_1_2|RC_2_0)$ ]] && cxx_check="yes"\r\n\t[[ "${github_tag[libtorrent]}" =~ ^v1\\.2\\. && "$(_semantic_version "${github_tag[libtorrent]/v/}")" -ge "$(_semantic_version "1.2.20")" ]] && cxx_check="yes"\r\n\t[[ "${github_tag[libtorrent]}" =~ ^v2\\.0\\. && "$(_semantic_version "${github_tag[libtorrent]/v/}")" -ge "$(_semantic_version "2.0.10")" ]] && cxx_check="yes"\r\n\tprintf \'%s\' "${cxx_check:-no}"\r\n}\r\n\r\n_qbittorrent_std_cons() {\r\n\t[[ "${github_tag[qbittorrent]}" == "master" ]] && cxx_check="yes"\r\n\t[[ "${github_tag[qbittorrent]}" =~ ^release- && "$(_semantic_version "${github_tag[qbittorrent]/release-/}")" -ge "$(_semantic_version "4.6.0")" ]] && cxx_check="yes"\r\n\tprintf \'%s\' "${cxx_check:-no}"\r\n}\r\n\r\n_set_cxx_standard() {\r\n\t[[ $(_qt_std_cons) == "yes" && $(_libtorrent_std_cons) == "yes" && $(_qbittorrent_std_cons) == "yes" ]] && qbt_standard="23" qbt_cxx_standard="c++${qbt_standard}"\r\n}\r\n\r\n#######################################################################################################################################################\r\n# These functions set some build conditions dynmically based on the libtorrent versions, qt version and qbittorrent combinations\r\n#######################################################################################################################################################\r\n_qbittorrent_build_cons() {\r\n\t[[ "${github_tag[qbittorrent]}" == "master" ]] && disable_qt5="yes"\r\n\t[[ "${github_tag[qbittorrent]}" == "v5_0_x" ]] && disable_qt5="yes"\r\n\t[[ "${github_tag[qbittorrent]}" =~ ^release- && "$(_semantic_version "${github_tag[qbittorrent]/release-/}")" -ge "$(_semantic_version "5.0.0")" ]] && disable_qt5="yes"\r\n\tprintf \'%s\' "${disable_qt5:-no}"\r\n}\r\n\r\n_set_build_cons() {\r\n\tif [[ $(_qbittorrent_build_cons) == "yes" && "${qbt_qt_version}" == "5" ]]; then\r\n\t\tprintf \'\\n%b\\n\\n\' " ${text_blink}${unicode_red_light_circle}${color_end} ${color_yellow}qBittorrent ${color_magenta}${github_tag[qbittorrent]}${color_yellow} does not support ${color_red}Qt5${color_yellow}. Please use ${color_green}Qt6${color_yellow} or a qBittorrent ${color_green}v4${color_yellow} tag.${color_end}"\r\n\t\tif [[ -d "${release_info_dir}" ]]; then touch "${release_info_dir}/disable-qt5"; fi # qbittorrent v5 transtion - workflow specific\r\n\t\texit                                                                                # non error exit to not upset github actions - just skip the step\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# This is a command test function: _cmd exit 1\r\n#######################################################################################################################################################\r\n_cmd() {\r\n\tif ! "${@}"; then\r\n\t\tprintf \'\\n%b\\n\\n\' " The command: ${color_red_light}${*}${color_end} failed"\r\n\t\texit 1\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# This is a command test function to test build commands for failure\r\n#######################################################################################################################################################\r\n_post_command() {\r\n\toutcome=("${PIPESTATUS[@]}")\r\n\t[[ -n "${1}" ]] && command_type="${1}"\r\n\tif [[ "${outcome[*]}" =~ [1-9] ]]; then\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_circle}${color_red_light} Error: The ${command_type:-tested} command produced an exit code greater than 0 - Check the logs${color_end}"\r\n\t\texit 1\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# This function is to test a directory exists before attempting to cd and fail with and exit code if it doesn\'t.\r\n#######################################################################################################################################################\r\n_pushd() {\r\n\tif ! pushd "$@" &> /dev/null; then\r\n\t\tprintf \'\\n%b\\n\' "This directory does not exist. There is a problem"\r\n\t\tprintf \'\\n%b\\n\\n\' "${color_red_light}${1}${color_end}"\r\n\t\texit 1\r\n\tfi\r\n}\r\n\r\n_popd() {\r\n\tif ! popd &> /dev/null; then\r\n\t\tprintf \'%b\\n\' "This directory does not exist. There is a problem"\r\n\t\texit 1\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# This function makes sure the log directory and path required exists for tee\r\n#######################################################################################################################################################\r\n_tee() {\r\n\t[[ "$#" -eq 1 && "${1%/*}" =~ / ]] && mkdir -p "${1%/*}"\r\n\t[[ "$#" -eq 2 && "${2%/*}" =~ / ]] && mkdir -p "${2%/*}"\r\n\tcommand tee "$@"\r\n}\r\n#######################################################################################################################################################\r\n# error functions\r\n#######################################################################################################################################################\r\n_error_tag() {\r\n\t[[ "${github_tag[*]}" =~ error_tag ]] && {\r\n\t\tprintf \'\\n\'\r\n\t\texit\r\n\t}\r\n}\r\n#######################################################################################################################################################\r\n# _curl test download functions - default is no proxy - _curl is a test function and _curl_curl is the command function\r\n#######################################################################################################################################################\r\n_curl_curl() {\r\n\t"$(type -P curl)" -sNL4fq --connect-timeout 5 --retry 5 --retry-delay 5 --retry-max-time 25 "${qbt_curl_proxy[@]}" "${@}"\r\n}\r\n\r\n_curl() {\r\n\tif ! _curl_curl "${@}"; then\r\n\t\treturn 1\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# git test download functions - default is no proxy - git is a test function and _git_git is the command function\r\n#######################################################################################################################################################\r\n_git_git() {\r\n\t"$(type -P git)" "${qbt_git_proxy[@]}" "${@}"\r\n}\r\n\r\n_git() {\r\n\tif [[ "${2}" == \'-t\' ]]; then\r\n\t\tgit_test_cmd=("${1}" "${2}" "${3}")\r\n\telse\r\n\t\t[[ "${9}" =~ https:// ]] && git_test_cmd=("${9}")   # 9th place in our download folder function for qttools\r\n\t\t[[ "${11}" =~ https:// ]] && git_test_cmd=("${11}") # 11th place in our download folder function\r\n\tfi\r\n\r\n\tif ! _curl -fIL "${git_test_cmd[@]}" &> /dev/null; then\r\n\t\tprintf \'\\n%b\\n\\n\' " ${color_yellow}Git test 1: There is an issue with your proxy settings or network connection${color_end}"\r\n\t\texit\r\n\tfi\r\n\r\n\tstatus="$(\r\n\t\t_git_git ls-remote -qht --refs --exit-code "${git_test_cmd[@]}" &> /dev/null\r\n\t\tprintf "%s" "${?}"\r\n\t)"\r\n\r\n\tif [[ "${2}" == \'-t\' && "${status}" -eq \'0\' ]]; then\r\n\t\tprintf \'%b\\n\' "${3}"\r\n\telif [[ "${2}" == \'-t\' && "${status}" -ge \'1\' ]]; then\r\n\t\tprintf \'%b\\n\' \'error_tag\'\r\n\telse\r\n\t\tif ! _git_git "${@}"; then\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${color_yellow}Git test 2: There is an issue with your proxy settings or network connection${color_end}"\r\n\t\t\texit\r\n\t\tfi\r\n\tfi\r\n}\r\n\r\n_test_git_ouput() {\r\n\tif [[ "${1}" == \'error_tag\' ]]; then\r\n\t\tprintf \'\\n%b\\n\' " ${text_blink}${unicode_red_light_circle}${color_end} ${color_yellow}The provided ${2} tag ${color_red}${3}${color_end}${color_yellow} is not valid${color_end}"\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# Boost URL test function\r\n#######################################################################################################################################################\r\n_boost_url() {\r\n\tif [[ "${github_tag[boost]}" =~ \\.beta ]]; then\r\n\t\tlocal boost_asset="${github_tag[boost]/\\.beta/\\.b}"\r\n\t\tlocal boost_asset_type="beta"\r\n\telse\r\n\t\tlocal boost_asset="${github_tag[boost]}"\r\n\t\tlocal boost_asset_type="release"\r\n\tfi\r\n\r\n\tlocal boost_url_array=(\r\n\t\t"https://boostorg.jfrog.io/artifactory/main/${boost_asset_type}/${github_tag[boost]/boost-/}/source/${boost_asset//[-\\.]/_}.tar.gz"\r\n\t\t"https://archives.boost.io/${boost_asset_type}/${github_tag[boost]/boost-/}/source/${boost_asset//[-\\.]/_}.tar.gz"\r\n\t)\r\n\r\n\tfor url in "${boost_url_array[@]}"; do\r\n\t\tif _curl -sfLI "${url}" &> /dev/null; then\r\n\t\t\tboost_url_status="200"\r\n\t\t\tsource_archive_url[boost]="${url}"\r\n\t\t\tsource_default[boost]="file"\r\n\t\t\tbreak\r\n\t\telse\r\n\t\t\tboost_url_status="403"\r\n\t\t\tsource_default[boost]="folder"\r\n\t\tfi\r\n\tdone\r\n}\r\n#######################################################################################################################################################\r\n# Debug stuff\r\n#######################################################################################################################################################\r\n_debug() {\r\n\tif [[ "${script_debug_urls}" == "yes" ]]; then\r\n\t\tmapfile -t github_url_sorted < <(printf \'%s\\n\' "${!github_url[@]}" | sort)\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_magenta_circle} ${color_yellow_light}github_url${color_end}"\r\n\t\tfor n in "${github_url_sorted[@]}"; do\r\n\t\t\tprintf \'%b\\n\' " ${color_green_light}$n${color_end}: ${color_blue_light}${github_url[$n]}${color_end}" #: ${github_url[$n]}"\r\n\t\tdone\r\n\r\n\t\tmapfile -t github_tag_sorted < <(printf \'%s\\n\' "${!github_tag[@]}" | sort)\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_magenta_circle} ${color_yellow_light}github_tag${color_end}"\r\n\t\tfor n in "${github_tag_sorted[@]}"; do\r\n\t\t\tprintf \'%b\\n\' " ${color_green_light}$n${color_end}: ${color_blue_light}${github_tag[$n]}${color_end}" #: ${github_url[$n]}"\r\n\t\tdone\r\n\r\n\t\tmapfile -t app_version_sorted < <(printf \'%s\\n\' "${!app_version[@]}" | sort)\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_magenta_circle} ${color_yellow_light}app_version${color_end}"\r\n\t\tfor n in "${app_version_sorted[@]}"; do\r\n\t\t\tprintf \'%b\\n\' " ${color_green_light}$n${color_end}: ${color_blue_light}${app_version[$n]}${color_end}" #: ${github_url[$n]}"\r\n\t\tdone\r\n\r\n\t\tmapfile -t source_archive_url_sorted < <(printf \'%s\\n\' "${!source_archive_url[@]}" | sort)\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_magenta_circle} ${color_yellow_light}source_archive_url${color_end}"\r\n\t\tfor n in "${source_archive_url_sorted[@]}"; do\r\n\t\t\tprintf \'%b\\n\' " ${color_green_light}$n${color_end}: ${color_blue_light}${source_archive_url[$n]}${color_end}" #: ${github_url[$n]}"\r\n\t\tdone\r\n\r\n\t\tmapfile -t qbt_workflow_archive_url_sorted < <(printf \'%s\\n\' "${!qbt_workflow_archive_url[@]}" | sort)\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_magenta_circle} ${color_yellow_light}qbt_workflow_archive_url${color_end}"\r\n\t\tfor n in "${qbt_workflow_archive_url_sorted[@]}"; do\r\n\t\t\tprintf \'%b\\n\' " ${color_green_light}$n${color_end}: ${color_blue_light}${qbt_workflow_archive_url[$n]}${color_end}" #: ${github_url[$n]}"\r\n\t\tdone\r\n\r\n\t\tmapfile -t source_default_sorted < <(printf \'%s\\n\' "${!source_default[@]}" | sort)\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_magenta_circle} ${color_yellow_light}source_default${color_end}"\r\n\t\tfor n in "${source_default_sorted[@]}"; do\r\n\t\t\tprintf \'%b\\n\' " ${color_green_light}$n${color_end}: ${color_blue_light}${source_default[$n]}${color_end}" #: ${github_url[$n]}"\r\n\t\tdone\r\n\r\n\t\tprintf \'\\n%b\\n\' " ${unicode_magenta_circle} ${color_yellow_light}Tests${color_end}"\r\n\t\tprintf \'\\n%b\\n\' " ${color_green_light}boost_url_status:${color_end} ${color_blue_light}${boost_url_status}${color_end}"\r\n\t\tprintf \'%b\\n\' " ${color_green_light}test_url_status:${color_end} ${color_blue_light}${test_url_status}${color_end}"\r\n\r\n\t\tprintf \'\\n\'\r\n\t\texit\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# This function sets some compiler flags globally - b2 settings are set in the ~/user-config.jam  set in the _installation_modules function\r\n#######################################################################################################################################################\r\n_custom_flags_set() {\r\n\tCXXFLAGS="${qbt_optimize/*/${qbt_optimize} }-std=${qbt_cxx_standard} ${qbt_ldflags_static} -w -Wno-psabi -I${include_dir}"\r\n\tCPPFLAGS="${qbt_optimize/*/${qbt_optimize} }${qbt_ldflags_static} -w -Wno-psabi -I${include_dir}"\r\n\tLDFLAGS="${qbt_optimize/*/${qbt_optimize} }${qbt_ldflags_static} ${qbt_strip_flags} -L${lib_dir} -pthread"\r\n}\r\n\r\n_custom_flags_reset() {\r\n\tCXXFLAGS="${qbt_optimize/*/${qbt_optimize} } -w -std=${qbt_cxx_standard}"\r\n\tCPPFLAGS="${qbt_optimize/*/${qbt_optimize} } -w"\r\n\tLDFLAGS=""\r\n}\r\n#######################################################################################################################################################\r\n# This function installs a completed static build of qbittorrent-nox to the /usr/local/bin for root or ${HOME}/bin for non root\r\n#######################################################################################################################################################\r\n_install_qbittorrent() {\r\n\tif [[ -f "${qbt_install_dir}/completed/qbittorrent-nox" ]]; then\r\n\t\tif [[ "$(id -un)" == \'root\' ]]; then\r\n\t\t\tmkdir -p "/usr/local/bin"\r\n\t\t\tcp -rf "${qbt_install_dir}/completed/qbittorrent-nox" "/usr/local/bin"\r\n\t\telse\r\n\t\t\tmkdir -p "${HOME}/bin"\r\n\t\t\tcp -rf "${qbt_install_dir}/completed/qbittorrent-nox" "${LOCAL_USER_HOME}/bin"\r\n\t\tfi\r\n\r\n\t\tprintf \'\\n%b\\n\' " ${unicode_blue_light_circle} qbittorrent-nox has been installed!${color_end}"\r\n\t\tprintf \'\\n%b\\n\' " Run it using this command:"\r\n\t\t[[ "$(id -un)" == \'root\' ]] && printf \'\\n%b\\n\\n\' " ${color_green}qbittorrent-nox${color_end}" || printf \'\\n%b\\n\\n\' " ${color_green}~/bin/qbittorrent-nox${color_end}"\r\n\t\texit\r\n\telse\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_circle} qbittorrent-nox has not been built to the defined install directory:"\r\n\t\tprintf \'\\n%b\\n\' "${color_green}${qbt_install_dir_short}/completed${color_end}"\r\n\t\tprintf \'\\n%b\\n\\n\' "Please build it using the script first then install"\r\n\t\texit\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# Script Version check\r\n#######################################################################################################################################################\r\n_script_version() {\r\n\tscript_version_remote="$(_curl -sL "${script_url}" | sed -rn \'s|^script_version="(.*)"$|\\1|p\')"\r\n\r\n\tif [[ "$(_semantic_version "${script_version}")" -lt "$(_semantic_version "${script_version_remote}")" ]]; then\r\n\t\tprintf \'\\n%b\\n\' " ${text_blink}${unicode_red_circle}${color_end} Script update available! Versions - ${color_yellow_light}local:${color_red_light}${script_version}${color_end} ${color_yellow_light}remote:${color_green_light}${script_version_remote}${color_end}"\r\n\t\tprintf \'\\n%b\\n\' " ${unicode_green_circle} curl -sLo ${BASH_SOURCE[0]} https://git.io/qbstatic${color_end}"\r\n\telif [[ "$(_semantic_version "${script_version}")" -gt "$(_semantic_version "${script_version_remote}")" ]]; then\r\n\t\tprintf \'\\n%b\\n\' " ${unicode_green_circle} Script version: ${color_red_light}${script_version}-dev${color_end}"\r\n\telse\r\n\t\tprintf \'\\n%b\\n\' " ${unicode_green_circle} Script version: ${color_green_light}${script_version}${color_end}"\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# URL test for normal use and proxy use - make sure we can reach google.com before processing the URL functions\r\n#######################################################################################################################################################\r\n_test_url() {\r\n\ttest_url_status="$(_curl -o /dev/null --head --write-out \'%{http_code}\' "https://github.com")"\r\n\tif [[ "${test_url_status}" -eq "200" ]]; then\r\n\t\tprintf \'\\n%b\\n\' " ${unicode_green_circle} Test URL = ${color_green}passed${color_end}"\r\n\telse\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_circle} ${color_yellow}Test URL failed:${color_end} ${color_yellow_light}There could be an issue with your proxy settings or network connection${color_end}"\r\n\t\texit\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# This function sets the build and installation directory. If the argument -b is used to set a build directory that directory is set and used.\r\n# If nothing is specified or the switch is not used it defaults to the hard-coded path relative to the scripts location - qbittorrent-build\r\n#######################################################################################################################################################\r\n_set_build_directory() {\r\n\tif [[ -n "${qbt_build_dir}" ]]; then\r\n\t\tif [[ "${qbt_build_dir}" =~ ^/ ]]; then\r\n\t\t\tqbt_install_dir="${qbt_build_dir}"\r\n\t\t\tqbt_install_dir_short="${qbt_install_dir/${HOME}/\\~}"\r\n\t\telse\r\n\t\t\tqbt_install_dir="${qbt_working_dir}/${qbt_build_dir}"\r\n\t\t\tqbt_install_dir_short="${qbt_working_dir_short}/${qbt_build_dir}"\r\n\t\tfi\r\n\tfi\r\n\r\n\t# Set lib and include directory paths based on install path.\r\n\tinclude_dir="${qbt_install_dir}/include"\r\n\tlib_dir="${qbt_install_dir}/lib"\r\n\r\n\t# Define some build specific variables\r\n\tLOCAL_USER_HOME="${HOME}" # Get the local user\'s home dir path before we contain HOME to the build dir.\r\n\tHOME="${qbt_install_dir}"\r\n\tPATH="${qbt_install_dir}/bin${PATH:+:${qbt_local_paths}}"\r\n\tPKG_CONFIG_PATH="${lib_dir}/pkgconfig"\r\n}\r\n#######################################################################################################################################################\r\n# This function is where we set your URL and github tag info that we use with other functions.\r\n#######################################################################################################################################################\r\n_set_module_urls() {\r\n\t# Update check url for the _script_version function\r\n\tscript_url="https://raw.githubusercontent.com/userdocs/qbittorrent-nox-static/master/qbittorrent-nox-static.sh"\r\n\t##########################################################################################################################################################\r\n\t# Create all the arrays now\r\n\t##########################################################################################################################################################\r\n\tdeclare -gA github_url github_tag app_version source_archive_url qbt_workflow_archive_url qbt_workflow_override source_default\r\n\t##########################################################################################################################################################\r\n\t# Configure the github_url associative array for all the applications this script uses and we call them as ${github_url[app_name]}\r\n\t##########################################################################################################################################################\r\n\tif [[ "${os_id}" =~ ^(debian|ubuntu)$ ]]; then\r\n\t\tgithub_url[cmake_ninja]="https://github.com/userdocs/qbt-cmake-ninja-crossbuilds.git"\r\n\t\tgithub_url[glibc]="https://sourceware.org/git/glibc.git"\r\n\telse\r\n\t\tgithub_url[ninja]="https://github.com/userdocs/qbt-ninja-build.git"\r\n\tfi\r\n\tgithub_url[zlib]="https://github.com/zlib-ng/zlib-ng.git"\r\n\tgithub_url[iconv]="https://git.savannah.gnu.org/git/libiconv.git"\r\n\tgithub_url[icu]="https://github.com/unicode-org/icu.git"\r\n\tgithub_url[double_conversion]="https://github.com/google/double-conversion.git"\r\n\tgithub_url[openssl]="https://github.com/openssl/openssl.git"\r\n\tgithub_url[boost]="https://github.com/boostorg/boost.git"\r\n\tgithub_url[libtorrent]="https://github.com/arvidn/libtorrent.git"\r\n\tgithub_url[qtbase]="https://github.com/qt/qtbase.git"\r\n\tgithub_url[qttools]="https://github.com/qt/qttools.git"\r\n\tgithub_url[qbittorrent]="https://github.com/qbittorrent/qBittorrent.git"\r\n\t##########################################################################################################################################################\r\n\t# Configure the github_tag associative array for all the applications this script uses and we call them as ${github_tag[app_name]}\r\n\t##########################################################################################################################################################\r\n\tif [[ "${os_id}" =~ ^(debian|ubuntu)$ ]]; then\r\n\t\tgithub_tag[cmake_ninja]="$(_git_git ls-remote -q -t --refs "${github_url[cmake_ninja]}" | awk \'{sub("refs/tags/", ""); print $2 }\' | awk \'!/^$/\' | sort -rV | head -n 1)"\r\n\t\tif [[ "${os_version_codename}" =~ ^(bullseye|focal)$ ]]; then\r\n\t\t\tgithub_tag[glibc]="glibc-2.31"\r\n\t\telse # "$(_git_git ls-remote -q -t --refs https://sourceware.org/git/glibc.git | awk \'/\\/tags\\/glibc-[0-9]\\.[0-9]{2}$/{sub("refs/tags/", "");sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }\' | awk \'!/^$/\' | sort -rV | head -n 1)"\r\n\t\t\tgithub_tag[glibc]="glibc-2.38"\r\n\t\tfi\r\n\telse\r\n\t\tgithub_tag[ninja]="$(_git_git ls-remote -q -t --refs "${github_url[ninja]}" | awk \'/v/{sub("refs/tags/", "");sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }\' | awk \'!/^$/\' | sort -rV | head -n 1)"\r\n\tfi\r\n\tgithub_tag[zlib]="develop"\r\n\t#github_tag[iconv]="$(_git_git ls-remote -q -t --refs "${github_url[iconv]}" | awk \'{sub("refs/tags/", "");sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }\' | awk \'!/^$/\' | sort -rV | head -n 1)"\r\n\tgithub_tag[iconv]="v$(_curl "https://github.com/userdocs/qbt-workflow-files/releases/latest/download/dependency-version.json" | sed -rn \'s|(.*)"iconv": "(.*)",|\\2|p\')"\r\n\tgithub_tag[icu]="$(_git_git ls-remote -q -t --refs "${github_url[icu]}" | awk \'/\\/release-/{sub("refs/tags/", "");sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }\' | awk \'!/^$/\' | sort -rV | head -n 1)"\r\n\tgithub_tag[double_conversion]="$(_git_git ls-remote -q -t --refs "${github_url[double_conversion]}" | awk \'/v/{sub("refs/tags/", "");sub("(.*)(v6|rc|alpha|beta)(.*)", ""); print $2 }\' | awk \'!/^$/\' | sort -rV | head -n 1)"\r\n\tgithub_tag[openssl]="$(_git_git ls-remote -q -t --refs "${github_url[openssl]}" | awk \'/openssl/{sub("refs/tags/", "");sub("(.*)(v6|rc|alpha|beta)(.*)", ""); print $2 }\' | awk \'!/^$/\' | sort -rV | head -n1)"\r\n\tgithub_tag[boost]=$(_git_git ls-remote -q -t --refs "${github_url[boost]}" | awk \'{sub("refs/tags/", "");sub("(.*)(rc|alpha|beta|-bgl)(.*)", ""); print $2 }\' | awk \'!/^$/\' | sort -rV | head -n 1)\r\n\tgithub_tag[libtorrent]="$(_git_git ls-remote -q -t --refs "${github_url[libtorrent]}" | awk \'/\'"v${qbt_libtorrent_version}"\'/{sub("refs/tags/", "");sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }\' | awk \'!/^$/\' | sort -rV | head -n 1)"\r\n\tgithub_tag[qtbase]="$(_git_git ls-remote -q -t --refs "${github_url[qtbase]}" | awk \'/\'"v${qbt_qt_version}"\'/{sub("refs/tags/", "");sub("(.*)(-a|-b|-r)", ""); print $2 }\' | awk \'!/^$/\' | sort -rV | head -n 1)"\r\n\tgithub_tag[qttools]="$(_git_git ls-remote -q -t --refs "${github_url[qttools]}" | awk \'/\'"v${qbt_qt_version}"\'/{sub("refs/tags/", "");sub("(.*)(-a|-b|-r)", ""); print $2 }\' | awk \'!/^$/\' | sort -rV | head -n 1)"\r\n\tgithub_tag[qbittorrent]="$(_git_git ls-remote -q -t --refs "${github_url[qbittorrent]}" | awk \'{sub("refs/tags/", "");sub("(.*)(-[^0-9].*|rc|alpha|beta)(.*)", ""); print $2 }\' | awk \'!/^$/\' | sort -rV | head -n 1)"\r\n\t##########################################################################################################################################################\r\n\t# Configure the app_version associative array for all the applications this script uses and we call them as ${app_version[app_name]}\r\n\t##########################################################################################################################################################\r\n\tif [[ "${os_id}" =~ ^(debian|ubuntu)$ ]]; then\r\n\t\tapp_version[cmake_debian]="${github_tag[cmake_ninja]%_*}"\r\n\t\tapp_version[ninja_debian]="${github_tag[cmake_ninja]#*_}"\r\n\t\tapp_version[glibc]="${github_tag[glibc]#glibc-}"\r\n\telse\r\n\t\tapp_version[cmake]="$(apk info -d cmake | awk \'/cmake-/{sub("(cmake-)", "");sub("(-r)", ""); print $1 }\' | sort -r | head -n1)"\r\n\t\tapp_version[ninja]="${github_tag[ninja]#v}"\r\n\tfi\r\n\tapp_version[zlib]="$(_curl "https://raw.githubusercontent.com/zlib-ng/zlib-ng/${github_tag[zlib]}/zlib.h.in" | sed -rn \'s|#define ZLIB_VERSION "(.*)"|\\1|p\' | sed \'s/\\.zlib-ng//g\')"\r\n\tapp_version[iconv]="${github_tag[iconv]#v}"\r\n\tapp_version[icu]="${github_tag[icu]#release-}"\r\n\tapp_version[double_conversion]="${github_tag[double_conversion]#v}"\r\n\tapp_version[openssl]="${github_tag[openssl]#openssl-}"\r\n\tapp_version[boost]="${github_tag[boost]#boost-}"\r\n\tapp_version[libtorrent]="${github_tag[libtorrent]#v}"\r\n\tapp_version[qtbase]="$(printf \'%s\' "${github_tag[qtbase]#v}" | sed \'s/-lts-lgpl//g\')"\r\n\tapp_version[qttools]="$(printf \'%s\' "${github_tag[qttools]#v}" | sed \'s/-lts-lgpl//g\')"\r\n\tapp_version[qbittorrent]="${github_tag[qbittorrent]#release-}"\r\n\t##########################################################################################################################################################\r\n\t# Configure the source_archive_url associative array for all the applications this script uses and we call them as ${source_archive_url[app_name]}\r\n\t##########################################################################################################################################################\r\n\tif [[ "${os_id}" =~ ^(debian|ubuntu)$ ]]; then\r\n\t\tsource_archive_url[cmake_ninja]="https://github.com/userdocs/qbt-cmake-ninja-crossbuilds/releases/latest/download/${os_id}-${os_version_codename}-cmake-$(dpkg --print-architecture).tar.xz"\r\n\t\tsource_archive_url[glibc]="https://ftpmirror.gnu.org/gnu/libc/${github_tag[glibc]}.tar.xz"\r\n\tfi\r\n\tsource_archive_url[zlib]="https://github.com/zlib-ng/zlib-ng/archive/refs/heads/develop.tar.gz"\r\n\tsource_archive_url[iconv]="https://mirrors.dotsrc.org/gnu/libiconv/$(grep -Eo \'libiconv-([0-9]{1,3}[.]?)([0-9]{1,3}[.]?)([0-9]{1,3}?)\\.tar.gz\' <(_curl https://mirrors.dotsrc.org/gnu/libiconv/) | sort -V | tail -1)"\r\n\tsource_archive_url[icu]="https://github.com/unicode-org/icu/releases/download/${github_tag[icu]}/icu4c-${app_version[icu]/-/_}-src.tgz"\r\n\tsource_archive_url[double_conversion]="https://github.com/google/double-conversion/archive/refs/tags/${github_tag[double_conversion]}.tar.gz"\r\n\tsource_archive_url[openssl]="https://github.com/openssl/openssl/releases/download/${github_tag[openssl]}/${github_tag[openssl]}.tar.gz"\r\n\t_boost_url # function to test and set the boost url and more\r\n\tsource_archive_url[libtorrent]="https://github.com/arvidn/libtorrent/releases/download/${github_tag[libtorrent]}/libtorrent-rasterbar-${github_tag[libtorrent]#v}.tar.gz"\r\n\r\n\tread -ra qt_version_short_array <<< "${app_version[qtbase]//\\./ }"\r\n\tqt_version_short="${qt_version_short_array[0]}.${qt_version_short_array[1]}"\r\n\r\n\tif [[ "${qbt_qt_version}" =~ ^6 ]]; then\r\n\t\tsource_archive_url[qtbase]="https://download.qt.io/official_releases/qt/${qt_version_short}/${app_version[qtbase]}/submodules/qtbase-everywhere-src-${app_version[qtbase]}.tar.xz"\r\n\t\tsource_archive_url[qttools]="https://download.qt.io/official_releases/qt/${qt_version_short}/${app_version[qttools]}/submodules/qttools-everywhere-src-${app_version[qttools]}.tar.xz"\r\n\telse\r\n\t\tsource_archive_url[qtbase]="https://download.qt.io/official_releases/qt/${qt_version_short}/${app_version[qtbase]}/submodules/qtbase-everywhere-opensource-src-${app_version[qtbase]}.tar.xz"\r\n\t\tsource_archive_url[qttools]="https://download.qt.io/official_releases/qt/${qt_version_short}/${app_version[qttools]}/submodules/qttools-everywhere-opensource-src-${app_version[qttools]}.tar.xz"\r\n\tfi\r\n\r\n\tsource_archive_url[qbittorrent]="https://github.com/qbittorrent/qBittorrent/archive/refs/tags/${github_tag[qbittorrent]}.tar.gz"\r\n\t##########################################################################################################################################################\r\n\t# Configure the qbt_workflow_archive_url associative array for all the applications this script uses and we call them as ${qbt_workflow_archive_url[app_name]}\r\n\t##########################################################################################################################################################\r\n\tif [[ "${os_id}" =~ ^(debian|ubuntu)$ ]]; then\r\n\t\tqbt_workflow_archive_url[cmake_ninja]="${source_archive_url[cmake_ninja]}"\r\n\t\tqbt_workflow_archive_url[glibc]="https://github.com/userdocs/qbt-workflow-files/releases/latest/download/glibc.${github_tag[glibc]#glibc-}.tar.xz"\r\n\tfi\r\n\tqbt_workflow_archive_url[zlib]="https://github.com/userdocs/qbt-workflow-files/releases/latest/download/zlib.tar.xz"\r\n\tqbt_workflow_archive_url[iconv]="https://github.com/userdocs/qbt-workflow-files/releases/latest/download/iconv.tar.xz"\r\n\tqbt_workflow_archive_url[icu]="https://github.com/userdocs/qbt-workflow-files/releases/latest/download/icu.tar.xz"\r\n\tqbt_workflow_archive_url[double_conversion]="https://github.com/userdocs/qbt-workflow-files/releases/latest/download/double_conversion.tar.xz"\r\n\tqbt_workflow_archive_url[openssl]="https://github.com/userdocs/qbt-workflow-files/releases/latest/download/openssl.tar.xz"\r\n\tqbt_workflow_archive_url[boost]="https://github.com/userdocs/qbt-workflow-files/releases/latest/download/boost.tar.xz"\r\n\tqbt_workflow_archive_url[libtorrent]="https://github.com/userdocs/qbt-workflow-files/releases/latest/download/libtorrent.${github_tag[libtorrent]/v/}.tar.xz"\r\n\tqbt_workflow_archive_url[qtbase]="https://github.com/userdocs/qbt-workflow-files/releases/latest/download/qt${qbt_qt_version:0:1}base.tar.xz"\r\n\tqbt_workflow_archive_url[qttools]="https://github.com/userdocs/qbt-workflow-files/releases/latest/download/qt${qbt_qt_version:0:1}tools.tar.xz"\r\n\tqbt_workflow_archive_url[qbittorrent]="https://github.com/userdocs/qbt-workflow-files/releases/latest/download/qbittorrent.tar.xz"\r\n\t##########################################################################################################################################################\r\n\t# Configure workflow override options\r\n\t##########################################################################################################################################################\r\n\tif [[ "${os_id}" =~ ^(debian|ubuntu)$ ]]; then\r\n\t\tqbt_workflow_override[cmake_ninja]="no"\r\n\t\tqbt_workflow_override[glibc]="no"\r\n\tfi\r\n\tqbt_workflow_override[zlib]="no"\r\n\tqbt_workflow_override[iconv]="no"\r\n\tqbt_workflow_override[icu]="no"\r\n\tqbt_workflow_override[double_conversion]="no"\r\n\tqbt_workflow_override[openssl]="no"\r\n\tqbt_workflow_override[boost]="no"\r\n\tqbt_workflow_override[libtorrent]="no"\r\n\tqbt_workflow_override[qtbase]="no"\r\n\tqbt_workflow_override[qttools]="no"\r\n\tqbt_workflow_override[qbittorrent]="no"\r\n\t##########################################################################################################################################################\r\n\t# Configure the default source type we use for the download function\r\n\t##########################################################################################################################################################\r\n\tif [[ "${os_id}" =~ ^(debian|ubuntu)$ ]]; then\r\n\t\tsource_default[cmake_ninja]="file"\r\n\t\tsource_default[glibc]="file"\r\n\tfi\r\n\tsource_default[zlib]="file"\r\n\tsource_default[iconv]="file"\r\n\tsource_default[icu]="file"\r\n\tsource_default[double_conversion]="file"\r\n\tsource_default[openssl]="file"\r\n\tsource_default[boost]="file"\r\n\tsource_default[libtorrent]="file"\r\n\tsource_default[qtbase]="file"\r\n\tsource_default[qttools]="file"\r\n\tsource_default[qbittorrent]="file"\r\n\t##########################################################################################################################################################\r\n\t#\r\n\t##########################################################################################################################################################\r\n\treturn\r\n}\r\n#######################################################################################################################################################\r\n# This function verifies the module names from the array qbt_modules in the default values function.\r\n#######################################################################################################################################################\r\n_installation_modules() {\r\n\t# Delete modules - using the the delete array to unset them from the qbt_modules array\r\n\tfor target in "${delete[@]}"; do\r\n\t\tfor deactivated in "${!qbt_modules[@]}"; do\r\n\t\t\t[[ "${qbt_modules[${deactivated}]}" == "${target}" ]] && unset \'qbt_modules[${deactivated}]\'\r\n\t\tdone\r\n\tdone\r\n\tunset target deactivated\r\n\r\n\t# For any modules params passed, test that they exist in the qbt_modules array or set qbt_modules_test to fail\r\n\tfor passed_params in "${@}"; do\r\n\t\tif [[ ! "${qbt_modules[*]}" =~ (^|[^[:alpha:]])${passed_params}([^[:alpha:]]|$) ]]; then\r\n\t\t\tqbt_modules_test="fail"\r\n\t\tfi\r\n\tdone\r\n\tunset passed_params\r\n\r\n\tif [[ "${qbt_modules_test}" != \'fail\' && "${#}" -ne \'0\' ]]; then\r\n\t\tif [[ "${1}" == "all" ]]; then\r\n\t\t\t# If all is passed as a module and once the params check = pass has triggered this condition, remove to from the qbt_modules array to leave only the modules to be activated\r\n\t\t\tunset \'qbt_modules[0]\'\r\n\t\t\t# Rebuild the qbt_modules array so it is indexed starting from 0 after we have modified and removed items from it previously.\r\n\t\t\tqbt_modules=("${qbt_modules[@]}")\r\n\t\telse # Only activate the module passed as a param and leave the rest defaulted to skip\r\n\t\t\tunset \'qbt_modules[0]\'\r\n\t\t\tread -ra qbt_modules_skipped <<< "${qbt_modules[@]}"\r\n\t\t\tdeclare -gA skip_modules\r\n\t\t\tfor selected in "${@}"; do\r\n\t\t\t\tfor full_list in "${!qbt_modules_skipped[@]}"; do\r\n\t\t\t\t\t[[ "${selected}" == "${qbt_modules_skipped[full_list]}" ]] && qbt_modules_skipped[full_list]="${color_magenta_light}${selected}${color_end}"\r\n\t\t\t\tdone\r\n\t\t\tdone\r\n\t\t\tunset selected\r\n\t\t\tqbt_modules=("${@}")\r\n\t\tfi\r\n\r\n\t\tfor modules_skip in "${qbt_modules[@]}"; do\r\n\t\t\tskip_modules["${modules_skip}"]="no"\r\n\t\tdone\r\n\t\tunset modules_skip\r\n\r\n\t\t# Create the directories we need.\r\n\t\tmkdir -p "${qbt_install_dir}/logs"\r\n\t\tmkdir -p "${PKG_CONFIG_PATH}"\r\n\t\tmkdir -p "${qbt_install_dir}/completed"\r\n\r\n\t\t# Set some python variables we need.\r\n\t\tpython_major="$(python"${qbt_python_version}" -c "import sys; print(sys.version_info[0])")"\r\n\t\tpython_minor="$(python"${qbt_python_version}" -c "import sys; print(sys.version_info[1])")"\r\n\r\n\t\tpython_short_version="${python_major}.${python_minor}"\r\n\r\n\t\tprintf \'%b\\n\' "using gcc : : : <cflags>${qbt_optimize/*/${qbt_optimize} }-std=${qbt_cxx_standard} <cxxflags>${qbt_optimize/*/${qbt_optimize} }-std=${qbt_cxx_standard} ;${text_newline}using python : ${python_short_version} : /usr/bin/python${python_short_version} : /usr/include/python${python_short_version} : /usr/lib/python${python_short_version} ;" > "${HOME}/user-config.jam"\r\n\r\n\t\t# printf the build directory.\r\n\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle}${text_bold} Install Prefix${color_end} : ${color_cyan_light}${qbt_install_dir_short}${color_end}"\r\n\r\n\t\t# Some basic help\r\n\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle}${text_bold} Script help${color_end} : ${color_cyan_light}${qbt_working_dir_short}/$(basename -- "$0")${color_end} ${color_blue_light}-h${color_end}"\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# This function will test to see if a Jamfile patch file exists via the variable patches_github_url for the tag used.\r\n#######################################################################################################################################################\r\n_apply_patches() {\r\n\t[[ -n "${1}" ]] && app_name="${1}"\r\n\t# Start to define the default master branch we will use by transforming the app_version[libtorrent] variable to underscores. The result is dynamic and can be: RC_1_0, RC_1_1, RC_1_2, RC_2_0 and so on.\r\n\tdefault_jamfile="${app_version[libtorrent]//./\\_}"\r\n\r\n\t# Remove everything after second underscore. Occasionally the tag will be short, like v2.0 so we need to make sure not remove the underscore if there is only one present.\r\n\tif [[ $(grep -o \'_\' <<< "${default_jamfile}" | wc -l) -le 1 ]]; then\r\n\t\tdefault_jamfile="RC_${default_jamfile}"\r\n\telif [[ $(grep -o \'_\' <<< "${default_jamfile}" | wc -l) -ge 2 ]]; then\r\n\t\tdefault_jamfile="RC_${default_jamfile%_*}"\r\n\tfi\r\n\r\n\tif [[ "${app_name}" == "bootstrap" ]]; then\r\n\t\tfor module_patch in "${qbt_modules[@]}"; do\r\n\t\t\t[[ -n "${app_version["${module_patch}"]}" ]] && mkdir -p "${qbt_install_dir}/patches/${module_patch}/${app_version["${module_patch}"]}/source"\r\n\t\tdone\r\n\t\tunset module_patch\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_yellow_circle} Using the defaults, these directories have been created:${color_end}"\r\n\r\n\t\tfor patch_info in "${qbt_modules[@]}"; do\r\n\t\t\t[[ -n "${app_version["${patch_info}"]}" ]] && printf \'%b\\n\' " ${color_cyan_light} ${qbt_install_dir_short}/patches/${patch_info}/${app_version["${patch_info}"]}${color_end}"\r\n\t\tdone\r\n\t\tunset patch_info\r\n\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_circle} If a patch file, named ${color_cyan_light}patch${color_end} is found in these directories it will be applied to the relevant module with a matching tag."\r\n\telse\r\n\t\tpatch_dir="${qbt_install_dir}/patches/${app_name}/${app_version[${app_name}]}"\r\n\r\n\t\t# local\r\n\t\tpatch_file="${patch_dir}/patch"\r\n\t\tpatch_url_file="${patch_dir}/url" # A file with a url to raw patch info\r\n\t\t# remote\r\n\t\tpatch_file_remote="https://raw.githubusercontent.com/${qbt_patches_url}/master/patches/${app_name}/${app_version[${app_name}]}"\r\n\r\n\t\tif [[ "${app_name}" == "libtorrent" ]]; then\r\n\t\t\tpatch_jamfile="${patch_dir}/Jamfile"\r\n\t\t\tpatch_jamfile_url="https://raw.githubusercontent.com/${qbt_patches_url}/master/patches/${app_name}/${app_version[${app_name}]}/Jamfile"\r\n\t\tfi\r\n\r\n\t\t# Order of patch file preference\r\n\t\t# 1. Local patch file - A custom patch file in the module version folder matching the build configuration\r\n\t\t# 2. Local url file - A custom url to a raw patch file in the module version folder matching the build configuration\r\n\t\t# 3. Remote patch file using the patch_file_remote/patch - A custom url to a raw patch file\r\n\t\t# 4. Remote url file using patch_file_remote/url - A url to a raw patch file in the patch repo\r\n\r\n\t\t[[ "${source_default[${app_name}]}" == "folder" && ! -d "${qbt_cache_dir}/${app_name}" ]] && printf \'\\n\' # cosmetics\r\n\r\n\t\t_patch_url() {\r\n\t\t\tpatch_url="$(< "${patch_url_file}")"\r\n\t\t\tif _curl --create-dirs "${patch_url}" -o "${patch_file}"; then\r\n\t\t\t\tprintf \'%b\\n\\n\' " ${unicode_green_circle} ${color_red}Patching${color_end} from ${color_red_light}remote:url${color_end} - ${color_magenta_light}${app_name}${color_end} ${color_yellow_light}${app_version[${app_name}]}${color_end} - ${color_yellow_light}${patch_url}${color_end}"\r\n\t\t\tfi\r\n\t\t}\r\n\r\n\t\tif [[ -f "${patch_file}" ]]; then # If the patch file exists in the module version folder matching the build configuration then use this.\r\n\t\t\tprintf \'%b\\n\\n\' " ${unicode_green_circle} ${color_red}Patching${color_end} from ${color_red_light}local:patch${color_end} - ${color_magenta_light}${app_name}${color_end} ${color_yellow_light}${app_version[${app_name}]}${color_end} - ${color_cyan_light}${patch_file}${color_end}"\r\n\t\telif [[ -f "${patch_url_file}" ]]; then # If a remote URL file exists in the module version folder matching the build configuration then use this to create the patch file for the next check\r\n\t\t\t_patch_url\r\n\t\telse # Else check that if there is a remotely host patch file available in the patch repo\r\n\t\t\tif _curl --create-dirs "${patch_file_remote}/patch" -o "${patch_file}"; then\r\n\t\t\t\tprintf \'%b\\n\\n\' " ${unicode_green_circle} ${color_red}Patching${color_end} from ${color_red_light}remote:patch${color_end} - ${color_magenta_light}${app_name}${color_end} ${color_yellow_light}${app_version[${app_name}]}${color_end} - ${color_yellow_light}${patch_file_remote}/patch${color_end}"\r\n\t\t\telif _curl --create-dirs "${patch_file_remote}/url" -o "${patch_url_file}"; then\r\n\t\t\t\t_patch_url\r\n\t\t\tfi\r\n\t\tfi\r\n\r\n\t\t# Libtorrent specific stuff\r\n\t\tif [[ "${app_name}" == "libtorrent" ]]; then\r\n\t\t\tif [[ "${qbt_libtorrent_master_jamfile}" == "yes" ]]; then\r\n\t\t\t\t_curl --create-dirs "https://raw.githubusercontent.com/arvidn/libtorrent/${default_jamfile}/Jamfile" -o "${qbt_dl_folder_path}/${patch_jamfile##*/}"\r\n\t\t\t\tprintf \'%b\\n\\n\' " ${unicode_green_circle}${color_red} Using libtorrent branch master Jamfile file${color_end}"\r\n\t\t\telif [[ -f "${patch_dir}/Jamfile" ]]; then\r\n\t\t\t\tcp -f "${patch_dir}/Jamfile" "${qbt_dl_folder_path}/${patch_jamfile##*/}"\r\n\t\t\t\tprintf \'%b\\n\\n\' " ${unicode_green_circle}${color_red} Using existing custom Jamfile file${color_end}"\r\n\t\t\telse\r\n\t\t\t\tif _curl --create-dirs "${patch_jamfile_url}" -o "${qbt_dl_folder_path}/${patch_jamfile##*/}"; then\r\n\t\t\t\t\tprintf \'%b\\n\\n\' " ${unicode_green_circle}${color_red} Using downloaded custom Jamfile file${color_end}"\r\n\t\t\t\telse\r\n\t\t\t\t\tprintf \'%b\\n\\n\' " ${unicode_green_circle}${color_red} Using libtorrent ${github_tag[libtorrent]} Jamfile file${color_end}"\r\n\t\t\t\tfi\r\n\t\t\tfi\r\n\t\tfi\r\n\r\n\t\t# Patch files\r\n\t\t[[ -f "${patch_file}" ]] && patch -p1 < "${patch_file}"\r\n\r\n\t\t# Copy modified files from source directory\r\n\t\tif [[ -d "${patch_dir}/source" && "$(ls -A "${patch_dir}/source")" ]]; then\r\n\t\t\tprintf \'%b\\n\\n\' " ${unicode_red_circle} ${color_yellow_light}Copying files from patch source dir${color_end}"\r\n\t\t\tcp -rf "${patch_dir}/source/". "${qbt_dl_folder_path}/"\r\n\t\tfi\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# A unified download function to handle the processing of various options and directions the script can take.\r\n#######################################################################################################################################################\r\n_download() {\r\n\t_pushd "${qbt_install_dir}"\r\n\r\n\t[[ -n "${1}" ]] && app_name="${1}"\r\n\r\n\t# The location we download source archives and folders to\r\n\tqbt_dl_dir="${qbt_install_dir}"\r\n\tqbt_dl_file_path="${qbt_dl_dir}/${app_name}.tar.xz"\r\n\tqbt_dl_folder_path="${qbt_dl_dir}/${app_name}"\r\n\r\n\tif [[ "${qbt_workflow_files}" == "no" ]] || [[ "${qbt_workflow_override[${app_name}]}" == "yes" ]]; then\r\n\t\tqbt_dl_source_url="${source_archive_url[${app_name}]}"\r\n\t\tsource_type="source"\r\n\tfi\r\n\r\n\tif [[ "${qbt_workflow_files}" == "yes" && "${qbt_workflow_override[${app_name}]}" == "no" ]] || [[ "${qbt_workflow_artifacts}" == \'yes\' ]]; then\r\n\t\tqbt_dl_source_url="${qbt_workflow_archive_url[${app_name}]}"\r\n\t\t[[ "${qbt_workflow_files}" == "yes" ]] && source_type="workflow"\r\n\t\t[[ "${qbt_workflow_artifacts}" == "yes" ]] && source_type="artifact"\r\n\tfi\r\n\r\n\t[[ -n "${qbt_cache_dir}" ]] && _cache_dirs\r\n\t[[ "${source_default[${app_name}]}" == "file" ]] && _download_file\r\n\t[[ "${source_default[${app_name}]}" == "folder" ]] && _download_folder\r\n\r\n\treturn 0\r\n}\r\n#######################################################################################################################################################\r\n#\r\n#######################################################################################################################################################\r\n_cache_dirs() {\r\n\t# If the path is not starting with / then make it a full path by prepending the qbt_working_dir path\r\n\tif [[ ! "${qbt_cache_dir}" =~ ^/ ]]; then\r\n\t\tqbt_cache_dir="${qbt_working_dir}/${qbt_cache_dir}"\r\n\tfi\r\n\r\n\tqbt_dl_dir="${qbt_cache_dir}"\r\n\tqbt_dl_file_path="${qbt_dl_dir}/${app_name}.tar.xz"\r\n\tqbt_dl_folder_path="${qbt_dl_dir}/${app_name}"\r\n\r\n\tif [[ "${qbt_workflow_files}" == "yes" && "${qbt_workflow_override[${app_name}]}" == "no" || "${app_name}" == "cmake_ninja" ]]; then\r\n\t\tsource_default["${app_name}"]="file"\r\n\telif [[ "${qbt_cache_dir_options}" == "bs" || -d "${qbt_dl_folder_path}" ]]; then\r\n\t\tsource_default["${app_name}"]="folder"\r\n\tfi\r\n\r\n\treturn\r\n}\r\n#######################################################################################################################################################\r\n# This function is for downloading git releases based on their tag.\r\n#######################################################################################################################################################\r\n_download_folder() {\r\n\t# Set this to avoid some warning when cloning some modules\r\n\t_git_git config --global advice.detachedHead false\r\n\r\n\t# If not using artifacts remove the source files in the build directory if present before we download or copy them again\r\n\t[[ -d "${qbt_install_dir}/${app_name}" ]] && rm -rf "${qbt_install_dir}/${app_name:?}"\r\n\t[[ -d "${qbt_install_dir}/include/${app_name}" ]] && rm -rf "${qbt_install_dir}/include/${app_name:?}"\r\n\r\n\t# if there IS NOT and app_name cache directory present in the path provided and we are bootstrapping then use this echo\r\n\tif [[ "${qbt_cache_dir_options}" == "bs" && ! -d "${qbt_dl_folder_path}" ]]; then\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_blue_light_circle} Caching ${color_magenta_light}${app_name}${color_end} with tag ${color_yellow_light}${github_tag[${app_name}]}${color_end} to ${color_cyan_light}${color_cyan_light}${qbt_dl_folder_path}${color_end}${color_end} from ${color_yellow_light}${color_yellow_light}${github_url[${app_name}]}${color_end}"\r\n\tfi\r\n\r\n\t# if cache dir is on and the app_name folder does not exist then get folder via cloning default source\r\n\tif [[ "${qbt_cache_dir_options}" != "bs" && ! -d "${qbt_dl_folder_path}" ]]; then\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_blue_light_circle} Downloading ${color_magenta_light}${app_name}${color_end} with tag ${color_yellow_light}${github_tag[${app_name}]}${color_end} to ${color_cyan_light}${color_cyan_light}${qbt_dl_folder_path}${color_end}${color_end} from ${color_yellow_light}${color_yellow_light}${github_url[${app_name}]}${color_end}"\r\n\tfi\r\n\r\n\tif [[ ! -d "${qbt_dl_folder_path}" ]]; then\r\n\t\tif [[ "${app_name}" =~ qttools ]]; then\r\n\t\t\t_git clone --no-tags --single-branch --branch "${github_tag[${app_name}]}" -j"$(nproc)" --depth 1 "${github_url[${app_name}]}" "${qbt_dl_folder_path}"\r\n\t\t\t_pushd "${qbt_dl_folder_path}"\r\n\t\t\tgit submodule update --force --recursive --init --remote --depth=1 --single-branch\r\n\t\t\t_popd\r\n\t\telse\r\n\t\t\t_git clone --no-tags --single-branch --branch "${github_tag[${app_name}]}" --shallow-submodules --recurse-submodules -j"$(nproc)" --depth 1 "${github_url[${app_name}]}" "${qbt_dl_folder_path}"\r\n\t\tfi\r\n\tfi\r\n\r\n\t# if there IS a app_name cache directory present in the path provided and we are bootstrapping then use this\r\n\tif [[ "${qbt_cache_dir_options}" == "bs" && -d "${qbt_dl_folder_path}" ]]; then\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_green_circle} ${color_blue_light}${app_name}${color_end} - Updating directory ${color_cyan_light}${qbt_dl_folder_path}${color_end}"\r\n\t\t_pushd "${qbt_dl_folder_path}"\r\n\r\n\t\tif git ls-remote -qh --refs --exit-code "${github_url[${app_name}]}" "${github_tag[${app_name}]}" &> /dev/null; then\r\n\t\t\t_git_git fetch origin "${github_tag[${app_name}]}:${github_tag[${app_name}]}" --no-tags --depth=1 --recurse-submodules --update-head-ok\r\n\t\tfi\r\n\r\n\t\tif git ls-remote -qt --refs --exit-code "${github_url[${app_name}]}" "${github_tag[${app_name}]}" &> /dev/null; then\r\n\t\t\t_git_git fetch origin tag "${github_tag[${app_name}]}" --no-tags --depth=1 --recurse-submodules --update-head-ok\r\n\t\tfi\r\n\r\n\t\t_git_git checkout "${github_tag[${app_name}]}"\r\n\t\t_popd\r\n\tfi\r\n\r\n\tif [[ "${qbt_cache_dir_options}" != "bs" && -n "${qbt_cache_dir}" && -d "${qbt_dl_folder_path}" ]]; then\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_blue_light_circle} Copying ${color_magenta_light}${app_name}${color_end} from cache ${color_cyan_light}${qbt_cache_dir}/${app_name}${color_end} with tag ${color_yellow_light}${github_tag[${app_name}]}${color_end} to ${color_cyan_light}${qbt_install_dir}/${app_name}${color_end}"\r\n\t\tcp -rf "${qbt_dl_folder_path}" "${qbt_install_dir}/"\r\n\tfi\r\n\r\n\tif [[ "${qbt_cache_dir_options}" != "bs" ]]; then\r\n\t\tmkdir -p "${qbt_install_dir}/${app_name}${sub_dir}"\r\n\t\t_pushd "${qbt_install_dir}/${app_name}${sub_dir}"\r\n\tfi\r\n\r\n\tprintf \'%s\' "${github_url[${app_name}]}" |& _tee "${qbt_install_dir}/logs/${app_name}_github_url.log" > /dev/null\r\n\r\n\treturn\r\n}\r\n#######################################################################################################################################################\r\n# This function is for downloading source code archives\r\n#######################################################################################################################################################\r\n_download_file() {\r\n\tif [[ -f "${qbt_dl_file_path}" && "${qbt_workflow_artifacts}" == "no" ]]; then\r\n\t\t# This checks that the archive is not corrupt or empty checking for a top level folder and exiting if there is no result i.e. the archive is empty - so that we do rm and empty substitution\r\n\t\t_cmd grep -Eqom1 "(.*)[^/]" <(tar tf "${qbt_dl_file_path}")\r\n\t\t# delete any existing extracted archives and archives\r\n\t\trm -rf {"${qbt_install_dir:?}/$(tar tf "${qbt_dl_file_path}" | grep -Eom1 "(.*)[^/]")","${qbt_install_dir}/${app_name}.tar.xz"}\r\n\t\t[[ -d "${qbt_install_dir}/${app_name}" ]] && rm -rf "${qbt_install_dir}/${app_name:?}"\r\n\t\t[[ -d "${qbt_install_dir}/include/${app_name}" ]] && rm -rf "${qbt_install_dir}/include/${app_name:?}"\r\n\tfi\r\n\r\n\tif [[ "${qbt_cache_dir_options}" != "bs" && ! -f "${qbt_dl_file_path}" ]]; then\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_blue_light_circle} Dowloading ${color_magenta_light}${app_name}${color_end} using ${color_yellow_light}${source_type}${color_end} files to ${color_cyan_light}${qbt_dl_file_path}${color_end} - ${color_yellow_light}${qbt_dl_source_url}${color_end}"\r\n\telif [[ -n "${qbt_cache_dir}" && "${qbt_cache_dir_options}" == "bs" && ! -f "${qbt_dl_file_path}" ]]; then\r\n\t\tprintf \'\\n%b\\n\' " ${unicode_blue_light_circle} Caching ${color_magenta_light}${app_name}${color_end} ${color_yellow_light}${source_type}${color_end} files to ${color_cyan_light}${qbt_cache_dir}/${app_name}.tar.xz${color_end} - ${color_yellow_light}${qbt_dl_source_url}${color_end}"\r\n\telif [[ -n "${qbt_cache_dir}" && "${qbt_cache_dir_options}" == "bs" && -f "${qbt_dl_file_path}" ]]; then\r\n\t\t[[ "${qbt_cache_dir_options}" == "bs" ]] && printf \'\\n%b\\n\' " ${unicode_blue_light_circle} Updating ${color_magenta_light}${app_name}${color_end} cached ${color_yellow_light}${source_type}${color_end} files from - ${color_cyan_light}${qbt_cache_dir}/${app_name}.tar.xz${color_end}"\r\n\telif [[ -n "${qbt_cache_dir}" && "${qbt_cache_dir_options}" != "bs" && -f "${qbt_dl_file_path}" ]]; then\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_blue_light_circle} Extracting ${color_magenta_light}${app_name}${color_end} cached ${color_yellow_light}${source_type}${color_end} files from - ${color_cyan_light}${qbt_cache_dir}/${app_name}.tar.xz${color_end}"\r\n\tfi\r\n\r\n\tif [[ "${qbt_workflow_artifacts}" == "no" ]]; then\r\n\t\t# download the remote source file using curl\r\n\t\tif [[ "${qbt_cache_dir_options}" = "bs" || ! -f "${qbt_dl_file_path}" ]]; then\r\n\t\t\t_curl --create-dirs "${qbt_dl_source_url}" -o "${qbt_dl_file_path}"\r\n\t\tfi\r\n\tfi\r\n\r\n\t# Set the extracted dir name to a var to easily use or remove it\r\n\tqbt_dl_folder_path="${qbt_install_dir}/$(tar tf "${qbt_dl_file_path}" | head -1 | cut -f1 -d"/")"\r\n\r\n\tprintf \'%b\\n\' "${qbt_dl_source_url}" |& _tee "${qbt_install_dir}/logs/${app_name}_${source_type}_archive_url.log" > /dev/null\r\n\r\n\t[[ "${app_name}" == "cmake_ninja" ]] && additional_cmds=("--strip-components=1")\r\n\r\n\tif [[ "${qbt_cache_dir_options}" != "bs" ]]; then\r\n\t\t_cmd tar xf "${qbt_dl_file_path}" -C "${qbt_install_dir}" "${additional_cmds[@]}"\r\n\t\t# we don\'t need to cd into the boost if we download it via source archives\r\n\r\n\t\tif [[ "${app_name}" == "cmake_ninja" ]]; then\r\n\t\t\t_delete_function\r\n\t\telse\r\n\t\t\tmkdir -p "${qbt_dl_folder_path}${sub_dir}"\r\n\t\t\t_pushd "${qbt_dl_folder_path}${sub_dir}"\r\n\t\tfi\r\n\tfi\r\n\r\n\tunset additional_cmds\r\n\treturn\r\n}\r\n#######################################################################################################################################################\r\n# static lib link fix: check for *.so and *.a versions of a lib in the $lib_dir and change the *.so link to point to the static lib e.g. libdl.a\r\n#######################################################################################################################################################\r\n_fix_static_links() {\r\n\tlog_name="${app_name}"\r\n\tmapfile -t library_list < <(find "${lib_dir}" -maxdepth 1 -exec bash -c \'basename "$0" ".${0##*.}"\' {} \\; | sort | uniq -d)\r\n\tfor file in "${library_list[@]}"; do\r\n\t\tif [[ "$(readlink "${lib_dir}/${file}.so")" != "${file}.a" ]]; then\r\n\t\t\tln -fsn "${file}.a" "${lib_dir}/${file}.so"\r\n\t\t\tprintf \'s%b\\n\' "${lib_dir}${file}.so changed to point to ${file}.a" |& _tee -a "${qbt_install_dir}/logs/${log_name}-fix-static-links.log" > /dev/null\r\n\t\tfi\r\n\tdone\r\n\treturn\r\n}\r\n_fix_multiarch_static_links() {\r\n\tif [[ -d "${qbt_install_dir}/${qbt_cross_host}" ]]; then\r\n\t\tlog_name="${app_name}"\r\n\t\tmultiarch_lib_dir="${qbt_install_dir}/${qbt_cross_host}/lib"\r\n\t\tmapfile -t library_list < <(find "${multiarch_lib_dir}" -maxdepth 1 -exec bash -c \'basename "$0" ".${0##*.}"\' {} \\; | sort | uniq -d)\r\n\t\tfor file in "${library_list[@]}"; do\r\n\t\t\tif [[ "$(readlink "${multiarch_lib_dir}/${file}.so")" != "${file}.a" ]]; then\r\n\t\t\t\tln -fsn "${file}.a" "${multiarch_lib_dir}/${file}.so"\r\n\t\t\t\tprintf \'%b\\n\' "${multiarch_lib_dir}${file}.so changed to point to ${file}.a" |& _tee -a "${qbt_install_dir}/logs/${log_name}-fix-static-links.log" > /dev/null\r\n\t\t\tfi\r\n\t\tdone\r\n\t\treturn\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# This function is for removing files and folders we no longer need\r\n#######################################################################################################################################################\r\n_delete_function() {\r\n\t[[ "${app_name}" != "cmake_ninja" ]] && printf \'\\n\'\r\n\tif [[ "${qbt_skip_delete}" != "yes" ]]; then\r\n\t\tprintf \'%b\\n\' " ${unicode_green_circle}${color_red_light} Deleting ${app_name} uncached installation files and folders${color_end}"\r\n\t\t[[ -f "${qbt_dl_file_path}" && "${qbt_workflow_artifacts}" == "no" ]] && rm -rf {"${qbt_install_dir:?}/$(tar tf "${qbt_dl_file_path}" | grep -Eom1 "(.*)[^/]")","${qbt_install_dir}/${app_name}.tar.xz"}\r\n\t\t[[ -d "${qbt_dl_folder_path}" ]] && rm -rf "${qbt_install_dir}/${app_name:?}"\r\n\t\t_pushd "${qbt_working_dir}"\r\n\telse\r\n\t\tprintf \'%b\\n\' " ${unicode_yellow_circle}${color_red_light} Skipping ${app_name} deletion${color_end}"\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# cmake installation\r\n#######################################################################################################################################################\r\n_cmake() {\r\n\tif [[ "${qbt_build_tool}" == \'cmake\' ]]; then\r\n\t\tprintf \'\\n%b\\n\' " ${unicode_blue_light_circle} ${color_blue_light}Checking if cmake and ninja need to be installed${color_end}"\r\n\t\tmkdir -p "${qbt_install_dir}/bin"\r\n\r\n\t\tif [[ "${os_id}" =~ ^(debian|ubuntu)$ ]]; then\r\n\t\t\tif [[ "$(cmake --version 2> /dev/null | awk \'NR==1{print $3}\')" != "${app_version[cmake_debian]}" ]]; then\r\n\t\t\t\t_download cmake_ninja\r\n\t\t\t\t_post_command "Debian cmake and ninja installation"\r\n\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle} Using cmake: ${color_yellow_light}${app_version[cmake_debian]}"\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle} Using ninja: ${color_yellow_light}${app_version[ninja_debian]}"\r\n\t\t\tfi\r\n\t\tfi\r\n\r\n\t\tif [[ "${os_id}" =~ ^(alpine)$ ]]; then\r\n\t\t\tif [[ "$("${qbt_install_dir}/bin/ninja" --version 2> /dev/null | sed \'s/\\.git//g\')" != "${app_version[ninja]}" ]]; then\r\n\t\t\t\t_curl "https://github.com/userdocs/qbt-ninja-build/releases/latest/download/ninja-$(apk info --print-arch)" -o "${qbt_install_dir}/bin/ninja"\r\n\t\t\t\t_post_command ninja\r\n\t\t\t\tchmod 700 "${qbt_install_dir}/bin/ninja"\r\n\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle} Using cmake: ${color_yellow_light}${app_version[cmake]}"\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle} Using ninja: ${color_yellow_light}${app_version[ninja]}"\r\n\t\t\tfi\r\n\t\tfi\r\n\t\tprintf \'\\n%b\\n\' " ${unicode_green_circle} ${color_green_light}cmake and ninja are installed and ready to use${color_end}"\r\n\tfi\r\n\t_pushd "${qbt_working_dir}"\r\n}\r\n#######################################################################################################################################################\r\n# This function handles the Multi Arch dynamics of the script.\r\n#######################################################################################################################################################\r\n_multi_arch() {\r\n\tif [[ "${multi_arch_options[${qbt_cross_name:-default}]}" == "${qbt_cross_name}" ]]; then\r\n\t\tif [[ "${os_id}" =~ ^(alpine|debian|ubuntu)$ ]]; then\r\n\t\t\t[[ "${1}" != "bootstrap" ]] && printf \'\\n%b\\n\' " ${unicode_green_circle}${color_yellow_light} Using multiarch - arch: ${qbt_cross_name} host: ${os_id} target: ${qbt_cross_target}${color_end}"\r\n\t\t\tcase "${qbt_cross_name}" in\r\n\t\t\t\tarmel)\r\n\t\t\t\t\tcase "${qbt_cross_target}" in\r\n\t\t\t\t\t\talpine)\r\n\t\t\t\t\t\t\tqbt_cross_host="arm-linux-musleabi"\r\n\t\t\t\t\t\t\tqbt_zlib_arch="armv5"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\tdebian | ubuntu)\r\n\t\t\t\t\t\t\tqbt_cross_host="arm-linux-gnueabi"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\t*)\r\n\t\t\t\t\t\t\tbitness="32"\r\n\t\t\t\t\t\t\tcross_arch="armel"\r\n\t\t\t\t\t\t\tqbt_cross_boost="gcc-arm"\r\n\t\t\t\t\t\t\tqbt_cross_openssl="linux-armv4"\r\n\t\t\t\t\t\t\tqbt_cross_qtbase="linux-arm-gnueabi-g++"\r\n\t\t\t\t\t\t\t;;\r\n\t\t\t\t\tesac\r\n\t\t\t\t\t;;\r\n\t\t\t\tarmhf)\r\n\t\t\t\t\tcase "${qbt_cross_target}" in\r\n\t\t\t\t\t\talpine)\r\n\t\t\t\t\t\t\tcross_arch="armhf"\r\n\t\t\t\t\t\t\tqbt_cross_host="arm-linux-musleabihf"\r\n\t\t\t\t\t\t\tqbt_zlib_arch="armv6"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\tdebian | ubuntu)\r\n\t\t\t\t\t\t\tcross_arch="armel"\r\n\t\t\t\t\t\t\tqbt_cross_host="arm-linux-gnueabihf"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\t*)\r\n\t\t\t\t\t\t\tbitness="32"\r\n\t\t\t\t\t\t\tqbt_cross_boost="gcc-arm"\r\n\t\t\t\t\t\t\tqbt_cross_openssl="linux-armv4"\r\n\t\t\t\t\t\t\tqbt_cross_qtbase="linux-arm-gnueabi-g++"\r\n\t\t\t\t\t\t\t;;\r\n\t\t\t\t\tesac\r\n\t\t\t\t\t;;\r\n\t\t\t\tarmv7)\r\n\t\t\t\t\tcase "${qbt_cross_target}" in\r\n\t\t\t\t\t\talpine)\r\n\t\t\t\t\t\t\tcross_arch="armv7"\r\n\t\t\t\t\t\t\tqbt_cross_host="armv7l-linux-musleabihf"\r\n\t\t\t\t\t\t\tqbt_zlib_arch="armv7"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\tdebian | ubuntu)\r\n\t\t\t\t\t\t\tcross_arch="armhf"\r\n\t\t\t\t\t\t\tqbt_cross_host="arm-linux-gnueabihf"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\t*)\r\n\t\t\t\t\t\t\tbitness="32"\r\n\t\t\t\t\t\t\tqbt_cross_boost="gcc-arm"\r\n\t\t\t\t\t\t\tqbt_cross_openssl="linux-armv4"\r\n\t\t\t\t\t\t\tqbt_cross_qtbase="linux-arm-gnueabi-g++"\r\n\t\t\t\t\t\t\t;;\r\n\t\t\t\t\tesac\r\n\t\t\t\t\t;;\r\n\t\t\t\taarch64)\r\n\t\t\t\t\tcase "${qbt_cross_target}" in\r\n\t\t\t\t\t\talpine)\r\n\t\t\t\t\t\t\tcross_arch="aarch64"\r\n\t\t\t\t\t\t\tqbt_cross_host="aarch64-linux-musl"\r\n\t\t\t\t\t\t\tqbt_zlib_arch="aarch64"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\tdebian | ubuntu)\r\n\t\t\t\t\t\t\tcross_arch="arm64"\r\n\t\t\t\t\t\t\tqbt_cross_host="aarch64-linux-gnu"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\t*)\r\n\t\t\t\t\t\t\tbitness="64"\r\n\t\t\t\t\t\t\tqbt_cross_boost="gcc-arm"\r\n\t\t\t\t\t\t\tqbt_cross_openssl="linux-aarch64"\r\n\t\t\t\t\t\t\tqbt_cross_qtbase="linux-aarch64-gnu-g++"\r\n\t\t\t\t\t\t\t;;\r\n\t\t\t\t\tesac\r\n\t\t\t\t\t;;\r\n\t\t\t\tx86_64)\r\n\t\t\t\t\tcase "${qbt_cross_target}" in\r\n\t\t\t\t\t\talpine)\r\n\t\t\t\t\t\t\tcross_arch="x86_64"\r\n\t\t\t\t\t\t\tqbt_cross_host="x86_64-linux-musl"\r\n\t\t\t\t\t\t\tqbt_zlib_arch="x86_64"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\tdebian | ubuntu)\r\n\t\t\t\t\t\t\tcross_arch="amd64"\r\n\t\t\t\t\t\t\tqbt_cross_host="x86_64-linux-gnu"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\t*)\r\n\t\t\t\t\t\t\tbitness="64"\r\n\t\t\t\t\t\t\tqbt_cross_boost=""\r\n\t\t\t\t\t\t\tqbt_cross_openssl="linux-x86_64"\r\n\t\t\t\t\t\t\tqbt_cross_qtbase="linux-g++-64"\r\n\t\t\t\t\t\t\t;;\r\n\t\t\t\t\tesac\r\n\t\t\t\t\t;;\r\n\t\t\t\tx86)\r\n\t\t\t\t\tcase "${qbt_cross_target}" in\r\n\t\t\t\t\t\talpine)\r\n\t\t\t\t\t\t\tcross_arch="x86"\r\n\t\t\t\t\t\t\tqbt_cross_host="i686-linux-musl"\r\n\t\t\t\t\t\t\tqbt_zlib_arch="i686"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\tdebian | ubuntu)\r\n\t\t\t\t\t\t\tcross_arch="i386"\r\n\t\t\t\t\t\t\tqbt_cross_host="i686-linux-gnu"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\t*)\r\n\t\t\t\t\t\t\tbitness="32"\r\n\t\t\t\t\t\t\tqbt_cross_openssl="linux-x86"\r\n\t\t\t\t\t\t\tqbt_cross_qtbase="linux-g++-32"\r\n\t\t\t\t\t\t\t;;\r\n\t\t\t\t\tesac\r\n\t\t\t\t\t;;\r\n\t\t\t\ts390x)\r\n\t\t\t\t\tcase "${qbt_cross_target}" in\r\n\t\t\t\t\t\talpine)\r\n\t\t\t\t\t\t\tqbt_cross_host="s390x-linux-musl"\r\n\t\t\t\t\t\t\tqbt_zlib_arch="s390x"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\tdebian | ubuntu)\r\n\t\t\t\t\t\t\tqbt_cross_host="s390x-linux-gnu"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\t*)\r\n\t\t\t\t\t\t\tcross_arch="s390x"\r\n\t\t\t\t\t\t\tbitness="64"\r\n\t\t\t\t\t\t\tqbt_cross_boost="gcc-s390x"\r\n\t\t\t\t\t\t\tqbt_cross_openssl="linux64-s390x"\r\n\t\t\t\t\t\t\tqbt_cross_qtbase="linux-g++-64"\r\n\t\t\t\t\t\t\t;;\r\n\t\t\t\t\tesac\r\n\t\t\t\t\t;;\r\n\t\t\t\tpowerpc)\r\n\t\t\t\t\tcase "${qbt_cross_target}" in\r\n\t\t\t\t\t\talpine)\r\n\t\t\t\t\t\t\tqbt_cross_host="powerpc-linux-musl"\r\n\t\t\t\t\t\t\tqbt_zlib_arch="ppc"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\tdebian | ubuntu)\r\n\t\t\t\t\t\t\tqbt_cross_host="powerpc-linux-gnu"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\t*)\r\n\t\t\t\t\t\t\tbitness="32"\r\n\t\t\t\t\t\t\tcross_arch="powerpc"\r\n\t\t\t\t\t\t\tqbt_cross_boost="gcc-ppc"\r\n\t\t\t\t\t\t\tqbt_cross_openssl="linux-ppc"\r\n\t\t\t\t\t\t\tqbt_cross_qtbase="linux-g++-32"\r\n\t\t\t\t\t\t\t;;\r\n\t\t\t\t\tesac\r\n\t\t\t\t\t;;\r\n\t\t\t\tppc64el)\r\n\t\t\t\t\tcase "${qbt_cross_target}" in\r\n\t\t\t\t\t\talpine)\r\n\t\t\t\t\t\t\tqbt_cross_host="powerpc64le-linux-musl"\r\n\t\t\t\t\t\t\tqbt_zlib_arch="ppc64el"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\tdebian | ubuntu)\r\n\t\t\t\t\t\t\tqbt_cross_host="powerpc64le-linux-gnu"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\t*)\r\n\t\t\t\t\t\t\tbitness="64"\r\n\t\t\t\t\t\t\tcross_arch="ppc64el"\r\n\t\t\t\t\t\t\tqbt_cross_boost="gcc-ppc64el"\r\n\t\t\t\t\t\t\tqbt_cross_openssl="linux-ppc64le"\r\n\t\t\t\t\t\t\tqbt_cross_qtbase="linux-g++-64"\r\n\t\t\t\t\t\t\t;;\r\n\t\t\t\t\tesac\r\n\t\t\t\t\t;;\r\n\t\t\t\tmips)\r\n\t\t\t\t\tcase "${qbt_cross_target}" in\r\n\t\t\t\t\t\talpine)\r\n\t\t\t\t\t\t\tqbt_cross_host="mips-linux-musl"\r\n\t\t\t\t\t\t\tqbt_zlib_arch="mips"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\tdebian | ubuntu)\r\n\t\t\t\t\t\t\tqbt_cross_host="mips-linux-gnu"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\t*)\r\n\t\t\t\t\t\t\tbitness="32"\r\n\t\t\t\t\t\t\tcross_arch="mips"\r\n\t\t\t\t\t\t\tqbt_cross_boost="gcc-mips"\r\n\t\t\t\t\t\t\tqbt_cross_openssl="linux-mips32"\r\n\t\t\t\t\t\t\tqbt_cross_qtbase="linux-g++-32"\r\n\t\t\t\t\t\t\t;;\r\n\t\t\t\t\tesac\r\n\t\t\t\t\t;;\r\n\t\t\t\tmipsel)\r\n\t\t\t\t\tcase "${qbt_cross_target}" in\r\n\t\t\t\t\t\talpine)\r\n\t\t\t\t\t\t\tqbt_cross_host="mipsel-linux-musl"\r\n\t\t\t\t\t\t\tqbt_zlib_arch="mipsel"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\tdebian | ubuntu)\r\n\t\t\t\t\t\t\tqbt_cross_host="mipsel-linux-gnu"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\t*)\r\n\t\t\t\t\t\t\tbitness="32"\r\n\t\t\t\t\t\t\tcross_arch="mipsel"\r\n\t\t\t\t\t\t\tqbt_cross_boost="gcc-mipsel"\r\n\t\t\t\t\t\t\tqbt_cross_openssl="linux-mips32"\r\n\t\t\t\t\t\t\tqbt_cross_qtbase="linux-g++-32"\r\n\t\t\t\t\t\t\t;;\r\n\t\t\t\t\tesac\r\n\t\t\t\t\t;;\r\n\t\t\t\tmips64)\r\n\t\t\t\t\tcase "${qbt_cross_target}" in\r\n\t\t\t\t\t\talpine)\r\n\t\t\t\t\t\t\tqbt_cross_host="mips64-linux-musl"\r\n\t\t\t\t\t\t\tqbt_zlib_arch="mips64"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\tdebian | ubuntu)\r\n\t\t\t\t\t\t\tqbt_cross_host="mips64-linux-gnuabi64"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\t*)\r\n\t\t\t\t\t\t\tbitness="64"\r\n\t\t\t\t\t\t\tcross_arch="mips64"\r\n\t\t\t\t\t\t\tqbt_cross_boost="gcc-mips64"\r\n\t\t\t\t\t\t\tqbt_cross_openssl="linux64-mips64"\r\n\t\t\t\t\t\t\tqbt_cross_qtbase="linux-g++-64"\r\n\t\t\t\t\t\t\t;;\r\n\t\t\t\t\tesac\r\n\t\t\t\t\t;;\r\n\t\t\t\tmips64el)\r\n\t\t\t\t\tcase "${qbt_cross_target}" in\r\n\t\t\t\t\t\talpine)\r\n\t\t\t\t\t\t\tqbt_cross_host="mips64el-linux-musl"\r\n\t\t\t\t\t\t\tqbt_zlib_arch="mips64el"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\tdebian | ubuntu)\r\n\t\t\t\t\t\t\tqbt_cross_host="mips64el-linux-gnuabi64"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\t*)\r\n\t\t\t\t\t\t\tbitness="64"\r\n\t\t\t\t\t\t\tcross_arch="mips64el"\r\n\t\t\t\t\t\t\tqbt_cross_boost="gcc-mips64el"\r\n\t\t\t\t\t\t\tqbt_cross_openssl="linux64-mips64"\r\n\t\t\t\t\t\t\tqbt_cross_qtbase="linux-g++-64"\r\n\t\t\t\t\t\t\t;;\r\n\t\t\t\t\tesac\r\n\t\t\t\t\t;;\r\n\t\t\t\triscv64)\r\n\t\t\t\t\tcase "${qbt_cross_target}" in\r\n\t\t\t\t\t\talpine)\r\n\t\t\t\t\t\t\tqbt_cross_host="riscv64-linux-musl"\r\n\t\t\t\t\t\t\tqbt_zlib_arch="mips64"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\tdebian)\r\n\t\t\t\t\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_circle} The arch ${color_yellow_light}${qbt_cross_name}${color_end} can only be cross built on and Alpine OS Host"\r\n\t\t\t\t\t\t\texit 1\r\n\t\t\t\t\t\t\t;;\r\n\t\t\t\t\t\tubuntu)\r\n\t\t\t\t\t\t\tqbt_cross_host="riscv64-linux-gnu"\r\n\t\t\t\t\t\t\t;;&\r\n\t\t\t\t\t\t*)\r\n\t\t\t\t\t\t\tbitness="64"\r\n\t\t\t\t\t\t\tcross_arch="riscv64"\r\n\t\t\t\t\t\t\tqbt_cross_boost="gcc-riscv64"\r\n\t\t\t\t\t\t\tqbt_cross_openssl="linux64-riscv64"\r\n\t\t\t\t\t\t\tqbt_cross_qtbase="linux-g++-64"\r\n\t\t\t\t\t\t\t;;\r\n\t\t\t\t\tesac\r\n\t\t\t\t\t;;\r\n\t\t\tesac\r\n\r\n\t\t\t[[ "${1}" == \'info_bootstrap\' ]] && return\r\n\r\n\t\t\texport CHOST="${qbt_cross_host}"\r\n\t\t\texport CC="${qbt_cross_host}-gcc"\r\n\t\t\texport AR="${qbt_cross_host}-ar"\r\n\t\t\texport CXX="${qbt_cross_host}-g++"\r\n\r\n\t\t\tmkdir -p "${qbt_install_dir}/logs"\r\n\r\n\t\t\tif [[ "${1}" == \'bootstrap\' || "${qbt_cache_dir_options}" == "bs" ]] && [[ -f "${qbt_cache_dir:-${qbt_install_dir}}/${qbt_cross_host}.tar.gz" ]]; then\r\n\t\t\t\trm -f "${qbt_cache_dir:-${qbt_install_dir}}/${qbt_cross_host}.tar.gz"\r\n\t\t\tfi\r\n\r\n\t\t\tif [[ "${qbt_cross_target}" =~ ^(alpine)$ ]]; then\r\n\t\t\t\tif [[ "${1}" == \'bootstrap\' || "${qbt_cache_dir_options}" == "bs" || ! -f "${qbt_cache_dir:-${qbt_install_dir}}/${qbt_cross_host}.tar.gz" ]]; then\r\n\t\t\t\t\tprintf \'\\n%b\\n\' " ${unicode_blue_light_circle} Downloading ${color_magenta_light}${qbt_cross_host}.tar.gz${color_end} cross tool chain - ${color_cyan_light}https://github.com/userdocs/qbt-musl-cross-make/releases/latest/download/${qbt_cross_host}.tar.xz${color_end}"\r\n\t\t\t\t\t_curl --create-dirs "https://github.com/userdocs/qbt-musl-cross-make/releases/latest/download/${qbt_cross_host}.tar.xz" -o "${qbt_cache_dir:-${qbt_install_dir}}/${qbt_cross_host}.tar.gz"\r\n\t\t\t\telse\r\n\t\t\t\t\tprintf \'\\n%b\\n\' " ${unicode_blue_light_circle} Extracting ${color_magenta_light}${qbt_cross_host}.tar.gz${color_end} cross tool chain - ${color_cyan_light}${qbt_cache_dir:-${qbt_install_dir}}/${qbt_cross_host}.tar.xz${color_end}"\r\n\t\t\t\tfi\r\n\r\n\t\t\t\ttar xf "${qbt_cache_dir:-${qbt_install_dir}}/${qbt_cross_host}.tar.gz" --strip-components=1 -C "${qbt_install_dir}"\r\n\r\n\t\t\t\t_fix_multiarch_static_links "${qbt_cross_host}"\r\n\t\t\tfi\r\n\r\n\t\t\tmulti_glibc=("--host=${qbt_cross_host}")                                                # ${multi_glibc[@]}\r\n\t\t\tmulti_iconv=("--host=${qbt_cross_host}")                                                # ${multi_iconv[@]}\r\n\t\t\tmulti_icu=("--host=${qbt_cross_host}" "-with-cross-build=${qbt_install_dir}/icu/cross") # ${multi_icu[@]}\r\n\t\t\tmulti_openssl=("./Configure" "${qbt_cross_openssl}")                                    # ${multi_openssl[@]}\r\n\t\t\tmulti_qtbase=("-xplatform" "${qbt_cross_qtbase}")                                       # ${multi_qtbase[@]}\r\n\r\n\t\t\tif [[ "${qbt_build_tool}" == \'cmake\' ]]; then\r\n\t\t\t\tmulti_libtorrent=("-D CMAKE_CXX_COMPILER=${qbt_cross_host}-g++")        # ${multi_libtorrent[@]}\r\n\t\t\t\tmulti_double_conversion=("-D CMAKE_CXX_COMPILER=${qbt_cross_host}-g++") # ${multi_double_conversion[@]}\r\n\t\t\t\tmulti_qbittorrent=("-D CMAKE_CXX_COMPILER=${qbt_cross_host}-g++")       # ${multi_qbittorrent[@]}\r\n\t\t\telse\r\n\t\t\t\tprintf \'%b\\n\' "using gcc : ${qbt_cross_boost#gcc-} : ${qbt_cross_host}-g++ : <cflags>${qbt_optimize/*/${qbt_optimize} }-std=${qbt_cxx_standard} <cxxflags>${qbt_optimize/*/${qbt_optimize} }-std=${qbt_cxx_standard} ;${text_newline}using python : ${python_short_version} : /usr/bin/python${python_short_version} : /usr/include/python${python_short_version} : /usr/lib/python${python_short_version} ;" > "${HOME}/user-config.jam"\r\n\t\t\t\tmulti_libtorrent=("toolset=${qbt_cross_boost:-gcc}") # ${multi_libtorrent[@]}\r\n\t\t\t\tmulti_qbittorrent=("--host=${qbt_cross_host}")       # ${multi_qbittorrent[@]}\r\n\t\t\tfi\r\n\t\t\treturn\r\n\t\telse\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_circle} Multiarch only works with Alpine Linux (native or docker)${color_end}"\r\n\t\t\texit 1\r\n\t\tfi\r\n\telse\r\n\t\tmulti_openssl=("./config") # ${multi_openssl[@]}\r\n\t\treturn\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# Github Actions release info\r\n#######################################################################################################################################################\r\n_release_info() {\r\n\t_error_tag\r\n\r\n\tprintf \'\\n%b\\n\' " ${unicode_green_circle} ${color_yellow_light}Release boot-strapped${color_end}"\r\n\r\n\trelease_info_dir="${qbt_install_dir}/release_info"\r\n\r\n\tmkdir -p "${release_info_dir}"\r\n\r\n\tcat > "${release_info_dir}/tag.md" <<- TAG_INFO\r\n\t\t${github_tag[qbittorrent]}_${github_tag[libtorrent]}\r\n\tTAG_INFO\r\n\r\n\tcat > "${release_info_dir}/title.md" <<- TITLE_INFO\r\n\t\tqbittorrent ${app_version[qbittorrent]} libtorrent ${app_version[libtorrent]}\r\n\tTITLE_INFO\r\n\r\n\tif _git_git ls-remote -t --exit-code "https://github.com/${qbt_revision_url}.git" "${github_tag[qbittorrent]}_${github_tag[libtorrent]}" &> /dev/null; then\r\n\t\tif grep -q \'"name": "dependency-version.json"\' < <(_curl "https://api.github.com/repos/${qbt_revision_url}/releases/tags/${github_tag[qbittorrent]}_${github_tag[libtorrent]}"); then\r\n\t\t\tuntil _curl "https://github.com/${qbt_revision_url}/releases/download/${github_tag[qbittorrent]}_${github_tag[libtorrent]}/dependency-version.json" > "${release_info_dir}/remote-dependency-version.json"; do\r\n\t\t\t\tprintf \'%b\\n\' "Waiting for dependency-version.json URL."\r\n\t\t\t\tsleep 2\r\n\t\t\tdone\r\n\r\n\t\t\tremote_revision_version="$(sed -rn \'s|(.*)"revision": "(.*)"|\\2|p\' < "${release_info_dir}/remote-dependency-version.json")"\r\n\t\t\trm -f "${release_info_dir}/remote-dependency-version.json"\r\n\t\t\tqbt_revision_version="$((remote_revision_version + 1))"\r\n\t\tfi\r\n\tfi\r\n\r\n\tcat > "${release_info_dir}/qt${qt_version_short_array[0]}-dependency-version.json" <<- DEPENDENCY_INFO\r\n\t\t{\r\n\t\t    "openssl": "${app_version[openssl]}",\r\n\t\t    "boost": "${app_version[boost]}",\r\n\t\t    "libtorrent_${qbt_libtorrent_version//\\./_}": "${app_version[libtorrent]}",\r\n\t\t    "qt${qt_version_short_array[0]}": "${app_version[qtbase]}",\r\n\t\t    "qbittorrent": "${app_version[qbittorrent]}",\r\n\t\t    "revision": "${qbt_revision_version:-0}"\r\n\t\t}\r\n\tDEPENDENCY_INFO\r\n\r\n\t[[ ${qbt_workflow_files} == "no" && ${qbt_workflow_artifacts} == "no" ]] && source_text="source files - direct"\r\n\t[[ ${qbt_workflow_files} == "yes" ]] && source_text="source files - workflows: [qbt-workflow-files](https://github.com/userdocs/qbt-workflow-files/releases/latest)"\r\n\t[[ ${qbt_workflow_artifacts} == "yes" ]] && source_text="source files - artifacts: [qbt-workflow-files](https://github.com/userdocs/qbt-workflow-files/releases/latest)"\r\n\r\n\tcat > "${release_info_dir}/qt${qt_version_short_array[0]}-${qbt_cross_name}-release.md" <<- RELEASE_INFO\r\n\t\t## Build info\r\n\r\n\t\t|           Components           |           Version           |\r\n\t\t| :----------------------------: | :-------------------------: |\r\n\t\t|          Qbittorrent           | ${app_version[qbittorrent]} |\r\n\t\t| Qt${qt_version_short_array[0]} |   ${app_version[qtbase]}    |\r\n\t\t|           Libtorrent           | ${app_version[libtorrent]}  |\r\n\t\t|             Boost              |    ${app_version[boost]}    |\r\n\t\t|            OpenSSL             |   ${app_version[openssl]}   |\r\n\t\t|            zlib-ng             |    ${app_version[zlib]}     |\r\n\r\n\t\t## Architecture and build info\r\n\r\n\t\t> [!NOTE]\r\n\t\t> ${source_text}\r\n\t\t>\r\n\t\t> These builds were created on Alpine linux using [custom prebuilt musl toolchains](https://github.com/userdocs/qbt-musl-cross-make/releases/latest) for:\r\n\tRELEASE_INFO\r\n\r\n\t{\r\n\t\tprintf \'\\n%s\\n\' "|  Crossarch  | Alpine Cross build files | Arch config |                                                             Tuning                                                              |"\r\n\t\tprintf \'%s\\n\' "| :---------: | :----------------------: | :---------: | :-----------------------------------------------------------------------------------------------------------------------------: |"\r\n\t\t[[ "${multi_arch_options[${qbt_cross_name}]}" == armel ]] && printf \'%s\\n\' "|    armel    |    arm-linux-musleabi    |   armv5te   |                       --with-arch=armv5te --with-tune=arm926ej-s --with-float=soft --with-abi=aapcs-linux                       |"\r\n\t\t[[ "${multi_arch_options[${qbt_cross_name}]}" == armhf ]] && printf \'%s\\n\' "|    armhf    |   arm-linux-musleabihf   |   armv6zk   |              --with-arch=armv6zk --with-tune=arm1176jzf-s --with-fpu=vfp --with-float=hard --with-abi=aapcs-linux               |"\r\n\t\t[[ "${multi_arch_options[${qbt_cross_name}]}" == armv7 ]] && printf \'%s\\n\' "|    armv7    | armv7l-linux-musleabihf  |   armv7-a   | --with-arch=armv7-a --with-tune=generic-armv7-a --with-fpu=vfpv3-d16 --with-float=hard --with-abi=aapcs-linux --with-mode=thumb |"\r\n\t\t[[ "${multi_arch_options[${qbt_cross_name}]}" == aarch64 ]] && printf \'%s\\n\' "|   aarch64   |    aarch64-linux-musl    |   armv8-a   |                                               --with-arch=armv8-a --with-abi=lp64                                               |"\r\n\t\t[[ "${multi_arch_options[${qbt_cross_name}]}" == x86_64 ]] && printf \'%s\\n\' "|   x86_64    |    x86_64-linux-musl     |    amd64    |                                                               N/A                                                               |"\r\n\t\t[[ "${multi_arch_options[${qbt_cross_name}]}" == x86 ]] && printf \'%s\\n\' "|     x86     |     i686-linux-musl      |    i686     |                                        --with-arch=i686 --with-tune=generic --enable-cld                                        |"\r\n\t\t[[ "${multi_arch_options[${qbt_cross_name}]}" == s390x ]] && printf \'%s\\n\' "|    s390x    |     s390x-linux-musl     |    zEC12    |                  --with-arch=z196 --with-tune=zEC12 --with-zarch --with-long-double-128 --enable-decimal-float                  |"\r\n\t\t[[ "${multi_arch_options[${qbt_cross_name}]}" == powerpc ]] && printf \'%s\\n\' "|   powerpc   |    powerpc-linux-musl    |     ppc     |                                          --enable-secureplt --enable-decimal-float=no                                           |"\r\n\t\t[[ "${multi_arch_options[${qbt_cross_name}]}" == ppc64el ]] && printf \'%s\\n\' "| powerpc64le |  powerpc64le-linux-musl  |    ppc64    |                 --with-abi=elfv2 --enable-secureplt --enable-decimal-float=no --enable-targets=powerpcle-linux                  |"\r\n\t\t[[ "${multi_arch_options[${qbt_cross_name}]}" == mips ]] && printf \'%s\\n\' "|    mips     |     mips-linux-musl      |    mips32     |                               --with-arch=mips32 --with-mips-plt --with-float=soft --with-abi=32                                |"\r\n\t\t[[ "${multi_arch_options[${qbt_cross_name}]}" == mipsel ]] && printf \'%s\\n\' "|   mipsel    |    mipsel-linux-musl     |   mips32    |                                -with-arch=mips32 --with-mips-plt --with-float=soft --with-abi=32                                |"\r\n\t\t[[ "${multi_arch_options[${qbt_cross_name}]}" == mips64 ]] && printf \'%s\\n\' "|   mips64    |    mips64-linux-musl     |   mips64    |                      --with-arch=mips3 --with-tune=mips64 --with-mips-plt --with-float=soft --with-abi=64                       |"\r\n\t\t[[ "${multi_arch_options[${qbt_cross_name}]}" == mips64el ]] && printf \'%s\\n\' "|  mips64el   |   mips64el-linux-musl    |   mips64    |                      --with-arch=mips3 --with-tune=mips64 --with-mips-plt --with-float=soft --with-abi=64                       |"\r\n\t\t[[ "${multi_arch_options[${qbt_cross_name}]}" == riscv64 ]] && printf \'%s\\n\' "|   riscv64   |    riscv64-linux-musl    |   rv64gc    |                                 --with-arch=rv64gc --with-abi=lp64d --enable-autolink-libatomic                                 |"\r\n\t\tprintf \'\\n\'\r\n\t} >> "${release_info_dir}/qt${qt_version_short_array[0]}-${qbt_cross_name}-release.md"\r\n\r\n\tcat >> "${release_info_dir}/qt${qt_version_short_array[0]}-${qbt_cross_name}-release.md" <<- RELEASE_INFO\r\n\t\t## General Info\r\n\r\n\t\t> [!WARNING]\r\n\t\t> With Qbittorrent 4.4.0 onwards all cmake builds use Qt6 and all qmake builds use Qt5, as long as Qt5 is supported or qBitorrent V5 is released.\r\n\t\t>\r\n\t\t> Qbittorrent v5 won\'t support qmake (Qt5) builds so Qt6 (cmake) will become default and Qt5 builds will no longer be released.\r\n\t\t>\r\n\t\t> Binary builds are stripped - See https://userdocs.github.io/qbittorrent-nox-static/#/debugging\r\n\tRELEASE_INFO\r\n\r\n\treturn\r\n}\r\n#######################################################################################################################################################\r\n# This is first help section that for triggers that do not require any processing and only provide a static result whe using help\r\n#######################################################################################################################################################\r\nwhile (("${#}")); do\r\n\tcase ${1} in\r\n\t\t-b | --build-directory)\r\n\t\t\tqbt_build_dir="${2}"\r\n\t\t\tshift 2\r\n\t\t\t;;\r\n\t\t-bs-c | --boot-strap-cmake)\r\n\t\t\tqbt_build_tool="cmake"\r\n\t\t\tparams1+=("-bs-c")\r\n\t\t\tshift\r\n\t\t\t;;\r\n\t\t-c | --cmake)\r\n\t\t\tqbt_build_tool="cmake"\r\n\t\t\tshift\r\n\t\t\t;;\r\n\t\t-d | --debug)\r\n\t\t\tqbt_build_debug="yes"\r\n\t\t\tshift\r\n\t\t\t;;\r\n\t\t-cd | --cache-directory)\r\n\t\t\tqbt_cache_dir="${2%/}"\r\n\t\t\tif [[ -n "${3}" && "${3}" =~ (^rm$|^bs$) ]]; then\r\n\t\t\t\tqbt_cache_dir_options="${3}"\r\n\t\t\t\tif [[ "${3}" == "rm" ]]; then\r\n\t\t\t\t\t[[ -d "${qbt_cache_dir}" ]] && rm -rf "${qbt_cache_dir}"\r\n\t\t\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_circle} Cache directory removed: ${color_cyan_light}${qbt_cache_dir}${color_end}"\r\n\t\t\t\t\texit\r\n\t\t\t\tfi\r\n\t\t\t\tshift 3\r\n\t\t\telif [[ -n "${3}" && ! "${3}" =~ ^- ]]; then\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${unicode_red_circle} Only ${color_blue_light}bs${color_end} or ${color_blue_light}rm${color_end} are supported as conditionals for this switch${color_end}"\r\n\t\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_yellow_circle} See ${color_blue_light}-h-cd${color_end} for more information${color_end}"\r\n\t\t\t\texit\r\n\t\t\telse\r\n\t\t\t\tshift 2\r\n\t\t\tfi\r\n\t\t\t;;\r\n\t\t-i | --icu)\r\n\t\t\tqbt_skip_icu="no"\r\n\t\t\t[[ "${qbt_skip_icu}" == "no" ]] && delete=("${delete[@]/icu/}")\r\n\t\t\tshift\r\n\t\t\t;;\r\n\t\t-ma | --multi-arch)\r\n\t\t\tif [[ -n "${2}" && "${multi_arch_options[${2}]}" == "${2}" ]]; then\r\n\t\t\t\tqbt_cross_name="${2}"\r\n\t\t\t\tshift 2\r\n\t\t\telse\r\n\t\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_circle} You must provide a valid arch option when using${color_end} ${color_blue_light}-ma${color_end}"\r\n\t\t\t\tunset "multi_arch_options[default]"\r\n\t\t\t\tfor arches in "${multi_arch_options[@]}"; do\r\n\t\t\t\t\tprintf \'%b\\n\' " ${unicode_blue_light_circle} ${arches}${color_end}"\r\n\t\t\t\tdone\r\n\t\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_green_circle} Example usage:${color_blue_light} -ma aarch64${color_end}"\r\n\t\t\t\texit 1\r\n\t\t\tfi\r\n\t\t\t;;\r\n\t\t-p | --proxy)\r\n\t\t\tqbt_git_proxy=("-c" "http.sslVerify=false" "-c" "http.https://github.com.proxy=${2}")\r\n\t\t\tqbt_curl_proxy=("--proxy-insecure" "-x" "${2}")\r\n\t\t\tshift 2\r\n\t\t\t;;\r\n\t\t-o | --optimize)\r\n\t\t\tqbt_optimize="-march=native"\r\n\t\t\tshift\r\n\t\t\tif [[ -z ${qbt_cross_name} ]]; then\r\n\t\t\t\tqbt_optimize="-march=native"\r\n\t\t\t\tshift\r\n\t\t\telse\r\n\t\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_light_circle} You cannot use the ${color_blue_light}-o${color_end} flag with cross compilation"\r\n\t\t\t\texit 1\r\n\t\t\tfi\r\n\t\t\t;;\r\n\t\t-s | --strip)\r\n\t\t\tqbt_optimise_strip="yes"\r\n\t\t\tshift\r\n\t\t\t;;\r\n\t\t-si | --static-ish)\r\n\t\t\tif [[ -z ${qbt_cross_name} ]]; then\r\n\t\t\t\tqbt_static_ish="yes"\r\n\t\t\t\tshift\r\n\t\t\telse\r\n\t\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_light_circle} You cannot use the ${color_blue_light}-si${color_end} flag with cross compilation${color_end}"\r\n\t\t\t\texit 1\r\n\t\t\tfi\r\n\t\t\t;;\r\n\t\t-sdu | --script-debug-urls)\r\n\t\t\tscript_debug_urls="yes"\r\n\t\t\tshift\r\n\t\t\t;;\r\n\t\t-wf | --workflow)\r\n\t\t\tqbt_workflow_files="yes"\r\n\t\t\tshift\r\n\t\t\t;;\r\n\t\t--) # end argument parsing\r\n\t\t\tshift\r\n\t\t\tbreak\r\n\t\t\t;;\r\n\t\t*) # preserve positional arguments\r\n\t\t\tparams1+=("${1}")\r\n\t\t\tshift\r\n\t\t\t;;\r\n\tesac\r\ndone\r\n# Set positional arguments in their proper place.\r\nset -- "${params1[@]}"\r\n#######################################################################################################################################################\r\n# Functions part 1: Use some of our functions\r\n#######################################################################################################################################################\r\n_set_default_values "${@}" # see functions\r\n_check_dependencies        # see functions\r\n_test_url\r\n_set_build_directory    # see functions\r\n_set_module_urls "${@}" # see functions\r\n_script_version         # see functions\r\n#######################################################################################################################################################\r\n# Environment variables - settings positional parameters of flags\r\n#######################################################################################################################################################\r\n[[ -n "${qbt_patches_url}" ]] && set -- -pr "${qbt_patches_url}" "${@}"\r\n[[ -n "${qbt_boost_tag}" ]] && set -- -bt "${qbt_boost_tag}" "${@}"\r\n[[ -n "${qbt_libtorrent_tag}" ]] && set -- -lt "${qbt_libtorrent_tag}" "${@}"\r\n[[ -n "${qbt_qt_tag}" ]] && set -- -qtt "${qbt_qt_tag}" "${@}"\r\n[[ -n "${qbt_qbittorrent_tag}" ]] && set -- -qt "${qbt_qbittorrent_tag}" "${@}"\r\n#######################################################################################################################################################\r\n# This section controls our flags that we can pass to the script to modify some variables and behavior.\r\n#######################################################################################################################################################\r\nwhile (("${#}")); do\r\n\tcase "${1}" in\r\n\t\t-bs-p | --boot-strap-patches)\r\n\t\t\t_apply_patches bootstrap\r\n\t\t\tshift\r\n\t\t\t;;\r\n\t\t-bs-c | --boot-strap-cmake)\r\n\t\t\t_cmake\r\n\t\t\tshift\r\n\t\t\t;;\r\n\t\t-bs-r | --boot-strap-release)\r\n\t\t\t_release_info\r\n\t\t\tshift\r\n\t\t\t;;\r\n\t\t-bs-ma | --boot-strap-multi-arch)\r\n\t\t\tif [[ "${multi_arch_options[${qbt_cross_name}]}" == "${qbt_cross_name}" ]]; then\r\n\t\t\t\t_multi_arch\r\n\t\t\t\tshift\r\n\t\t\telse\r\n\t\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_circle} You must provide a valid arch option when using${color_end} ${color_blue_light}-ma${color_end}"\r\n\t\t\t\tfor arches in "${multi_arch_options[@]}"; do\r\n\t\t\t\t\tprintf \'%b\\n\' " ${unicode_blue_light_circle} ${arches}${color_end}"\r\n\t\t\t\tdone\r\n\t\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_green_circle} Example usage:${color_blue_light} -ma aarch64${color_end}"\r\n\t\t\t\texit 1\r\n\t\t\tfi\r\n\t\t\t;;\r\n\t\t-bs-a | --boot-strap-all)\r\n\t\t\t_apply_patches bootstrap\r\n\t\t\t_release_info\r\n\t\t\t_cmake\r\n\t\t\t_multi_arch bootstrap\r\n\t\t\tshift\r\n\t\t\t;;\r\n\t\t-bt | --boost-version)\r\n\t\t\tif [[ -n "${2}" ]]; then\r\n\t\t\t\tgithub_tag[boost]="$(_git "${github_url[boost]}" -t "${2}")"\r\n\t\t\t\tapp_version[boost]="${github_tag[boost]#boost-}"\r\n\t\t\t\t_boost_url\r\n\t\t\t\tqbt_workflow_override[boost]="yes"\r\n\t\t\t\t_test_git_ouput "${github_tag[boost]}" "boost" "${2}"\r\n\t\t\t\tshift 2\r\n\t\t\telse\r\n\t\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_circle} ${color_yellow_light}You must provide a tag for this switch:${color_end} ${color_blue_light}${1} TAG ${color_end}"\r\n\t\t\t\texit\r\n\t\t\tfi\r\n\t\t\t;;\r\n\t\t-n | --no-delete)\r\n\t\t\tqbt_skip_delete="yes"\r\n\t\t\tshift\r\n\t\t\t;;\r\n\t\t-m | --master)\r\n\t\t\tgithub_tag[libtorrent]="$(_git "${github_url[libtorrent]}" -t "RC_${qbt_libtorrent_version//./_}")"\r\n\t\t\tapp_version[libtorrent]="${github_tag[libtorrent]}"\r\n\t\t\tqbt_workflow_override[libtorrent]="yes"\r\n\t\t\tsource_default[libtorrent]="folder"\r\n\t\t\t_test_git_ouput "${github_tag[libtorrent]}" "libtorrent" "RC_${qbt_libtorrent_version//./_}"\r\n\t\t\tgithub_tag[qbittorrent]="$(_git "${github_url[qbittorrent]}" -t "master")"\r\n\t\t\tapp_version[qbittorrent]="${github_tag[qbittorrent]#release-}"\r\n\t\t\tqbt_workflow_override[qbittorrent]="yes"\r\n\t\t\tsource_default[qbittorrent]="folder"\r\n\t\t\t_test_git_ouput "${github_tag[qbittorrent]}" "qbittorrent" "master"\r\n\t\t\tshift\r\n\t\t\t;;\r\n\t\t-lm | --libtorrent-master)\r\n\t\t\tgithub_tag[libtorrent]="$(_git "${github_url[libtorrent]}" -t "RC_${qbt_libtorrent_version//./_}")"\r\n\t\t\tapp_version[libtorrent]="${github_tag[libtorrent]}"\r\n\t\t\tsource_default[qbittorrent]="folder"\r\n\t\t\tqbt_workflow_override[libtorrent]="yes"\r\n\t\t\t_test_git_ouput "${github_tag[libtorrent]}" "libtorrent" "RC_${qbt_libtorrent_version//./_}"\r\n\t\t\tshift\r\n\t\t\t;;\r\n\t\t-lt | --libtorrent-tag)\r\n\t\t\tif [[ -n "${2}" ]]; then\r\n\t\t\t\tgithub_tag[libtorrent]="$(_git "${github_url[libtorrent]}" -t "$2")"\r\n\t\t\t\t[[ "${github_tag[libtorrent]}" =~ ^RC_ ]] && app_version[libtorrent]="${github_tag[libtorrent]/RC_/}" app_version[libtorrent]="${app_version[libtorrent]//_/\\.}"\r\n\t\t\t\t[[ "${github_tag[libtorrent]}" =~ ^libtorrent- ]] && app_version[libtorrent]="${github_tag[libtorrent]#libtorrent-}" app_version[libtorrent]="${app_version[libtorrent]//_/\\.}"\r\n\t\t\t\t[[ "${github_tag[libtorrent]}" =~ ^libtorrent_ ]] && app_version[libtorrent]="${github_tag[libtorrent]#libtorrent_}" app_version[libtorrent]="${app_version[libtorrent]//_/\\.}"\r\n\t\t\t\t[[ "${github_tag[libtorrent]}" =~ ^v[0-9] ]] && app_version[libtorrent]="${github_tag[libtorrent]#v}"\r\n\t\t\t\tsource_archive_url[libtorrent]="https://github.com/arvidn/libtorrent/releases/download/${github_tag[libtorrent]}/libtorrent-rasterbar-${app_version[libtorrent]}.tar.gz"\r\n\t\t\t\tif ! _curl "${source_archive_url[libtorrent]}" &> /dev/null; then\r\n\t\t\t\t\tsource_default[libtorrent]="folder"\r\n\t\t\t\tfi\r\n\t\t\t\tqbt_workflow_override[libtorrent]="yes"\r\n\r\n\t\t\t\tread -ra lt_version_short_array <<< "${app_version[libtorrent]//\\./ }"\r\n\t\t\t\tqbt_libtorrent_version="${lt_version_short_array[0]}.${lt_version_short_array[1]}"\r\n\t\t\t\t[[ "${github_tag[libtorrent]}" =~ ^RC_ ]] && app_version[libtorrent]="RC_${app_version[libtorrent]//\\./_}" # set back to RC_... so that release info has proper version context\r\n\r\n\t\t\t\t_test_git_ouput "${github_tag[libtorrent]}" "libtorrent" "$2"\r\n\t\t\t\tshift 2\r\n\t\t\telse\r\n\t\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_circle} ${color_yellow_light}You must provide a tag for this switch:${color_end} ${color_blue_light}${1} TAG ${color_end}"\r\n\t\t\t\texit\r\n\t\t\tfi\r\n\t\t\t;;\r\n\t\t-pr | --patch-repo)\r\n\t\t\tif [[ -n "${2}" ]]; then\r\n\t\t\t\tif _curl "https://github.com/${2}" &> /dev/null; then\r\n\t\t\t\t\tqbt_patches_url="${2}"\r\n\t\t\t\telse\r\n\t\t\t\t\tprintf \'\\n%b\\n\' " ${unicode_red_circle} ${color_yellow_light}This repo does not exist:${color_end}"\r\n\t\t\t\t\tprintf \'\\n%b\\n\' "   ${color_cyan_light}https://github.com/${2}${color_end}"\r\n\t\t\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_yellow_circle} ${color_yellow_light}Please provide a valid username and repo.${color_end}"\r\n\t\t\t\t\texit\r\n\t\t\t\tfi\r\n\t\t\t\tshift 2\r\n\t\t\telse\r\n\t\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_circle} ${color_yellow_light}You must provide a tag for this switch:${color_end} ${color_blue_light}${1} username/repo ${color_end}"\r\n\t\t\t\texit\r\n\t\t\tfi\r\n\t\t\t;;\r\n\t\t-qm | --qbittorrent-master)\r\n\t\t\tgithub_tag[qbittorrent]="$(_git "${github_url[qbittorrent]}" -t "master")"\r\n\t\t\tapp_version[qbittorrent]="${github_tag[qbittorrent]#release-}"\r\n\t\t\tqbt_workflow_override[qbittorrent]="yes"\r\n\t\t\tsource_archive_url[qbittorrent]="https://github.com/qbittorrent/qBittorrent/archive/refs/heads/${github_tag[qbittorrent]}.tar.gz"\r\n\t\t\t_test_git_ouput "${github_tag[qbittorrent]}" "qbittorrent" "master"\r\n\t\t\tshift\r\n\t\t\t;;\r\n\t\t-qt | --qbittorrent-tag)\r\n\t\t\tif [[ -n "${2}" ]]; then\r\n\t\t\t\tgithub_tag[qbittorrent]="$(_git "${github_url[qbittorrent]}" -t "$2")"\r\n\t\t\t\tapp_version[qbittorrent]="${github_tag[qbittorrent]#release-}"\r\n\t\t\t\tif [[ "${github_tag[qbittorrent]}" =~ ^release- ]]; then\r\n\t\t\t\t\tsource_archive_url[qbittorrent]="https://github.com/qbittorrent/qBittorrent/archive/refs/tags/${github_tag[qbittorrent]}.tar.gz"\r\n\t\t\t\telse\r\n\t\t\t\t\tsource_archive_url[qbittorrent]="https://github.com/qbittorrent/qBittorrent/archive/refs/heads/${github_tag[qbittorrent]}.tar.gz"\r\n\t\t\t\tfi\r\n\t\t\t\tqbt_workflow_override[qbittorrent]="yes"\r\n\t\t\t\t_test_git_ouput "${github_tag[qbittorrent]}" "qbittorrent" "$2"\r\n\t\t\t\tshift 2\r\n\t\t\telse\r\n\t\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_circle} ${color_yellow_light}You must provide a tag for this switch:${color_end} ${color_blue_light}${1} TAG ${color_end}"\r\n\t\t\t\texit\r\n\t\t\tfi\r\n\t\t\t;;\r\n\t\t-qtt | --qt-tag)\r\n\t\t\tif [[ -n "${2}" ]]; then\r\n\t\t\t\tgithub_tag[qtbase]="$(_git "${github_url[qtbase]}" -t "${2}")"\r\n\t\t\t\tgithub_tag[qttools]="$(_git "${github_url[qttools]}" -t "${2}")"\r\n\t\t\t\tapp_version[qtbase]="$(printf \'%s\' "${github_tag[qtbase]#v}" | sed \'s/-lts-lgpl//g\')"\r\n\t\t\t\tapp_version[qttools]="$(printf \'%s\' "${github_tag[qttools]#v}" | sed \'s/-lts-lgpl//g\')"\r\n\t\t\t\tsource_default[qtbase]="folder"\r\n\t\t\t\tsource_default[qttools]="folder"\r\n\t\t\t\tqbt_workflow_override[qtbase]="yes"\r\n\t\t\t\tqbt_workflow_override[qttools]="yes"\r\n\t\t\t\tqbt_qt_version="${app_version[qtbase]%%.*}"\r\n\t\t\t\tread -ra qt_version_short_array <<< "${app_version[qtbase]//\\./ }"\r\n\t\t\t\tqt_version_short="${qt_version_short_array[0]}.${qt_version_short_array[1]}"\r\n\t\t\t\t_test_git_ouput "${github_tag[qtbase]}" "qtbase" "${2}"\r\n\t\t\t\t_test_git_ouput "${github_tag[qttools]}" "qttools" "${2}"\r\n\r\n\t\t\t\tif [[ $qbt_build_tool == "cmake" && "${2}" =~ ^v5 ]]; then\r\n\t\t\t\t\tprintf \'\\n%b\\n\' " ${unicode_red_circle} Please use a correct qt and build tool combination"\r\n\t\t\t\t\tprintf \'\\n%b\\n\' " ${unicode_green_circle} qt5 + qmake ${unicode_green_circle} qt6 + cmake ${unicode_red_circle} qt5 + cmake ${unicode_red_circle} qt6 + qmake"\r\n\t\t\t\t\t_print_env\r\n\t\t\t\t\texit 1\r\n\t\t\t\tfi\r\n\t\t\t\tshift 2\r\n\t\t\telse\r\n\t\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_circle} ${color_yellow_light}You must provide a tag for this switch:${color_end} ${color_blue_light}${1} TAG ${color_end}"\r\n\t\t\t\texit\r\n\t\t\tfi\r\n\t\t\t;;\r\n\t\t-h | --help)\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${text_bold}${text_underlined}Here are a list of available options${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-b${color_end}     ${text_dim}or${color_end} ${color_blue_light}--build-directory${color_end}       ${color_yellow}Help:${color_end} ${color_blue_light}-h-b${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-build-directory${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-bt${color_end}    ${text_dim}or${color_end} ${color_blue_light}--boost-version${color_end}         ${color_yellow}Help:${color_end} ${color_blue_light}-h-bt${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-boost-version${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-c${color_end}     ${text_dim}or${color_end} ${color_blue_light}--cmake${color_end}                 ${color_yellow}Help:${color_end} ${color_blue_light}-h-c${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-cmake${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-cd${color_end}    ${text_dim}or${color_end} ${color_blue_light}--cache-directory${color_end}       ${color_yellow}Help:${color_end} ${color_blue_light}-h-cd${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-cache-directory${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-d${color_end}     ${text_dim}or${color_end} ${color_blue_light}--debug${color_end}                 ${color_yellow}Help:${color_end} ${color_blue_light}-h-d${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-debug${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-bs-p${color_end}  ${text_dim}or${color_end} ${color_blue_light}--boot-strap-patches${color_end}    ${color_yellow}Help:${color_end} ${color_blue_light}-h-bs-p${color_end}  ${text_dim}or${color_end} ${color_blue_light}--help-boot-strap-patches${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-bs-c${color_end}  ${text_dim}or${color_end} ${color_blue_light}--boot-strap-cmake${color_end}      ${color_yellow}Help:${color_end} ${color_blue_light}-h-bs-c${color_end}  ${text_dim}or${color_end} ${color_blue_light}--help-boot-strap-cmake${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-bs-r${color_end}  ${text_dim}or${color_end} ${color_blue_light}--boot-strap-release${color_end}    ${color_yellow}Help:${color_end} ${color_blue_light}-h-bs-r${color_end}  ${text_dim}or${color_end} ${color_blue_light}--help-boot-strap-release${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-bs-ma${color_end} ${text_dim}or${color_end} ${color_blue_light}--boot-strap-multi-arch${color_end} ${color_yellow}Help:${color_end} ${color_blue_light}-h-bs-ma${color_end} ${text_dim}or${color_end} ${color_blue_light}--help-boot-strap-multi-arch${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-bs-a${color_end}  ${text_dim}or${color_end} ${color_blue_light}--boot-strap-all${color_end}        ${color_yellow}Help:${color_end} ${color_blue_light}-h-bs-a${color_end}  ${text_dim}or${color_end} ${color_blue_light}--help-boot-strap-all${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-i${color_end}     ${text_dim}or${color_end} ${color_blue_light}--icu${color_end}                   ${color_yellow}Help:${color_end} ${color_blue_light}-h-i${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-icu${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-lm${color_end}    ${text_dim}or${color_end} ${color_blue_light}--libtorrent-master${color_end}     ${color_yellow}Help:${color_end} ${color_blue_light}-h-lm${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-libtorrent-master${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-lt${color_end}    ${text_dim}or${color_end} ${color_blue_light}--libtorrent-tag${color_end}        ${color_yellow}Help:${color_end} ${color_blue_light}-h-lt${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-libtorrent-tag${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-m${color_end}     ${text_dim}or${color_end} ${color_blue_light}--master${color_end}                ${color_yellow}Help:${color_end} ${color_blue_light}-h-m${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-master${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-ma${color_end}    ${text_dim}or${color_end} ${color_blue_light}--multi-arch${color_end}            ${color_yellow}Help:${color_end} ${color_blue_light}-h-ma${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-multi-arch${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-n${color_end}     ${text_dim}or${color_end} ${color_blue_light}--no-delete${color_end}             ${color_yellow}Help:${color_end} ${color_blue_light}-h-n${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-no-delete${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-o${color_end}     ${text_dim}or${color_end} ${color_blue_light}--optimize${color_end}              ${color_yellow}Help:${color_end} ${color_blue_light}-h-o${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-optimize${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-p${color_end}     ${text_dim}or${color_end} ${color_blue_light}--proxy${color_end}                 ${color_yellow}Help:${color_end} ${color_blue_light}-h-p${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-proxy${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-pr${color_end}    ${text_dim}or${color_end} ${color_blue_light}--patch-repo${color_end}            ${color_yellow}Help:${color_end} ${color_blue_light}-h-pr${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-patch-repo${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-qm${color_end}    ${text_dim}or${color_end} ${color_blue_light}--qbittorrent-master${color_end}    ${color_yellow}Help:${color_end} ${color_blue_light}-h-qm${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-qbittorrent-master${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-qt${color_end}    ${text_dim}or${color_end} ${color_blue_light}--qbittorrent-tag${color_end}       ${color_yellow}Help:${color_end} ${color_blue_light}-h-qt${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-qbittorrent-tag${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-qtt${color_end}   ${text_dim}or${color_end} ${color_blue_light}--qt-tag${color_end}                ${color_yellow}Help:${color_end} ${color_blue_light}-h-qtt${color_end}   ${text_dim}or${color_end} ${color_blue_light}--help-qtt-tag${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-sdu${color_end}   ${text_dim}or${color_end} ${color_blue_light}--script-debug-urls${color_end}     ${color_yellow}Help:${color_end} ${color_blue_light}-h-sdu${color_end}   ${text_dim}or${color_end} ${color_blue_light}--help-script-debug-urls${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-si${color_end}    ${text_dim}or${color_end} ${color_blue_light}--static-ish${color_end}            ${color_yellow}Help:${color_end} ${color_blue_light}-h-s${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-strip${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-s${color_end}     ${text_dim}or${color_end} ${color_blue_light}--strip${color_end}                 ${color_yellow}Help:${color_end} ${color_blue_light}-h-s${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-strip${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_green}Use:${color_end} ${color_blue_light}-wf${color_end}    ${text_dim}or${color_end} ${color_blue_light}--workflow${color_end}              ${color_yellow}Help:${color_end} ${color_blue_light}-h-wf${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-workflow${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${text_bold}${text_underlined}Module specific help - flags are used with the modules listed here.${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${color_green}Use:${color_end} ${color_magenta_light}all${color_end} ${text_dim}or${color_end} ${color_magenta_light}module-name${color_end}          ${color_green}Usage:${color_end} ${color_cyan_light}${qbt_working_dir_short}/$(basename -- "$0")${color_end} ${color_magenta_light}all${color_end} ${color_blue_light}-i${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${text_dim}${color_magenta_light}all${color_end} ${text_dim}----------------${color_end} ${text_dim}${color_yellow_light}optional${color_end} ${text_dim}Recommended method to install all modules${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}install${color_end} ${text_dim}------------${color_end} ${text_dim}${color_yellow_light}optional${color_end} ${text_dim}Install the ${text_dim}${color_cyan_light}${qbt_install_dir_short}/completed/qbittorrent-nox${color_end} ${text_dim}binary${color_end}"\r\n\t\t\t[[ "${os_id}" =~ ^(debian|ubuntu)$ ]] && printf \'%b\\n\' " ${text_dim}${color_magenta_light}glibc${color_end} ${text_dim}--------------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Build libc locally to statically link nss${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}zlib${color_end} ${text_dim}---------------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Build zlib locally${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}iconv${color_end} ${text_dim}--------------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Build iconv locally${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}icu${color_end} ${text_dim}----------------${color_end} ${text_dim}${color_yellow_light}optional${color_end} ${text_dim}Build ICU locally${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}openssl${color_end} ${text_dim}------------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Build openssl locally${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}boost${color_end} ${text_dim}--------------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Download, extract and build the boost library files${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}libtorrent${color_end} ${text_dim}---------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Build libtorrent locally${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}double_conversion${color_end} ${text_dim}--${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}A cmake + Qt6 build component on modern OS only.${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}qtbase${color_end} ${text_dim}-------------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Build qtbase locally${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}qttools${color_end} ${text_dim}------------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Build qttools locally${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}qbittorrent${color_end} ${text_dim}--------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Build qbittorrent locally${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${text_bold}${text_underlined}env help - supported exportable evironment variables${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${text_dim}${color_magenta_light}export qbt_libtorrent_version=\\"\\"${color_end} ${text_dim}--------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}1.2 - 2.0${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}export qbt_qt_version=\\"\\"${color_end} ${text_dim}----------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}5 - 5.15 - 6 - 6.2 - 6.3 and so on${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}export qbt_build_tool=\\"\\"${color_end} ${text_dim}----------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}qmake - cmake${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}export qbt_cross_name=\\"\\"${color_end} ${text_dim}----------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}x86_64 - aarch64 - armv7 - armhf${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}export qbt_patches_url=\\"\\"${color_end} ${text_dim}---------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}userdocs/qbittorrent-nox-static.${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}export qbt_libtorrent_tag=\\"\\"${color_end} ${text_dim}------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}Takes a valid git tag or branch for libtorrent${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}export qbt_qbittorrent_tag=\\"\\"${color_end} ${text_dim}-----------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}Takes a valid git tag or branch for qbittorrent${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}export qbt_boost_tag=\\"\\"${color_end} ${text_dim}-----------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}Takes a valid git tag or branch for boost${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}export qbt_qt_tag=\\"\\"${color_end} ${text_dim}--------------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}Takes a valid git tag or branch for Qt${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}export qbt_workflow_files=\\"\\"${color_end} ${text_dim}------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}yes no - use qbt-workflow-files for dependencies${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}export qbt_workflow_artifacts=\\"\\"${color_end} ${text_dim}--------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}yes no - use qbt_workflow_artifacts for dependencies${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}export qbt_cache_dir=\\"\\"${color_end} ${text_dim}-----------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}path empty - provide a path to a cache directory${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}export qbt_libtorrent_master_jamfile=\\"\\"${color_end} ${text_dim}-${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}yes no - use RC branch instead of release jamfile${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}export qbt_optimise_strip=\\"\\"${color_end} ${text_dim}------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}yes no - strip binaries - cannot be used with debug${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}export qbt_build_debug=\\"\\"${color_end} ${text_dim}---------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}yes no - debug build - cannot be used with strip${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}export qbt_standard=\\"\\"${color_end} ${text_dim}------------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}14 - 17 - 20 - 23 - c standard for gcc - for older build combos${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${text_dim}${color_magenta_light}export qbt_static_ish=\\"\\"${color_end} ${text_dim}----------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}yes no - libc linking - link dynamically to libc${color_end}"\r\n\t\t\t_print_env\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-b | --help-build-directory)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " Default build location: ${color_cyan}${qbt_install_dir_short}${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${color_blue_light}-b${color_end} or ${color_blue_light}--build-directory${color_end} to set the location of the build directory."\r\n\t\t\tprintf \'\\n%b\\n\' " ${color_yellow}Paths are relative to the script location. I recommend that you use a full path.${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${text_dim}${unicode_blue_light_circle} Usage example:${color_end} ${text_dim}${color_green}${qbt_working_dir_short}/$(basename -- "$0")${color_end} ${text_dim}${color_magenta_light}all${color_end} ${text_dim}- Will install all modules and build libtorrent to the default build location${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${text_dim}${unicode_blue_light_circle} Usage example:${color_end} ${text_dim}${color_green}${qbt_working_dir_short}/$(basename -- "$0")${color_end} ${text_dim}${color_magenta_light}module${color_end} ${text_dim}- Will install a single module to the default build location${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${text_dim}${unicode_blue_light_circle} Usage example:${color_end} ${text_dim}${color_green}${qbt_working_dir_short}/$(basename -- "$0")${color_end} ${text_dim}${color_magenta_light}module${color_end} ${color_blue_light}-b${color_end} ${text_dim}${color_cyan_light}\\"\\$HOME/build\\"${color_end} ${text_dim}- will specify a custom build directory and install a specific module use to that custom location${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-bs-p | --help-boot-strap-patches)\r\n\t\t\t_apply_patches bootstrap-help\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " Creates dirs in this structure: ${color_cyan}${qbt_install_dir_short}/patches/app_name/tag/patch${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " Add your patches there, for example."\r\n\t\t\tprintf \'\\n%b\\n\' " ${color_cyan}${qbt_install_dir_short}/patches/libtorrent/${app_version[libtorrent]}/patch${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${color_cyan}${qbt_install_dir_short}/patches/qbittorrent/${app_version[qbittorrent]}/patch${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-bs-c | --help-boot-cmake)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " This bootstrap will install cmake and ninja build to the build directory"\r\n\t\t\tprintf \'\\n%b\\n\\n\'"${color_green_light} Usage:${color_end} ${color_cyan_light}${qbt_working_dir_short}/$(basename -- "$0")${color_end} ${color_blue_light}-bs-c${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-bs-r | --help-boot-strap-release)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' "${color_red_light} Github action specific. You probably dont need it${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " This switch creates some github release template files in this directory"\r\n\t\t\tprintf \'\\n%b\\n\' " ${qbt_install_dir_short}/release_info"\r\n\t\t\tprintf \'\\n%b\\n\\n\' "${color_green_light} Usage:${color_end} ${color_cyan_light}${qbt_working_dir_short}/$(basename -- "$0")${color_end} ${color_blue_light}-bs-r${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-bs-ma | --help-boot-strap-multi-arch)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_red_circle}${color_red_light} Github action and Alpine specific. You probably dont need it${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " This switch bootstraps the musl cross build files needed for any provided and supported architecture"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle} armhf"\r\n\t\t\tprintf \'%b\\n\' " ${unicode_yellow_circle} armv7"\r\n\t\t\tprintf \'%b\\n\' " ${unicode_yellow_circle} aarch64"\r\n\t\t\tprintf \'\\n%b\\n\' "${color_green_light} Usage:${color_end} ${color_cyan_light}${qbt_working_dir_short}/$(basename -- "$0")${color_end} ${color_blue_light}-bs-ma ${qbt_cross_name:-aarch64}${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_yellow_circle} You can also set it as a variable to trigger cross building: ${color_blue_light}export qbt_cross_name=${qbt_cross_name:-aarch64}${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-bs-a | --help-boot-strap-all)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_red_circle}${color_red_light} Github action specific and Alpine only. You probably dont need it${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " Performs all bootstrapping options"\r\n\t\t\tprintf \'\\n%b\\n\' "${color_green_light} Usage:${color_end} ${color_cyan_light}${qbt_working_dir_short}/$(basename -- "$0")${color_end} ${color_blue_light}-bs-a${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle} ${color_yellow_light}Patches${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${unicode_yellow_circle} ${color_yellow_light}Release info${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${unicode_yellow_circle} ${color_yellow_light}Cmake and ninja build${color_end} if the ${color_blue_light}-c${color_end} flag is passed"\r\n\t\t\tprintf \'%b\\n\' " ${unicode_yellow_circle} ${color_yellow_light}Multi arch${color_end} if the ${color_blue_light}-ma${color_end} flag is passed"\r\n\t\t\tprintf \'\\n%b\\n\' " Equivalent of doing: ${color_cyan_light}${qbt_working_dir_short}/$(basename -- "$0")${color_end} ${color_blue_light}-bs -bs-r${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " And with ${color_blue_light}-c${color_end} and ${color_blue_light}-ma${color_end} : ${color_cyan_light}${qbt_working_dir_short}/$(basename -- "$0")${color_end} ${color_blue_light}-bs -bs-c -bs-ma -bs-r ${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-bt | --help-boost-version)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " This will let you set a specific version of boost to use with older build combos"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_blue_light_circle} Usage example: ${color_blue_light}-bt boost-1.81.0${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_blue_light_circle} Usage example: ${color_blue_light}-bt boost-1.82.0.beta1${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-c | --help-cmake)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " This flag can change the build process in a few ways."\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle} Use cmake to build libtorrent."\r\n\t\t\tprintf \'%b\\n\' " ${unicode_yellow_circle} Use cmake to build qbittorrent."\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_yellow_circle} You can use this flag with ICU and qtbase will use ICU instead of iconv."\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-cd | --help-cache-directory)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " This will let you set a path of a directory that contains cached github repos of modules"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle} Cached apps folder names must match the module name. Case and spelling"\r\n\t\t\tprintf \'\\n%b\\n\' " For example: ${color_cyan_light}~/cache_dir/qbittorrent${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " Additonal flags supported: ${color_cyan_light}rm${color_end} - remove the cache directory and exit"\r\n\t\t\tprintf \'\\n%b\\n\' " Additonal flags supported: ${color_cyan_light}bs${color_end} - download cache for all activated modules then exit"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_blue_light_circle} Usage example: ${color_blue_light}-cd ~/cache_dir${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_blue_light_circle} Usage example: ${color_blue_light}-cd ~/cache_dir rm${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_blue_light_circle} Usage example: ${color_blue_light}-cd ~/cache_dir bs${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-d | --help-debug)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " Enables debug symbols for libtorrent and qbitorrent when building - required for gdb backtrace"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-n | --help-no-delete)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " Skip all delete functions for selected modules to leave source code directories behind."\r\n\t\t\tprintf \'\\n%b\\n\' " ${text_dim}This flag is provided with no arguments.${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${color_blue_light}-n${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-i | --help-icu)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " Use ICU libraries when building qBittorrent. Final binary size will be around ~50Mb"\r\n\t\t\tprintf \'\\n%b\\n\' " ${text_dim}This flag is provided with no arguments.${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${color_blue_light}-i${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-m | --help-master)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " Always use the master branch for ${color_green}libtorrent RC_${qbt_libtorrent_version//./_}${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " Always use the master branch for ${color_green}qBittorrent"\r\n\t\t\tprintf \'\\n%b\\n\' " ${text_dim}This flag is provided with no arguments.${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${color_blue_light}-lm${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-ma | --help-multi-arch)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_red_circle}${color_red_light} Github action and Alpine specific. You probably dont need it${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " This switch will make the script use the cross build configuration for these supported architectures"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle} armhf"\r\n\t\t\tprintf \'%b\\n\' " ${unicode_yellow_circle} armv7"\r\n\t\t\tprintf \'%b\\n\' " ${unicode_yellow_circle} aarch64"\r\n\t\t\tprintf \'\\n%b\\n\' "${color_green_light} Usage:${color_end} ${color_cyan_light}${qbt_working_dir_short}/$(basename -- "$0")${color_end} ${color_blue_light}-bs-ma ${qbt_cross_name:-aarch64}${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_yellow_circle} You can also set it as a variable to trigger cross building: ${color_blue_light}export qbt_cross_name=${qbt_cross_name:-aarch64}${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-lm | --help-libtorrent-master)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " Always use the master branch for ${color_green}libtorrent-${qbt_libtorrent_version}${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " This master that will be used is: ${color_green}RC_${qbt_libtorrent_version//./_}${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${text_dim}This flag is provided with no arguments.${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${color_blue_light}-lm${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-lt | --help-libtorrent-tag)\r\n\t\t\tif [[ ! "${github_tag[libtorrent]}" =~ (error_tag|error_22) ]]; then\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\t\tprintf \'\\n%b\\n\' " Use a provided libtorrent tag when cloning from github."\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${color_yellow}You can use this flag with this help command to see the value if called before the help option.${color_end}"\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${color_green}${qbt_working_dir_short}/$(basename -- "$0")${color_end}${color_blue_light} -lt ${color_cyan_light}${github_tag[libtorrent]}${color_end} ${color_blue_light}-h-lt${color_end}"\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${text_dim}This flag must be provided with arguments.${color_end}"\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${color_blue_light}-lt${color_end} ${color_cyan_light}${github_tag[libtorrent]}${color_end}"\r\n\t\t\tfi\r\n\t\t\tprintf \'\\n\'\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-o | --help-optimize)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle} ${color_yellow_light}Warning:${color_end} using this flag will mean your static build is limited a CPU that matches the host spec"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_blue_light_circle} Usage example: ${color_blue_light}-o${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " Additonal flags used: ${color_cyan_light}-march=native${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-p | --help-proxy)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " Specify a proxy URL and PORT to use with curl and git"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_blue_light_circle} Usage examples:"\r\n\t\t\tprintf \'\\n%b\\n\' " ${color_blue_light}-p${color_end} ${color_cyan_light}username:password@https://123.456.789.321:8443${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${color_blue_light}-p${color_end} ${color_cyan_light}https://proxy.com:12345${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle} Call this before the help option to see outcome dynamically:"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${color_blue_light}-p${color_end} ${color_cyan_light}https://proxy.com:12345${color_end} ${color_blue_light}-h-p${color_end}"\r\n\t\t\t[[ -n "${qbt_curl_proxy[*]}" ]] && printf \'%b\\n\' " proxy command: ${color_cyan_light}${qbt_curl_proxy[*]}${text_newline}${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-pr | --help-patch-repo)\r\n\t\t\t_apply_patches bootstrap-help\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " Specify a username and repo to use patches hosted on github${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle} ${color_yellow_light}There is a specific github directory format you need to use with this flag${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${color_cyan_light}patches/libtorrent/${app_version[libtorrent]}/patch${color_end}"\r\n\t\t\tprintf \'%b\\n\' " ${color_cyan_light}patches/libtorrent/${app_version[libtorrent]}/Jamfile${color_end} ${color_red_light}(defaults to branch master)${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${color_cyan_light}patches/qbittorrent/${app_version[qbittorrent]}/patch${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle} ${color_yellow_light}If an installation tag matches a hosted tag patch file, it will be automatically used.${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " The tag name will alway be an abbreviated version of the default or specificed tag.${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_blue_light_circle} ${color_green}Usage example:${color_end} ${color_blue_light}-pr usnerame/repo${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-qm | --help-qbittorrent-master)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " Always use the master branch for ${color_green}qBittorrent${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " This master that will be used is: ${color_green}master${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${text_dim}This flag is provided with no arguments.${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${color_blue_light}-qm${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-qt | --help-qbittorrent-tag)\r\n\t\t\tif [[ ! "${github_tag[qbittorrent]}" =~ (error_tag|error_22) ]]; then\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\t\tprintf \'\\n%b\\n\' " Use a provided qBittorrent tag when cloning from github."\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${color_yellow}You can use this flag with this help command to see the value if called before the help option.${color_end}"\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${color_green}${qbt_working_dir_short}/$(basename -- "$0")${color_end}${color_blue_light} -qt ${color_cyan_light}${github_tag[qbittorrent]}${color_end} ${color_blue_light}-h-qt${color_end}"\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${text_dim}This flag must be provided with arguments.${color_end}"\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${color_blue_light}-qt${color_end} ${color_cyan_light}${github_tag[qbittorrent]}${color_end}"\r\n\t\t\tfi\r\n\t\t\tprintf \'\\n\'\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-qtt | --help-qt-tag)\r\n\t\t\tif [[ ! "${github_tag[qtbase]}" =~ (error_tag|error_22) ]]; then\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\t\tprintf \'\\n%b\\n\' " Use a provided Qt tag when cloning from github."\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${color_yellow}You can use this flag with this help command to see the value if called before the help option.${color_end}"\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${color_green}${qbt_working_dir_short}/$(basename -- "$0")${color_end}${color_blue_light} -qt ${color_cyan_light}${github_tag[qtbase]}${color_end} ${color_blue_light}-h-qt${color_end}"\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${text_dim}This flag must be provided with arguments.${color_end}"\r\n\t\t\t\tprintf \'\\n%b\\n\' " ${color_blue_light}-qt${color_end} ${color_cyan_light}${github_tag[qtbase]}${color_end}"\r\n\t\t\tfi\r\n\t\t\tprintf \'\\n\'\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-s | --help-strip)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " Strip the qbittorrent-nox binary of unneeded symbols to decrease file size"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle} Static musl builds don\'t work with qBittorrents built in stacktrace."\r\n\t\t\tprintf \'\\n%b\\n\' " If you need to debug a build with gdb you must build a debug build using the flag ${color_blue_light}-d${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${text_dim}This flag is provided with no arguments.${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${color_blue_light}-s${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-si | --help-static-ish)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " Do not statically link libc (glibc/muslc) when building qbittorrent-nox"\r\n\t\t\tprintf \'\\n%b\\n\' " ${text_dim}This flag is provided with no arguments.${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${color_blue_light}-si${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-sdu | --help-script-debug-urls)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_blue_light_circle} This will print out all the ${color_yellow_light}_set_module_urls${color_end} array info to check"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_blue_light_circle} Usage example: ${color_blue_light}-sdu${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t-h-wf | --help-workflow)\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle} Use archives from ${color_cyan_light}https://github.com/userdocs/qbt-workflow-files/releases/latest${color_end}"\r\n\t\t\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle} ${color_yellow_light}Warning:${color_end} If you set a custom version for supported modules it will override and disable workflows as a source for that module"\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_blue_light_circle} Usage example: ${color_blue_light}-wf${color_end}"\r\n\t\t\texit\r\n\t\t\t;;\r\n\t\t--) # end argument parsing\r\n\t\t\tshift\r\n\t\t\tbreak\r\n\t\t\t;;\r\n\t\t-*) # unsupported flags\r\n\t\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_circle} Error: Unsupported flag ${color_red_light}${1}${color_end} - use ${color_green_light}-h${color_end} or ${color_green_light}--help${color_end} to see the valid options${color_end}" >&2\r\n\t\t\texit 1\r\n\t\t\t;;\r\n\t\t*) # preserve positional arguments\r\n\t\t\tparams2+=("${1}")\r\n\t\t\tshift\r\n\t\t\t;;\r\n\tesac\r\ndone\r\nset -- "${params2[@]}" # Set positional arguments in their proper place.\r\n#######################################################################################################################################################\r\n# Functions part 2: Use some of our functions\r\n#######################################################################################################################################################\r\n[[ "${1}" == "install" ]] && _install_qbittorrent "${@}" # see functions\r\n#######################################################################################################################################################\r\n# Lets dip out now if we find that any github tags failed validation or the urls are invalid\r\n#######################################################################################################################################################\r\n_error_tag\r\n#######################################################################################################################################################\r\n# Functions part 3: Any functions that require that params in the above options while loop to have been shifted must come after this line\r\n#######################################################################################################################################################\r\n_set_cxx_standard\r\n_set_build_cons\r\n_debug "${@}"                # requires shifted params from options block 2\r\n_installation_modules "${@}" # requires shifted params from options block 2\r\n#######################################################################################################################################################\r\n# If any modules fail the qbt_modules_test then exit now.\r\n#######################################################################################################################################################\r\nif [[ "${qbt_modules_test}" == \'fail\' || "${#}" -eq \'0\' ]]; then\r\n\tprintf \'\\n%b\\n\' " ${text_blink}${unicode_red_circle}${color_end}${text_bold} One or more of the provided modules are not supported${color_end}"\r\n\tprintf \'\\n%b\\n\' " ${unicode_yellow_circle}${text_bold} Below is a list of supported modules${color_end}"\r\n\tprintf \'\\n%b\\n\' " ${unicode_magenta_circle}${color_magenta_light} ${qbt_modules[*]}${color_end}"\r\n\t_print_env\r\n\texit\r\nfi\r\n#######################################################################################################################################################\r\n# Functions part 4:\r\n#######################################################################################################################################################\r\n_cmake\r\n_multi_arch\r\n#######################################################################################################################################################\r\n# shellcheck disable=SC2317\r\n_glibc_bootstrap() {\r\n\tsub_dir="/BUILD"\r\n}\r\n# shellcheck disable=SC2317\r\n_glibc() {\r\n\t"${qbt_dl_folder_path}/configure" "${multi_glibc[@]}" --prefix="${qbt_install_dir}" --enable-static-nss --disable-nscd --srcdir="${qbt_dl_folder_path}" |& _tee "${qbt_install_dir}/logs/${app_name}.log"\r\n\tmake -j"$(nproc)" |& _tee -a "${qbt_install_dir}/logs/$app_name.log"\r\n\t_post_command build\r\n\tmake install |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\r\n\tunset sub_dir\r\n}\r\n#######################################################################################################################################################\r\n# shellcheck disable=SC2317\r\n_zlib() {\r\n\tif [[ "${qbt_build_tool}" == "cmake" ]]; then\r\n\t\tmkdir -p "${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}"\r\n\t\t# force set some ARCH when using zlib-ng, cmake and musl-cross since it does not detect the arch correctly on Alpine.\r\n\t\t[[ "${qbt_cross_target}" =~ ^(alpine)$ ]] && printf \'%b\\n\' "\\narchfound ${qbt_zlib_arch:-$(apk --print-arch)}" >> "${qbt_dl_folder_path}/cmake/detect-arch.c"\r\n\t\tcmake -Wno-dev -Wno-deprecated --graphviz="${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}/dep-graph.dot" -G Ninja -B build \\\r\n\t\t\t-D CMAKE_VERBOSE_MAKEFILE="${qbt_cmake_debug}" \\\r\n\t\t\t-D CMAKE_CXX_STANDARD="${qbt_standard}" \\\r\n\t\t\t-D CMAKE_PREFIX_PATH="${qbt_install_dir}" \\\r\n\t\t\t-D BUILD_SHARED_LIBS=OFF \\\r\n\t\t\t-D ZLIB_COMPAT=ON \\\r\n\t\t\t-D CMAKE_INSTALL_PREFIX="${qbt_install_dir}" |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tcmake --build build |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\t_post_command build\r\n\t\tcmake --install build |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tdot -Tpng -o "${qbt_install_dir}/completed/${app_name}-graph.png" "${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}/dep-graph.dot"\r\n\telse\r\n\t\t# force set some ARCH when using zlib-ng, configure and musl-cross since it does not detect the arch correctly on Alpine.\r\n\t\t[[ "${qbt_cross_target}" =~ ^(alpine)$ ]] && sed "s|  CFLAGS=\\"-O2 \\${CFLAGS}\\"|  ARCH=${qbt_zlib_arch:-$(apk --print-arch)}\\n  CFLAGS=\\"-O2 \\${CFLAGS}\\"|g" -i "${qbt_dl_folder_path}/configure"\r\n\t\t./configure --prefix="${qbt_install_dir}" --static --zlib-compat |& _tee "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tmake -j"$(nproc)" CXXFLAGS="${CXXFLAGS}" CPPFLAGS="${CPPFLAGS}" LDFLAGS="${LDFLAGS}" |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\t_post_command build\r\n\t\tmake install |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# shellcheck disable=SC2317\r\n_iconv() {\r\n\tif [[ -n "${qbt_cache_dir}" && -d "${qbt_cache_dir}/${app_name}" ]]; then\r\n\t\t./gitsub.sh pull --depth 1\r\n\t\t./autogen.sh\r\n\tfi\r\n\r\n\t./configure "${multi_iconv[@]}" --prefix="${qbt_install_dir}" --disable-shared --enable-static CXXFLAGS="${CXXFLAGS}" CPPFLAGS="${CPPFLAGS}" LDFLAGS="${LDFLAGS}" |& _tee "${qbt_install_dir}/logs/${app_name}.log"\r\n\tmake -j"$(nproc)" |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\tmake install |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n}\r\n#######################################################################################################################################################\r\n# shellcheck disable=SC2317\r\n_icu_bootstrap() {\r\n\tif [[ -n "${qbt_cache_dir}" && -d "${qbt_cache_dir}/${app_name}" && "${qbt_workflow_files}" == "no" ]]; then\r\n\t\tsub_dir="/icu4c/source"\r\n\telse\r\n\t\tsub_dir="/source"\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# shellcheck disable=SC2317\r\n_icu() {\r\n\tif [[ "${multi_arch_options[${qbt_cross_name:-default}]}" == "${qbt_cross_name}" ]]; then\r\n\t\tmkdir -p "${qbt_install_dir}/${app_name}/cross"\r\n\t\t_pushd "${qbt_install_dir}/${app_name}/cross"\r\n\t\t"${qbt_install_dir}/${app_name}${sub_dir}/runConfigureICU" Linux/gcc\r\n\t\tmake -j"$(nproc)"\r\n\t\t_pushd "${qbt_install_dir}/${app_name}${sub_dir}"\r\n\tfi\r\n\r\n\t./configure "${multi_icu[@]}" --prefix="${qbt_install_dir}" --disable-shared --enable-static --disable-samples --disable-tests --with-data-packaging=static CXXFLAGS="${CXXFLAGS}" CPPFLAGS="${CPPFLAGS}" LDFLAGS="${LDFLAGS}" |& _tee "${qbt_install_dir}/logs/${app_name}.log"\r\n\tmake -j"$(nproc)" |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t_post_command build\r\n\tmake install |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\r\n\tunset sub_dir\r\n}\r\n#######################################################################################################################################################\r\n# shellcheck disable=SC2317\r\n_openssl() {\r\n\t"${multi_openssl[@]}" --prefix="${qbt_install_dir}" --libdir="${lib_dir}" --openssldir="/etc/ssl" threads no-shared no-dso no-comp CXXFLAGS="${CXXFLAGS}" CPPFLAGS="${CPPFLAGS}" LDFLAGS="${LDFLAGS}" |& _tee "${qbt_install_dir}/logs/${app_name}.log"\r\n\tmake -j"$(nproc)" |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t_post_command build\r\n\tmake install_sw |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n}\r\n#######################################################################################################################################################\r\n# shellcheck disable=SC2317\r\n_boost_bootstrap() {\r\n\t# If using source files and jfrog fails, default to git, if we are not using workflows sources.\r\n\tif [[ "${boost_url_status}" =~ (403|404) && "${qbt_workflow_files}" == "no" && "${qbt_workflow_artifacts}" == "no" ]]; then\r\n\t\tsource_default["${app_name}"]="folder"\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# shellcheck disable=SC2317\r\n_boost() {\r\n\tif [[ "${source_default["${app_name}"]}" == "file" ]]; then\r\n\t\tmv -f "${qbt_dl_folder_path}/" "${qbt_install_dir}/boost"\r\n\t\t_pushd "${qbt_install_dir}/boost"\r\n\tfi\r\n\r\n\tif [[ "${qbt_build_tool}" != \'cmake\' ]]; then\r\n\t\t"${qbt_install_dir}/boost/bootstrap.sh" |& _tee "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tln -s "${qbt_install_dir}/boost/boost" "${qbt_install_dir}/boost/include"\r\n\telse\r\n\t\tprintf \'%b\\n\' " ${unicode_yellow_circle} Skipping b2 as we are using cmake with Qt6"\r\n\tfi\r\n\r\n\tif [[ "${source_default["${app_name}"]}" == "folder" ]]; then\r\n\t\t"${qbt_install_dir}/boost/b2" headers |& _tee "${qbt_install_dir}/logs/${app_name}.log"\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# shellcheck disable=SC2317\r\n_libtorrent() {\r\n\texport BOOST_ROOT="${qbt_install_dir}/boost"\r\n\texport BOOST_INCLUDEDIR="${qbt_install_dir}/boost"\r\n\texport BOOST_BUILD_PATH="${qbt_install_dir}/boost"\r\n\r\n\tif [[ "${qbt_build_tool}" == \'cmake\' ]]; then\r\n\t\tmkdir -p "${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}"\r\n\t\tcmake -Wno-dev -Wno-deprecated --graphviz="${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}/dep-graph.dot" -G Ninja -B build \\\r\n\t\t\t"${multi_libtorrent[@]}" \\\r\n\t\t\t-D CMAKE_VERBOSE_MAKEFILE="${qbt_cmake_debug}" \\\r\n\t\t\t-D CMAKE_BUILD_TYPE="Release" \\\r\n\t\t\t-D CMAKE_CXX_STANDARD="${qbt_standard}" \\\r\n\t\t\t-D CMAKE_PREFIX_PATH="${qbt_install_dir};${qbt_install_dir}/boost" \\\r\n\t\t\t-D Boost_NO_BOOST_CMAKE=TRUE \\\r\n\t\t\t-D CMAKE_CXX_FLAGS="${CXXFLAGS}" \\\r\n\t\t\t-D BUILD_SHARED_LIBS=OFF \\\r\n\t\t\t-D Iconv_LIBRARY="${lib_dir}/libiconv.a" \\\r\n\t\t\t-D CMAKE_INSTALL_PREFIX="${qbt_install_dir}" |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tcmake --build build |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\t_post_command build\r\n\t\tcmake --install build |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tdot -Tpng -o "${qbt_install_dir}/completed/${app_name}-graph.png" "${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}/dep-graph.dot"\r\n\telse\r\n\t\t[[ ${qbt_cross_name} =~ ^(armhf|armv7)$ ]] && arm_libatomic="-l:libatomic.a"\r\n\t\t# Check the actual version of the cloned libtorrent instead of using the tag so that we can determine RC_1_1, RC_1_2 or RC_2_0 when a custom pr branch was used. This will always give an accurate result.\r\n\t\tlibtorrent_version_hpp="$(sed -rn \'s|(.*)LIBTORRENT_VERSION "(.*)"|\\2|p\' include/libtorrent/version.hpp)"\r\n\t\tif [[ "${libtorrent_version_hpp}" =~ ^1\\.1\\. ]]; then\r\n\t\t\tlibtorrent_library_filename="libtorrent.a"\r\n\t\telse\r\n\t\t\tlibtorrent_library_filename="libtorrent-rasterbar.a"\r\n\t\tfi\r\n\r\n\t\tif [[ "${libtorrent_version_hpp}" =~ ^2\\. ]]; then\r\n\t\t\tlt_version_options=()\r\n\t\t\tlibtorrent_libs="-l:libboost_system.a -l:${libtorrent_library_filename} -l:libtry_signal.a ${arm_libatomic}"\r\n\t\t\tlt_cmake_flags="-DTORRENT_USE_LIBCRYPTO -DTORRENT_USE_OPENSSL -DTORRENT_USE_I2P=1 -DBOOST_ALL_NO_LIB -DBOOST_ASIO_ENABLE_CANCELIO -DBOOST_ASIO_HAS_STD_CHRONO -DBOOST_MULTI_INDEX_DISABLE_SERIALIZATION -DBOOST_SYSTEM_NO_DEPRECATED -DBOOST_SYSTEM_STATIC_LINK=1 -DTORRENT_SSL_PEERS -DBOOST_ASIO_NO_DEPRECATED"\r\n\t\telse\r\n\t\t\tlt_version_options=("iconv=on")\r\n\t\t\tlibtorrent_libs="-l:libboost_system.a -l:${libtorrent_library_filename} ${arm_libatomic} -l:libiconv.a"\r\n\t\t\tlt_cmake_flags="-DTORRENT_USE_LIBCRYPTO -DTORRENT_USE_OPENSSL -DTORRENT_USE_I2P=1 -DBOOST_ALL_NO_LIB -DBOOST_ASIO_ENABLE_CANCELIO -DBOOST_ASIO_HAS_STD_CHRONO -DBOOST_MULTI_INDEX_DISABLE_SERIALIZATION -DBOOST_SYSTEM_NO_DEPRECATED -DBOOST_SYSTEM_STATIC_LINK=1 -DTORRENT_USE_ICONV=1"\r\n\t\tfi\r\n\r\n\t\t"${qbt_install_dir}/boost/b2" "${multi_libtorrent[@]}" -j"$(nproc)" "${lt_version_options[@]}" address-model="${bitness:-$(getconf LONG_BIT)}" "${qbt_libtorrent_debug}" optimization=speed cxxstd="${qbt_standard}" dht=on encryption=on crypto=openssl i2p=on extensions=on variant=release threading=multi link=static boost-link=static cxxflags="${CXXFLAGS}" cflags="${CPPFLAGS}" linkflags="${LDFLAGS}" install --prefix="${qbt_install_dir}" |& _tee "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\t_post_command build\r\n\t\tlibtorrent_strings_version="$(strings -d "${lib_dir}/${libtorrent_library_filename}" | grep -Eom1 "^libtorrent/[0-9]\\.(.*)")" # ${libtorrent_strings_version#*/}\r\n\t\tcat > "${PKG_CONFIG_PATH}/libtorrent-rasterbar.pc" <<- LIBTORRENT_PKG_CONFIG\r\n\t\t\tprefix=${qbt_install_dir}\r\n\t\t\tlibdir=\\${prefix}/lib\r\n\t\t\tincludedir=\\${prefix}/include\r\n\r\n\t\t\tName: libtorrent-rasterbar\r\n\t\t\tDescription: The libtorrent-rasterbar libraries\r\n\t\t\tVersion: ${libtorrent_strings_version#*/}\r\n\r\n\t\t\tRequires:\r\n\t\t\tLibs: -L\\${libdir} ${libtorrent_libs}\r\n\t\t\tCflags: -I\\${includedir} -I${BOOST_ROOT} ${lt_cmake_flags}\r\n\t\tLIBTORRENT_PKG_CONFIG\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# shellcheck disable=SC2317\r\n_double_conversion() {\r\n\tif [[ "${qbt_build_tool}" == \'cmake\' && "${qbt_qt_version}" =~ ^6 ]]; then\r\n\t\tmkdir -p "${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}"\r\n\t\tcmake -Wno-dev -Wno-deprecated --graphviz="${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}/dep-graph.dot" -G Ninja -B build \\\r\n\t\t\t"${multi_double_conversion[@]}" \\\r\n\t\t\t-D CMAKE_VERBOSE_MAKEFILE="${qbt_cmake_debug}" \\\r\n\t\t\t-D CMAKE_PREFIX_PATH="${qbt_install_dir}" \\\r\n\t\t\t-D CMAKE_CXX_FLAGS="${CXXFLAGS}" \\\r\n\t\t\t-D CMAKE_INSTALL_LIBDIR=lib \\\r\n\t\t\t-D BUILD_SHARED_LIBS=OFF \\\r\n\t\t\t-D CMAKE_INSTALL_PREFIX="${qbt_install_dir}" |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tcmake --build build |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tcmake --install build |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\t_post_command build\r\n\t\tdot -Tpng -o "${qbt_install_dir}/completed/${app_name}-graph.png" "${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}/dep-graph.dot"\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# shellcheck disable=SC2317\r\n_qtbase() {\r\n\r\n\tcat > "mkspecs/${qbt_cross_qtbase}/qmake.conf" <<- QT_MKSPECS\r\n\t\tMAKEFILE_GENERATOR      = UNIX\r\n\t\tCONFIG                 += incremental\r\n\t\tQMAKE_INCREMENTAL_STYLE = sublib\r\n\r\n\t\tinclude(../common/linux.conf)\r\n\tQT_MKSPECS\r\n\r\n\tif [[ "${qbt_cross_name}" =~ ^(x86|x86_64)$ ]]; then\r\n\t\tcat >> "mkspecs/${qbt_cross_qtbase}/qmake.conf" <<- QT_MKSPECS\r\n\r\n\t\t\tQMAKE_CFLAGS            = -m${bitness:-$(getconf LONG_BIT)}\r\n\t\t\tQMAKE_LFLAGS            = -m${bitness:-$(getconf LONG_BIT)}\r\n\r\n\t\tQT_MKSPECS\r\n\tfi\r\n\r\n\tcat >> "mkspecs/${qbt_cross_qtbase}/qmake.conf" <<- QT_MKSPECS\r\n\t\tinclude(../common/gcc-base-unix.conf)\r\n\t\tinclude(../common/g++-unix.conf)\r\n\r\n\t\t# modifications to g++.conf\r\n\t\tQMAKE_CC                = ${qbt_cross_host}-gcc\r\n\t\tQMAKE_CXX               = ${qbt_cross_host}-g++\r\n\t\tQMAKE_LINK              = ${qbt_cross_host}-g++\r\n\t\tQMAKE_LINK_SHLIB        = ${qbt_cross_host}-g++\r\n\r\n\t\t# modifications to linux.conf\r\n\t\tQMAKE_AR                = ${qbt_cross_host}-ar cqs\r\n\t\tQMAKE_OBJCOPY           = ${qbt_cross_host}-objcopy\r\n\t\tQMAKE_NM                = ${qbt_cross_host}-nm -P\r\n\t\tQMAKE_STRIP             = ${qbt_cross_host}-strip\r\n\r\n\t\tload(qt_config)\r\n\tQT_MKSPECS\r\n\r\n\tif [[ "${qbt_build_tool}" == \'cmake\' && "${qbt_qt_version}" =~ ^6 ]]; then\r\n\t\tmkdir -p "${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}"\r\n\t\tcmake -Wno-dev -Wno-deprecated --graphviz="${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}/dep-graph.dot" -G Ninja -B build \\\r\n\t\t\t"${multi_libtorrent[@]}" \\\r\n\t\t\t-D CMAKE_VERBOSE_MAKEFILE="${qbt_cmake_debug}" \\\r\n\t\t\t-D CMAKE_BUILD_TYPE="release" \\\r\n\t\t\t-D QT_FEATURE_optimize_full=on -D QT_FEATURE_static=on -D QT_FEATURE_shared=off \\\r\n\t\t\t-D QT_FEATURE_gui=off -D QT_FEATURE_openssl_linked=on -D QT_FEATURE_dbus=off \\\r\n\t\t\t-D QT_FEATURE_system_pcre2=off -D QT_FEATURE_widgets=off \\\r\n\t\t\t-D FEATURE_androiddeployqt=OFF -D FEATURE_animation=OFF \\\r\n\t\t\t-D QT_FEATURE_testlib=off -D QT_BUILD_EXAMPLES=off -D QT_BUILD_TESTS=off \\\r\n\t\t\t-D QT_BUILD_EXAMPLES_BY_DEFAULT=OFF -D QT_BUILD_TESTS_BY_DEFAULT=OFF \\\r\n\t\t\t-D CMAKE_CXX_STANDARD="${qbt_standard}" \\\r\n\t\t\t-D CMAKE_PREFIX_PATH="${qbt_install_dir}" \\\r\n\t\t\t-D CMAKE_CXX_FLAGS="${CXXFLAGS}" \\\r\n\t\t\t-D BUILD_SHARED_LIBS=OFF \\\r\n\t\t\t-D CMAKE_SKIP_RPATH=on -D CMAKE_SKIP_INSTALL_RPATH=on \\\r\n\t\t\t-D CMAKE_INSTALL_PREFIX="${qbt_install_dir}" |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tcmake --build build |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\t_post_command build\r\n\t\tcmake --install build |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tdot -Tpng -o "${qbt_install_dir}/completed/${app_name}-graph.png" "${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}/dep-graph.dot"\r\n\telif [[ "${qbt_qt_version}" =~ ^5 ]]; then\r\n\t\tif [[ "${qbt_skip_icu}" == "no" ]]; then\r\n\t\t\ticu=("-icu" "-no-iconv" "QMAKE_CXXFLAGS=-w -fpermissive")\r\n\t\telse\r\n\t\t\ticu=("-no-icu" "-iconv" "QMAKE_CXXFLAGS=-w -fpermissive")\r\n\t\tfi\r\n\t\t# Fix 5.15.4 to build on gcc 11\r\n\t\tsed \'/^#  include <utility>/a #  include <limits>\' -i "src/corelib/global/qglobal.h"\r\n\t\t# Don\'t strip by default by disabling these options. We will set it as off by default and use it with a switch\r\n\t\tprintf \'%b\\n\' "CONFIG                 += ${qbt_strip_qmake}" >> "mkspecs/common/linux.conf"\r\n\t\t./configure "${multi_qtbase[@]}" -prefix "${qbt_install_dir}" "${icu[@]}" -opensource -confirm-license -release \\\r\n\t\t\t-openssl-linked -static -c++std "${qbt_cxx_standard}" -qt-pcre \\\r\n\t\t\t-no-feature-glib -no-feature-opengl -no-feature-dbus -no-feature-gui -no-feature-widgets -no-feature-testlib -no-compile-examples \\\r\n\t\t\t-skip tests -nomake tests -skip examples -nomake examples \\\r\n\t\t\t-I "${include_dir}" -L "${lib_dir}" QMAKE_LFLAGS="${LDFLAGS}" |& _tee "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tmake -j"$(nproc)" |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\t_post_command build\r\n\t\tmake install |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\telse\r\n\t\tprintf \'\\n%b\\n\' " ${unicode_red_circle} Please use a correct qt and build tool combination"\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_green_circle} qt5 + qmake ${unicode_green_circle} qt6 + cmake ${unicode_red_circle} qt5 + cmake ${unicode_red_circle} qt6 + qmake"\r\n\t\texit 1\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# shellcheck disable=SC2317\r\n_qttools() {\r\n\tif [[ "${qbt_build_tool}" == \'cmake\' && "${qbt_qt_version}" =~ ^6 ]]; then\r\n\t\tmkdir -p "${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}"\r\n\t\tcmake -Wno-dev -Wno-deprecated --graphviz="${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}/dep-graph.dot" -G Ninja -B build \\\r\n\t\t\t"${multi_libtorrent[@]}" \\\r\n\t\t\t-D CMAKE_VERBOSE_MAKEFILE="${qbt_cmake_debug}" \\\r\n\t\t\t-D CMAKE_BUILD_TYPE="release" \\\r\n\t\t\t-D CMAKE_CXX_STANDARD="${qbt_standard}" \\\r\n\t\t\t-D CMAKE_PREFIX_PATH="${qbt_install_dir}" \\\r\n\t\t\t-D CMAKE_CXX_FLAGS="${CXXFLAGS}" \\\r\n\t\t\t-D BUILD_SHARED_LIBS=OFF \\\r\n\t\t\t-D CMAKE_SKIP_RPATH=on -D CMAKE_SKIP_INSTALL_RPATH=on \\\r\n\t\t\t-D CMAKE_INSTALL_PREFIX="${qbt_install_dir}" |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tcmake --build build |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\t_post_command build\r\n\t\tcmake --install build |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tdot -Tpng -o "${qbt_install_dir}/completed/${app_name}-graph.png" "${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}/dep-graph.dot"\r\n\telif [[ "${qbt_qt_version}" =~ ^5 ]]; then\r\n\t\t"${qbt_install_dir}/bin/qmake" -set prefix "${qbt_install_dir}" |& _tee "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\t"${qbt_install_dir}/bin/qmake" QMAKE_CXXFLAGS="-std=${qbt_cxx_standard} -static -w -fpermissive" QMAKE_LFLAGS="-static" |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tmake -j"$(nproc)" |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\t_post_command build\r\n\t\tmake install |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\telse\r\n\t\tprintf \'\\n%b\\n\' " ${unicode_red_circle} Please use a correct qt and build tool combination"\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_green_circle} qt5 + qmake ${unicode_green_circle} qt6 + cmake ${unicode_red_circle} qt5 + cmake ${unicode_red_circle} qt6 + qmake"\r\n\t\texit 1\r\n\tfi\r\n}\r\n#######################################################################################################################################################\r\n# shellcheck disable=SC2317\r\n_qbittorrent() {\r\n\t[[ "${os_id}" =~ ^(alpine)$ ]] && stacktrace="OFF"\r\n\r\n\tif [[ "${qbt_build_tool}" == \'cmake\' ]]; then\r\n\t\tmkdir -p "${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}"\r\n\t\tcmake -Wno-dev -Wno-deprecated --graphviz="${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}/dep-graph.dot" -G Ninja -B build \\\r\n\t\t\t"${multi_qbittorrent[@]}" \\\r\n\t\t\t-D CMAKE_VERBOSE_MAKEFILE="${qbt_cmake_debug}" \\\r\n\t\t\t-D CMAKE_BUILD_TYPE="release" \\\r\n\t\t\t-D QT6="${qbt_use_qt6}" \\\r\n\t\t\t-D STACKTRACE="${stacktrace:-ON}" \\\r\n\t\t\t-D CMAKE_CXX_STANDARD="${qbt_standard}" \\\r\n\t\t\t-D CMAKE_PREFIX_PATH="${qbt_install_dir};${qbt_install_dir}/boost" \\\r\n\t\t\t-D Boost_NO_BOOST_CMAKE=TRUE \\\r\n\t\t\t-D CMAKE_CXX_FLAGS="${CXXFLAGS}" \\\r\n\t\t\t-D Iconv_LIBRARY="${lib_dir}/libiconv.a" \\\r\n\t\t\t-D GUI=OFF \\\r\n\t\t\t-D CMAKE_INSTALL_PREFIX="${qbt_install_dir}" |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tcmake --build build |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\t_post_command build\r\n\t\tcmake --install build |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tdot -Tpng -o "${qbt_install_dir}/completed/${app_name}-graph.png" "${qbt_install_dir}/graphs/${app_name}/${app_version["${app_name}"]}/dep-graph.dot"\r\n\telse\r\n\t\t./bootstrap.sh |& _tee "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\t./configure \\\r\n\t\t\tQT_QMAKE="${qbt_install_dir}/bin" \\\r\n\t\t\t--prefix="${qbt_install_dir}" \\\r\n\t\t\t"${multi_qbittorrent[@]}" \\\r\n\t\t\t"${qbt_qbittorrent_debug}" \\\r\n\t\t\t--disable-gui \\\r\n\t\t\tCXXFLAGS="${CXXFLAGS}" CPPFLAGS="${CPPFLAGS}" LDFLAGS="${LDFLAGS}" \\\r\n\t\t\t--with-boost="${qbt_install_dir}/boost" --with-boost-libdir="${lib_dir}" |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\tmake -j"$(nproc)" |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\t\t_post_command build\r\n\t\tmake install |& _tee -a "${qbt_install_dir}/logs/${app_name}.log"\r\n\tfi\r\n\r\n\t[[ -f "${qbt_install_dir}/bin/qbittorrent-nox" ]] && cp -f "${qbt_install_dir}/bin/qbittorrent-nox" "${qbt_install_dir}/completed/qbittorrent-nox"\r\n}\r\n#######################################################################################################################################################\r\n# A module installer loop. This will loop through the activated modules and install them via their corresponding functions\r\n#######################################################################################################################################################\r\nfor app_name in "${qbt_modules[@]}"; do\r\n\tif [[ "${qbt_cache_dir_options}" != "bs" ]] && [[ ! -d "${qbt_install_dir}/boost" && "${app_name}" =~ (libtorrent|qbittorrent) ]]; then\r\n\t\tprintf \'\\n%b\\n\\n\' " ${unicode_red_circle}${color_red_light} Warning${color_end} This module depends on the boost module. Use them together: ${color_magenta_light}boost ${app_name}${color_end}"\r\n\telse\r\n\t\tif [[ "${skip_modules["${app_name}"]}" == "no" ]]; then\r\n\t\t\t############################################################\r\n\t\t\tskipped_false=$((skipped_false + 1))\r\n\t\t\t############################################################\r\n\t\t\tif command -v "_${app_name}_bootstrap" &> /dev/null; then\r\n\t\t\t\t"_${app_name}_bootstrap"\r\n\t\t\tfi\r\n\t\t\t########################################################\r\n\t\t\tif [[ "${app_name}" =~ (glibc|iconv|icu) ]]; then\r\n\t\t\t\t_custom_flags_reset\r\n\t\t\telse\r\n\t\t\t\t_custom_flags_set\r\n\t\t\tfi\r\n\t\t\t############################################################\r\n\t\t\t_download\r\n\t\t\t############################################################\r\n\t\t\t[[ "${qbt_cache_dir_options}" == "bs" && "${skipped_false}" -eq "${#qbt_modules[@]}" ]] && printf \'\\n\'\r\n\t\t\t[[ "${qbt_cache_dir_options}" == "bs" ]] && continue\r\n\t\t\t############################################################\r\n\t\t\t_apply_patches\r\n\t\t\t############################################################\r\n\t\t\t"_${app_name}"\r\n\t\t\t############################################################\r\n\t\t\t_fix_static_links\r\n\t\t\t[[ "${app_name}" != "boost" ]] && _delete_function\r\n\t\tfi\r\n\r\n\t\tif [[ "${#qbt_modules_skipped[@]}" -gt \'0\' ]]; then\r\n\t\t\tprintf \'\\n\'\r\n\t\t\tprintf \'%b\' " ${unicode_magenta_light_circle} Activated:"\r\n\t\t\tfor skipped_true in "${qbt_modules_skipped[@]}"; do\r\n\t\t\t\tprintf \'%b\' " ${color_cyan_light}${skipped_true}${color_end}"\r\n\t\t\tdone\r\n\t\t\tprintf \'\\n\'\r\n\t\tfi\r\n\r\n\t\t[[ "${skipped_false}" -eq "${#qbt_modules[@]}" ]] && printf \'\\n\'\r\n\tfi\r\n\t_pushd "${qbt_working_dir}"\r\ndone\r\n#######################################################################################################################################################\r\n# We are all done so now exit\r\n#######################################################################################################################################################\r\nexit\r\n\n'})})]})}function d(t={}){const{wrapper:r}={...(0,o.R)(),...t.components};return r?(0,e.jsx)(r,{...t,children:(0,e.jsx)(c,{...t})}):c(t)}},8453:(t,r,n)=>{n.d(r,{R:()=>l,x:()=>_});var e=n(6540);const o={},i=e.createContext(o);function l(t){const r=e.useContext(i);return e.useMemo((function(){return"function"==typeof t?t(r):{...r,...t}}),[r,t])}function _(t){let r;return r=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:l(t.components),e.createElement(i.Provider,{value:r},t.children)}}}]);