"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[662],{7741:(r,n,e)=>{e.r(n),e.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var t=e(4848),s=e(8453);const i={title:"yolo",hide_title:!0},o=void 0,a={id:"yolo",title:"yolo",description:"",source:"@site/docs/yolo.md",sourceDirName:".",slug:"/yolo",permalink:"/docusaurus-aura-theme/docs/yolo",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/yolo.md",tags:[],version:"current",frontMatter:{title:"yolo",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"yaml",permalink:"/docusaurus-aura-theme/docs/yaml"}},u={},c=[];function l(r){const n={code:"code",pre:"pre",...(0,s.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'// @ts-check\r\n// `@type` JSDoc annotations allow editor autocompletion and type checking\r\n// (when paired with `@ts-check`).\r\n// There are various equivalent ways to declare your Docusaurus config.\r\n// See: https://docusaurus.io/docs/api/docusaurus-config\r\n\r\n"https://docusaurus.io/docs/api/docusaurus-config";\r\n\r\n// import lightCodeTheme from "./src/prism/themes/aura/aura-soft-dark-color-theme.js";\r\n// import darkCodeTheme from "./src/prism/themes/aura/aura-soft-dark-color-theme.js";\r\n// import darkCodeTheme from "./src/prism/themes/OneDark-Pro/OneDark-Pro.js";\r\n\r\nimport { themes as prismThemes } from "prism-react-renderer";\r\n// import PrismDark from "./src/utils/prismDark";\r\nimport PrismDark from "./src/prism/themes/github.ts";\r\n\r\n/** @type {import(\'@docusaurus/types\').Config} */\r\nconst config = {\r\n  title: "My Site",\r\n  tagline: "Dinosaurs are cool",\r\n  favicon: "img/favicon.ico",\r\n\r\n  // Set the production url of your site here\r\n  url: "https://your-docusaurus-site.example.com",\r\n  // Set the /<baseUrl>/ pathname under which your site is served\r\n  // For GitHub pages deployment, it is often \'/<projectName>/\'\r\n  baseUrl: "/",\r\n\r\n  // GitHub pages deployment config.\r\n  // If you aren\'t using GitHub pages, you don\'t need these.\r\n  organizationName: "facebook", // Usually your GitHub org/user name.\r\n  projectName: "docusaurus", // Usually your repo name.\r\n\r\n  onBrokenLinks: "throw",\r\n  onBrokenMarkdownLinks: "warn",\r\n\r\n  // Even if you don\'t use internationalization, you can use this field to set\r\n  // useful metadata like html lang. For example, if your site is Chinese, you\r\n  // may want to replace "en" with "zh-Hans".\r\n  i18n: {\r\n    defaultLocale: "en",\r\n    locales: ["en"],\r\n  },\r\n\r\n  presets: [\r\n    [\r\n      "classic",\r\n      /** @type {import(\'@docusaurus/preset-classic\').Options} */\r\n      ({\r\n        docs: {\r\n          sidebarPath: "./sidebars.js",\r\n          // Please change this to your repo.\r\n          // Remove this to remove the "edit this page" links.\r\n          editUrl:\r\n            "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/",\r\n        },\r\n        blog: {\r\n          showReadingTime: true,\r\n          // Please change this to your repo.\r\n          // Remove this to remove the "edit this page" links.\r\n          editUrl:\r\n            "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/",\r\n        },\r\n        theme: {\r\n          customCss: "./src/css/custom.css",\r\n        },\r\n      }),\r\n    ],\r\n  ],\r\n\r\n  themeConfig:\r\n    /** @type {import(\'@docusaurus/preset-classic\').ThemeConfig} */\r\n    ({\r\n      // Replace with your project\'s social card\r\n      image: "img/docusaurus-social-card.jpg",\r\n      navbar: {\r\n        title: "My Site",\r\n        logo: {\r\n          alt: "My Site Logo",\r\n          src: "img/logo.svg",\r\n        },\r\n        items: [\r\n          {\r\n            type: "docSidebar",\r\n            sidebarId: "tutorialSidebar",\r\n            position: "left",\r\n            label: "Tutorial",\r\n          },\r\n          { to: "/blog", label: "Blog", position: "left" },\r\n          {\r\n            href: "https://github.com/facebook/docusaurus",\r\n            label: "GitHub",\r\n            position: "right",\r\n          },\r\n        ],\r\n      },\r\n      footer: {\r\n        style: "dark",\r\n        links: [\r\n          {\r\n            title: "Docs",\r\n            items: [\r\n              {\r\n                label: "Tutorial",\r\n                to: "/docs/intro",\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            title: "Community",\r\n            items: [\r\n              {\r\n                label: "Stack Overflow",\r\n                href: "https://stackoverflow.com/questions/tagged/docusaurus",\r\n              },\r\n              {\r\n                label: "Discord",\r\n                href: "https://discordapp.com/invite/docusaurus",\r\n              },\r\n              {\r\n                label: "Twitter",\r\n                href: "https://twitter.com/docusaurus",\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            title: "More",\r\n            items: [\r\n              {\r\n                label: "Blog",\r\n                to: "/blog",\r\n              },\r\n              {\r\n                label: "GitHub",\r\n                href: "https://github.com/facebook/docusaurus",\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n        copyright: `Copyright \xa9 ${new Date().getFullYear()} My Project, Inc. Built with Docusaurus.`,\r\n      },\r\n      prism: {\r\n        theme: prismThemes.github,\r\n        darkTheme: PrismDark,\r\n        additionalLanguages: ["bash"],\r\n      },\r\n    }),\r\n};\r\n\r\nexport default config;\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# CI triggered on pushes to the build script. Tests on x86_64 Debian buster/sid Ubuntu Focal/hirsute to make sure it all works on these platforms.\r\ndebian_based_CI.yml\r\n\r\n # qbittorrent-nox qmake, cmake, libtorrent v1 and v2 multi build and release across these architectures - x86_64 armhf armv7 aarch64 cross built via musl prebuilt toolchains. 32 builds are created. 16 per release.\r\nmatrix_multi_build_and_release.yml\r\n\r\n# Same as above but with options to specificy tags so that I can update previous releases.\r\nmatrix_multi_build_and_release_customs_tags.yml\r\n\r\n# Uses https://github.com/userdocs/qbt-workflow-file to create artifacts of dependencies for the worklows.\r\nmatrix_multi_build_and_release_artifacts.yml\r\n\r\n\r\n# Uses https://github.com/userdocs/qbt-workflow-file as a source for dependencies for the worklows.\r\nmatrix_multi_build_and_release_qbt_workflow_files.yml\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"permissions:\r\n  contents: write\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",metastring:'title=".github/workflows/deploy.yml"',children:"name: Deploy to GitHub Pages\r\n\r\non:\r\n  pull_request:\r\n    branches: [main]\r\n  push:\r\n    branches: [main]\r\n\r\npermissions:\r\n  contents: write\r\n\r\njobs:\r\n  test-deploy:\r\n    if: github.event_name != 'push'\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v4\r\n        with:\r\n          fetch-depth: 0\r\n      - uses: actions/setup-node@v4\r\n        with:\r\n          node-version: 18\r\n          cache: yarn\r\n      - name: Install dependencies\r\n        run: yarn install --frozen-lockfile\r\n      - name: Test build website\r\n        run: yarn build\r\n  deploy:\r\n    if: github.event_name != 'pull_request'\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v4\r\n        with:\r\n          fetch-depth: 0\r\n      - uses: actions/setup-node@v4\r\n        with:\r\n          node-version: 18\r\n          cache: yarn\r\n      - uses: webfactory/ssh-agent@v0.5.0\r\n        with:\r\n          ssh-private-key: ${{ secrets.GH_PAGES_DEPLOY }}\r\n      - name: Deploy to GitHub Pages\r\n        env:\r\n          USE_SSH: true\r\n        run: |\r\n          git config --global user.email \"actions@github.com\"\r\n          git config --global user.name \"gh-actions\"\r\n          yarn install --frozen-lockfile\r\n          yarn deploy\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",metastring:'title=".github/workflows/deploy.yml"',children:"name: Deploy to GitHub Pages\r\n\r\non:\r\n  push:\r\n    branches:\r\n      - main\r\n    # Review gh actions docs if you want to further define triggers, paths, etc\r\n    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on\r\n\r\npermissions:\r\n  contents: write\r\n\r\njobs:\r\n  deploy:\r\n    name: Deploy to GitHub Pages\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v4\r\n        with:\r\n          fetch-depth: 0\r\n      - uses: actions/setup-node@v4\r\n        with:\r\n          node-version: 18\r\n          cache: yarn\r\n\r\n      - name: Install dependencies\r\n        run: yarn install --frozen-lockfile\r\n      - name: Build website\r\n        run: yarn build\r\n\r\n      # Popular action to deploy to GitHub Pages:\r\n      # Docs: https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-docusaurus\r\n      - name: Deploy to GitHub Pages\r\n        uses: peaceiris/actions-gh-pages@v3\r\n        with:\r\n          github_token: ${{ secrets.GITHUB_TOKEN }}\r\n          # Build output to publish to the `gh-pages` branch:\r\n          publish_dir: ./build\r\n          # The following lines assign commit authorship to the official\r\n          # GH-Actions bot for deploys to `gh-pages` branch:\r\n          # https://github.com/actions/checkout/issues/13#issuecomment-724415212\r\n          # The GH actions bot is used by default if you didn't specify the two fields.\r\n          # You can swap them out with your own user credentials.\r\n          user_name: github-actions[bot]\r\n          user_email: 41898282+github-actions[bot]@users.noreply.github.com\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",metastring:'title=".github/workflows/test-deploy.yml"',children:"name: Test deployment\r\n\r\non:\r\n  pull_request:\r\n    branches:\r\n      - main\r\n    # Review gh actions docs if you want to further define triggers, paths, etc\r\n    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on\r\n\r\njobs:\r\n  test-deploy:\r\n    name: Test deployment\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v4\r\n        with:\r\n          fetch-depth: 0\r\n      - uses: actions/setup-node@v4\r\n        with:\r\n          node-version: 18\r\n          cache: yarn\r\n\r\n      - name: Install dependencies\r\n        run: yarn install --frozen-lockfile\r\n      - name: Test build website\r\n        run: yarn build\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// Original: https://raw.githubusercontent.com/PrismJS/prism-themes/master/themes/prism-ghcolors.css\r\nimport type { PrismTheme } from "../types";\r\nconst theme: PrismTheme = {\r\n  plain: {\r\n    color: "#393A34",\r\n    backgroundColor: "#f6f8fa",\r\n  },\r\n  styles: [\r\n    {\r\n      types: ["comment", "prolog", "doctype", "cdata"],\r\n      style: {\r\n        color: "#999988",\r\n        fontStyle: "italic",\r\n      },\r\n    },\r\n    {\r\n      types: ["namespace"],\r\n      style: {\r\n        opacity: 0.7,\r\n      },\r\n    },\r\n    {\r\n      types: ["string", "attr-value"],\r\n      style: {\r\n        color: "#e3116c",\r\n      },\r\n    },\r\n    {\r\n      types: ["punctuation", "operator"],\r\n      style: {\r\n        color: "#393A34",\r\n      },\r\n    },\r\n    {\r\n      types: [\r\n        "entity",\r\n        "url",\r\n        "symbol",\r\n        "number",\r\n        "boolean",\r\n        "variable",\r\n        "constant",\r\n        "property",\r\n        "regex",\r\n        "inserted",\r\n      ],\r\n      style: {\r\n        color: "#36acaa",\r\n      },\r\n    },\r\n    {\r\n      types: ["atrule", "keyword", "attr-name", "selector"],\r\n      style: {\r\n        color: "#00a4db",\r\n      },\r\n    },\r\n    {\r\n      types: ["function", "deleted", "tag"],\r\n      style: {\r\n        color: "#d73a49",\r\n      },\r\n    },\r\n    {\r\n      types: ["function-variable"],\r\n      style: {\r\n        color: "#6f42c1",\r\n      },\r\n    },\r\n    {\r\n      types: ["tag", "selector", "keyword"],\r\n      style: {\r\n        color: "#00009f",\r\n      },\r\n    },\r\n  ],\r\n};\r\nexport default theme;\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# @credits https://github.com/c0re100/qBittorrent-Enhanced-Edition\r\nname: matrix multi build and release - qbt-workflow-files\r\n\r\non:\r\n  workflow_dispatch:\r\n    inputs:\r\n      distinct_id:\r\n        description: "Distinct id"\r\n      skip_rerun:\r\n        description: "Skip rerun?"\r\n        required: true\r\n        default: true\r\n        type: boolean\r\n      retries:\r\n        description: "Number of rerun retries"\r\n        required: true\r\n        default: "1"\r\n        type: choice\r\n        options: ["1", "2", "3", "4", "5", "6", "7", "8", "9"]\r\n\r\nconcurrency:\r\n  group: ${{ github.workflow }}-${{ github.ref }}\r\n  cancel-in-progress: true\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    strategy:\r\n      fail-fast: false\r\n      matrix:\r\n        os_id: [alpine]\r\n        os_version_id: [edge]\r\n        # qbt_cross_name: [armel,armhf,armv7,aarch64,x86_64,x86,s390x,powerpc,ppc64el,mips,mipsel,mips64,mips64el,riscv64]\r\n        qbt_cross_name: ["armhf", "armv7", "aarch64", "x86_64", "x86"]\r\n        qbt_libtorrent_version: ["1.2", "2.0"]\r\n        qbt_build_tool: ["", "cmake"]\r\n        include:\r\n          - qbt_build_tool: ""\r\n            qbt_qt_version_name: "qt5-"\r\n            qbt_qt_version: "5"\r\n\r\n          - qbt_build_tool: "cmake"\r\n            qbt_qt_version_name: ""\r\n            qbt_qt_version: "6"\r\n\r\n    name: "${{ matrix.qbt_cross_name }}-${{ matrix.qbt_qt_version_name }}libtorrent-v${{ matrix.qbt_libtorrent_version }}"\r\n\r\n    env:\r\n      qbt_build_dir: "qbt-build"\r\n\r\n    steps:\r\n      - name: Checkout ${{ github.event.inputs.distinct_id }}\r\n        uses: actions/checkout@v4\r\n\r\n      - name: Host - phased updates ${{ github.event.inputs.distinct_id }}\r\n        run: printf \'%s\\n\' \'APT::Get::Always-Include-Phased-Updates "false";\' | sudo tee /etc/apt/apt.conf.d/99-phased-updates\r\n\r\n      - name: Host - set up lunar repo -t lunar ${{ github.event.inputs.distinct_id }}\r\n        run: |\r\n          printf \'%b\\n\' \'Package: *\\nPin: release n=lunar\\nPin-Priority: 50\' | sudo tee /etc/apt/preferences\r\n          printf \'%b\\n\' \'deb http://archive.ubuntu.com/ubuntu/ lunar main universe restricted\' | sudo tee /etc/apt/sources.list.d/lunar.list\r\n\r\n      - name: Host - update ${{ github.event.inputs.distinct_id }}\r\n        run: sudo apt-get update\r\n\r\n      - name: Host - upgrade ${{ github.event.inputs.distinct_id }}\r\n        run: sudo apt-get -y upgrade\r\n\r\n      - name: Host - set up qemu-user-static binfmt-support from lunar ${{ github.event.inputs.distinct_id }}\r\n        run: sudo apt install -t lunar libpipeline1 qemu-user-static binfmt-support\r\n\r\n      - name: Host - Create Docker template env file ${{ github.event.inputs.distinct_id }}\r\n        run: |\r\n          printf \'%s\\n\' "qbt_libtorrent_version=${{ matrix.qbt_libtorrent_version }}" > env.custom\r\n          printf \'%s\\n\' "qbt_qt_version=${{ matrix.qbt_qt_version }}" >> env.custom\r\n          printf \'%s\\n\' "qbt_build_tool=${{ matrix.qbt_build_tool }}" >> env.custom\r\n          printf \'%s\\n\' "qbt_cross_name=${{ matrix.qbt_cross_name }}" >> env.custom\r\n          printf \'%s\\n\' "qbt_patches_url=${{ github.repository }}" >> env.custom\r\n          printf \'%s\\n\' "qbt_skip_icu=yes" >> env.custom\r\n          printf \'%s\\n\' "qbt_boost_tag=" >> env.custom\r\n          printf \'%s\\n\' "qbt_libtorrent_tag=" >> env.custom\r\n          printf \'%s\\n\' "qbt_qt_tag=" >> env.custom\r\n          printf \'%s\\n\' "qbt_qbittorrent_tag=" >> env.custom\r\n          printf \'%s\\n\' "qbt_libtorrent_master_jamfile=no" >> env.custom\r\n          printf \'%s\\n\' "qbt_workflow_files=yes" >> env.custom\r\n          printf \'%s\\n\' "qbt_workflow_artifacts=no" >> env.custom\r\n          printf \'%s\\n\' "qbt_cache_dir=" >> env.custom\r\n          printf \'%s\\n\' "qbt_optimise_strip=yes" >> env.custom\r\n          printf \'%s\\n\' "qbt_build_debug=no" >> env.custom\r\n          printf \'%s\\n\' "qbt_revision_url=${{ github.repository }}" >> env.custom\r\n          printf \'%s\\n\' "qbt_standard=17" >> env.custom\r\n          printf \'%s\\n\' "qbt_static_ish=no" >> env.custom\r\n\r\n      - name: Host - Create docker multiarch container ${{ github.event.inputs.distinct_id }}\r\n        run: docker run --name multiarch -it -d --env-file env.custom -w /root -v ${{ github.workspace }}:/root ${{ matrix.os_id }}:${{ matrix.os_version_id }}\r\n\r\n      - name: Docker - apk update ${{ github.event.inputs.distinct_id }}\r\n        run: docker exec -w /root multiarch apk update\r\n\r\n      - name: Docker - apk install bash ${{ github.event.inputs.distinct_id }}\r\n        run: docker exec -w /root multiarch apk add bash\r\n\r\n      - name: Docker - Bootstrap ${{ github.event.inputs.distinct_id }}\r\n        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh -bs-a\r\n\r\n      - name: Docker - Copy repo patches to build folder ${{ github.event.inputs.distinct_id }}\r\n        run: if [[ -d patches ]]; then docker exec -w /root multiarch cp -r patches/* /root/${{ env.qbt_build_dir }}/patches; fi\r\n\r\n      - name: Docker - zlib-ng ${{ github.event.inputs.distinct_id }}\r\n        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh zlib\r\n\r\n      - name: Docker - iconv ${{ github.event.inputs.distinct_id }}\r\n        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh iconv\r\n\r\n      - name: Docker - icu ${{ github.event.inputs.distinct_id }}\r\n        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh icu\r\n\r\n      - name: Docker - openssl ${{ github.event.inputs.distinct_id }}\r\n        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh openssl\r\n\r\n      - name: Docker - boost ${{ github.event.inputs.distinct_id }}\r\n        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh boost\r\n\r\n      - name: Docker - libtorrent ${{ github.event.inputs.distinct_id }}\r\n        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh libtorrent\r\n\r\n      - name: Docker - double_conversion ${{ github.event.inputs.distinct_id }}\r\n        if: matrix.qbt_build_tool == \'cmake\'\r\n        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh double_conversion\r\n\r\n      - name: Docker - qtbase ${{ github.event.inputs.distinct_id }}\r\n        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh qtbase\r\n\r\n      - name: Docker - qttools ${{ github.event.inputs.distinct_id }}\r\n        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh qttools\r\n\r\n      - name: Docker - qbittorrent ${{ github.event.inputs.distinct_id }}\r\n        run: docker exec -w /root multiarch bash qbittorrent-nox-static.sh qbittorrent\r\n\r\n      - name: Host - qBittorrent v5 transition\r\n        run: |\r\n          # When qBittorrent v5 is released, remove this\r\n          if [[ -f ${{ env.qbt_build_dir }}/release_info/disable-qt5 ]]; then\r\n            printf \'%s\\n\' "disable_qt5=yes" >> $GITHUB_ENV\r\n          fi\r\n\r\n      - name: Docker - Set release asset name ${{ github.event.inputs.distinct_id }}\r\n        if: env.disable_qt5 != \'yes\' # When qBittorrent v5 is released, remove this\r\n        run: docker exec -w /root/${{ env.qbt_build_dir }}/completed multiarch mv -f qbittorrent-nox ${{ matrix.qbt_cross_name }}-${{ matrix.qbt_qt_version_name }}qbittorrent-nox\r\n\r\n      - name: Docker - Release Info ${{ github.event.inputs.distinct_id }}\r\n        if: env.disable_qt5 != \'yes\' # When qBittorrent v5 is released, remove this\r\n        run: docker exec -w /root/${{ env.qbt_build_dir }}/release_info multiarch bash -c \'mv *.md *.json \'/root/${{ env.qbt_build_dir }}/completed\'\'\r\n\r\n      # - name: Docker - upx compression ${{ github.event.inputs.distinct_id }}\r\n      #   run: |\r\n      #     docker exec -w /root multiarch apk add upx\r\n      #     docker exec -w /root/${{ env.qbt_build_dir }}/completed multiarch upx --brute --no-lzma ${{ matrix.qbt_cross_name }}-${{ matrix.qbt_qt_version_name }}qbittorrent-nox\r\n\r\n      - name: Host - Upload libtorrent-v${{ matrix.qbt_libtorrent_version }}-qbittorrent-nox and release info artifact ${{ github.event.inputs.distinct_id }}\r\n        if: env.disable_qt5 != \'yes\' # When qBittorrent v5 is released, remove this\r\n        uses: actions/upload-artifact@v4\r\n        with:\r\n          name: libtorrent-v${{ matrix.qbt_libtorrent_version }}-${{ matrix.qbt_cross_name }}-${{ matrix.qbt_qt_version_name }}qbittorrent-nox\r\n          path: |\r\n            ${{ env.qbt_build_dir }}/completed/*\r\n            !${{ env.qbt_build_dir }}/completed/*.png\r\n\r\n      - name: Host - Upload cmake graphs artifact ${{ github.event.inputs.distinct_id }}\r\n        if: matrix.qbt_build_tool == \'cmake\' && env.disable_qt5 != \'yes\' # When qBittorrent v5 is released, remove this\r\n        uses: actions/upload-artifact@v4\r\n        with:\r\n          name: "${{ matrix.qbt_cross_name }}-libtorrent-v${{ matrix.qbt_libtorrent_version }}-graphs"\r\n          path: "${{ env.qbt_build_dir }}/completed/*.png"\r\n\r\n  release:\r\n    runs-on: ubuntu-latest\r\n    permissions:\r\n      contents: write\r\n    needs: build\r\n    if: always() && contains(needs.*.result, \'success\') && !contains(needs.*.result, \'failure\') && !contains(needs.*.result, \'cancelled\')\r\n    strategy:\r\n      fail-fast: false\r\n      matrix:\r\n        qbt_libtorrent_version: ["1.2", "2.0"]\r\n        include:\r\n          - qbt_libtorrent_version: "1.2"\r\n            preview_release: true\r\n\r\n          - qbt_libtorrent_version: "2.0"\r\n            preview_release: false\r\n\r\n    name: "Publish release libtorrent-v${{ matrix.qbt_libtorrent_version }}"\r\n\r\n    env:\r\n      qbt_build_dir: "qbt-build"\r\n\r\n    steps:\r\n      - name: Checkout ${{ github.event.inputs.distinct_id }}\r\n        uses: actions/checkout@v4\r\n\r\n      - name: Pandoc - Bootstrap\r\n        run: |\r\n          pandoc_git_tag="$(git ls-remote -q -t --refs https://github.com/jgm/pandoc.git | awk \'/tags\\/[0-9]/{sub("refs/tags/", ""); print $2 }\' | awk \'!/^$/\' | sort -rV | head -n 1)"\r\n          curl -sLo- "https://github.com/jgm/pandoc/releases/latest/download/pandoc-${pandoc_git_tag}-linux-amd64.tar.gz" | tar xzf - --strip-components 2 -C "$(pwd)" --exclude="share"\r\n\r\n      - name: Host - Download 1.2 qbittorrent-nox artifacts ${{ github.event.inputs.distinct_id }}\r\n        uses: actions/download-artifact@v4\r\n        with:\r\n          path: "1.2"\r\n          pattern: libtorrent-v1.2-*-qbittorrent-nox\r\n          merge-multiple: true\r\n\r\n      - name: Host - Download 2.0 qbittorrent-nox artifacts ${{ github.event.inputs.distinct_id }}\r\n        uses: actions/download-artifact@v4\r\n        with:\r\n          path: "2.0"\r\n          pattern: libtorrent-v2.0-*-qbittorrent-nox\r\n          merge-multiple: true\r\n\r\n      - name: Host - merge release-info ${{ github.event.inputs.distinct_id }}\r\n        run: |\r\n          if [[ ${{ matrix.qbt_libtorrent_version }} == "1.2" ]]; then\r\n            for release in 1\\.2/*-release.md; do\r\n              [[ -f "${release}" ]] && release+=("${release}")\r\n            done\r\n          fi\r\n\r\n          if [[ ${{ matrix.qbt_libtorrent_version }} == "2.0" ]]; then\r\n            for release in 2\\.0/*-release.md; do\r\n              [[ -f "${release}" ]] && release+=("${release}")\r\n            done\r\n          fi\r\n\r\n          readarray -t release_sorted < <(printf \'%s\\n\' "${release[@]}" | sort)\r\n\r\n          for dependency_version_files in 1\\.2/*-dependency-version.json 2\\.0/*-dependency-version.json; do\r\n            [[ -f "${dependency_version_files}" ]] && dependency_version+=("${dependency_version_files}")\r\n          done\r\n\r\n          readarray -t dependency_version_sorted < <(printf \'%s\\n\' "${dependency_version[@]}" | sort)\r\n\r\n          paste -d \'\\n\' "${release_sorted[@]}" | uniq | awk \'!(NF && seen[$0]++) || /^>/\' > "tmp-release.md"\r\n          paste -d \'\\n\' "${dependency_version_sorted[@]}" | uniq | awk \'!(NF && seen[$0]++)\' > "dependency-version.json"\r\n\r\n          ./pandoc --wrap=preserve -f gfm tmp-release.md -t gfm -o release.md\r\n\r\n      - name: Host - Bootstrap release tag ${{ github.event.inputs.distinct_id }}\r\n        run: printf \'%s\\n\' "release_tag=$(cat ${{ matrix.qbt_libtorrent_version }}/tag.md)" >> $GITHUB_ENV\r\n\r\n      - name: Host - Bootstrap release title ${{ github.event.inputs.distinct_id }}\r\n        run: printf \'%s\\n\' "release_title=$(cat ${{ matrix.qbt_libtorrent_version }}/title.md)" >> $GITHUB_ENV\r\n\r\n      - name: Host- Create release - tag - assets ${{ github.event.inputs.distinct_id }}\r\n        uses: ncipollo/release-action@v1\r\n        with:\r\n          prerelease: "${{ matrix.preview_release }}"\r\n          artifacts: "${{ matrix.qbt_libtorrent_version }}/*-qbittorrent-nox,dependency-version.json"\r\n          replacesArtifacts: true\r\n          tag: "${{ env.release_tag }}"\r\n          name: "${{ env.release_title }}"\r\n          bodyFile: "release.md"\r\n          allowUpdates: true\r\n          token: "${{ github.TOKEN }}"\r\n\r\n  rerun-on-failure:\r\n    if: failure() && inputs.skip_rerun == \'0\'\r\n    name: rerun-on-failure\r\n    needs: release\r\n    permissions:\r\n      actions: write\r\n    runs-on: ubuntu-latest\r\n    env:\r\n      GH_TOKEN: "${{ github.TOKEN }}"\r\n    steps:\r\n      - uses: actions/checkout@v4\r\n      - name: Trigger rerun workflow on job failures\r\n        run: |\r\n          inputs_retries="${{ inputs.retries }}"\r\n          gh workflow run rerun.yml -f run_id=${{ github.run_id }} -f attempts=${{ github.run_attempt }} -f retries=${inputs_retries:-1}\n'})})]})}function d(r={}){const{wrapper:n}={...(0,s.R)(),...r.components};return n?(0,t.jsx)(n,{...r,children:(0,t.jsx)(l,{...r})}):l(r)}},8453:(r,n,e)=>{e.d(n,{R:()=>o,x:()=>a});var t=e(6540);const s={},i=t.createContext(s);function o(r){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof r?r(n):{...n,...r}}),[n,r])}function a(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(s):r.components||s:o(r.components),t.createElement(i.Provider,{value:n},r.children)}}}]);