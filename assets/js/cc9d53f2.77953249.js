"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[538],{9295:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(4848),s=t(8453);const i={},l=void 0,o={id:"yaml",title:"yaml",description:"",source:"@site/docs/yaml.md",sourceDirName:".",slug:"/yaml",permalink:"/docs/yaml",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/yaml.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"workflows",permalink:"/docs/workflows"},next:{title:"yolo",permalink:"/docs/yolo"}},r={},p=[];function c(e){const n={code:"code",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# In this example we flip 2 times a coin. First time we\n# use the simple conditionals syntax. The second time we use\n# regex and a complex condition with logical AND and OR.\n# We also use of the parenthesis for defining the priority.\napiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: coinflip-\nspec:\n  entrypoint: coinflip\n  templates:\n  - name: coinflip\n    steps:\n    # flip a coin\n    - - name: flip-coin\n        template: flip-coin\n    # evaluate the result in parallel\n    - - name: heads\n        template: heads                       # call heads template if "heads"\n        when: "{{steps.flip-coin.outputs.result}} == heads"\n      - name: tails\n        template: tails                       # call tails template if "tails"\n        when: "{{steps.flip-coin.outputs.result}} == tails"\n    - - name: flip-again\n        template: flip-coin\n    - - name: complex-condition\n        template: heads-tails-or-twice-tails\n        # call heads template if first flip was "heads" and second was "tails" OR both were "tails"\n        when: >-\n            ( {{steps.flip-coin.outputs.result}} == heads &&\n              {{steps.flip-again.outputs.result}} == tails\n            ) ||\n            ( {{steps.flip-coin.outputs.result}} == tails &&\n              {{steps.flip-again.outputs.result}} == tails )\n      - name: heads-regex\n        template: heads                       # call heads template if ~ "hea"\n        when: "{{steps.flip-again.outputs.result}} =~ hea"\n      - name: tails-regex\n        template: tails                       # call heads template if ~ "tai"\n        when: "{{steps.flip-again.outputs.result}} =~ tai"\n\n  # Return heads or tails based on a random number\n  - name: flip-coin\n    script:\n      image: python:alpine3.6\n      command: [python]\n      source: |\n        import random\n        result = "heads" if random.randint(0,1) == 0 else "tails"\n        print(result)\n\n  - name: heads\n    container:\n      image: alpine:3.6\n      command: [sh, -c]\n      args: ["echo \\"it was heads\\""]\n\n  - name: tails\n    container:\n      image: alpine:3.6\n      command: [sh, -c]\n      args: ["echo \\"it was tails\\""]\n\n  - name: heads-tails-or-twice-tails\n    container:\n      image: alpine:3.6\n      command: [sh, -c]\n      args: ["echo \\"it was heads the first flip and tails the second. Or it was two times tails.\\""]\n  ``\n'})})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var a=t(6540);const s={},i=a.createContext(s);function l(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);