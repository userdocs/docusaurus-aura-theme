"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[538],{9295:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=t(4848),r=t(8453);const s={},i=void 0,o={id:"yaml",title:"yaml",description:"",source:"@site/docs/yaml.md",sourceDirName:".",slug:"/yaml",permalink:"/docusaurus-aura-theme/docs/yaml",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/yaml.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"workflows",permalink:"/docusaurus-aura-theme/docs/workflows"},next:{title:"yolo",permalink:"/docusaurus-aura-theme/docs/yolo"}},l={},c=[];function p(e){const n={code:"code",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# In this example we flip 2 times a coin. First time we\r\n# use the simple conditionals syntax. The second time we use\r\n# regex and a complex condition with logical AND and OR.\r\n# We also use of the parenthesis for defining the priority.\r\napiVersion: argoproj.io/v1alpha1\r\nkind: Workflow\r\nmetadata:\r\n  generateName: coinflip-\r\nspec:\r\n  entrypoint: coinflip\r\n  templates:\r\n  - name: coinflip\r\n    steps:\r\n    # flip a coin\r\n    - - name: flip-coin\r\n        template: flip-coin\r\n    # evaluate the result in parallel\r\n    - - name: heads\r\n        template: heads                       # call heads template if "heads"\r\n        when: "{{steps.flip-coin.outputs.result}} == heads"\r\n      - name: tails\r\n        template: tails                       # call tails template if "tails"\r\n        when: "{{steps.flip-coin.outputs.result}} == tails"\r\n    - - name: flip-again\r\n        template: flip-coin\r\n    - - name: complex-condition\r\n        template: heads-tails-or-twice-tails\r\n        # call heads template if first flip was "heads" and second was "tails" OR both were "tails"\r\n        when: >-\r\n            ( {{steps.flip-coin.outputs.result}} == heads &&\r\n              {{steps.flip-again.outputs.result}} == tails\r\n            ) ||\r\n            ( {{steps.flip-coin.outputs.result}} == tails &&\r\n              {{steps.flip-again.outputs.result}} == tails )\r\n      - name: heads-regex\r\n        template: heads                       # call heads template if ~ "hea"\r\n        when: "{{steps.flip-again.outputs.result}} =~ hea"\r\n      - name: tails-regex\r\n        template: tails                       # call heads template if ~ "tai"\r\n        when: "{{steps.flip-again.outputs.result}} =~ tai"\r\n\r\n  # Return heads or tails based on a random number\r\n  - name: flip-coin\r\n    script:\r\n      image: python:alpine3.6\r\n      command: [python]\r\n      source: |\r\n        import random\r\n        result = "heads" if random.randint(0,1) == 0 else "tails"\r\n        print(result)\r\n\r\n  - name: heads\r\n    container:\r\n      image: alpine:3.6\r\n      command: [sh, -c]\r\n      args: ["echo \\"it was heads\\""]\r\n\r\n  - name: tails\r\n    container:\r\n      image: alpine:3.6\r\n      command: [sh, -c]\r\n      args: ["echo \\"it was tails\\""]\r\n\r\n  - name: heads-tails-or-twice-tails\r\n    container:\r\n      image: alpine:3.6\r\n      command: [sh, -c]\r\n      args: ["echo \\"it was heads the first flip and tails the second. Or it was two times tails.\\""]\r\n  ``\n'})})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);